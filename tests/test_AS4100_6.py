import unittest
import BeamDesign.CodeCheck.AS4100.S6 as S6
from BeamDesign.Utility.Symmetry import Symmetry


class Test_UT_S6(unittest.TestCase):
    delta_p = 100_000.0  # accept an accuracy of 0.001% in these tests U.N.O.

    # section capacity methods
    # region

    def test_s6_2_A_e(self):
        """
        Test the s6_2_A_e method against test values calculated in Excel.
        """

        An = (
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        Ae = (
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            4.846_230_000e-2,
            4.846_230_000e-2,
            4.846_230_000e-2,
            4.846_230_000e-2,
            4.846_230_000e-2,
            4.846_230_000e-2,
            9.640_800_000e-4,
            9.640_800_000e-4,
            9.640_800_000e-4,
            9.640_800_000e-4,
            9.640_800_000e-4,
            9.640_800_000e-4,
            2.672_820_000e-3,
            2.672_820_000e-3,
            2.672_820_000e-3,
            2.672_820_000e-3,
            2.672_820_000e-3,
            2.672_820_000e-3,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            1.520_000_000e-2,
            1.520_000_000e-2,
            1.520_000_000e-2,
            1.520_000_000e-2,
            1.520_000_000e-2,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
        )

        for i, v in enumerate(zip(An, kf, Ae)):
            Ani, kfi, Aei = v

            with self.subTest(f"{i} Ae"):
                A_e = S6.s6_2_A_e(A_n=Ani, k_f=kfi)
                delta = Aei / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=A_e, second=Aei, delta=delta)

    def test_s6_2_N_s(self):
        """
        Test the s6_2_N_s method against test values calcualted in excel.
        """

        An = (
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        fy = (
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
        )

        Ns = (
            6.048_000_000e5,
            6.048_000_000e5,
            6.048_000_000e5,
            6.048_000_000e5,
            1.356_944_400e7,
            1.356_944_400e7,
            1.356_944_400e7,
            1.356_944_400e7,
            1.356_944_400e7,
            1.356_944_400e7,
            3.085_056_000e5,
            3.085_056_000e5,
            3.085_056_000e5,
            3.085_056_000e5,
            3.085_056_000e5,
            3.085_056_000e5,
            8.553_024_000e5,
            8.553_024_000e5,
            8.553_024_000e5,
            8.553_024_000e5,
            8.553_024_000e5,
            8.553_024_000e5,
            4.576_000_000e4,
            4.576_000_000e4,
            4.576_000_000e4,
            4.576_000_000e4,
            4.576_000_000e4,
            7.028_000_000e6,
            7.028_000_000e6,
            7.028_000_000e6,
            7.028_000_000e6,
            7.028_000_000e6,
            1.968_400_000e6,
            1.968_400_000e6,
            1.968_400_000e6,
            1.968_400_000e6,
            1.968_400_000e6,
            4.256_000_000e6,
            4.256_000_000e6,
            4.256_000_000e6,
            4.256_000_000e6,
            4.256_000_000e6,
            2.412_800_000e5,
            2.412_800_000e5,
            2.412_800_000e5,
            2.412_800_000e5,
            2.412_800_000e5,
            3.300_000_000e6,
            3.300_000_000e6,
            3.300_000_000e6,
            3.300_000_000e6,
            3.900_000_000e6,
            3.900_000_000e6,
            3.900_000_000e6,
            3.900_000_000e6,
        )

        for i, v in enumerate(zip(An, kf, fy, Ns)):
            Ani, kfi, fyi, Nsi = v

            with self.subTest(f"{i} Ns"):
                A_e = S6.s6_2_A_e(A_n=Ani, k_f=kfi)
                N_s = S6.s6_2_N_s(A_e=A_e, f_y=fyi)

                delta = Nsi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N_s, second=Nsi, delta=delta)

    # endregion

    # member property methods

    # region

    def test_s6_3_2_l_e(self):
        """
        Test the s6_3_2_l_e method
        """

        with self.subTest("Test 1"):
            l = 1
            k = 0.5

            l_e = S6.s6_3_2_l_e(l=l, k_e=k)
            expected = l * k
            delta = Test_UT_S6.delta_p
            self.assertAlmostEqual(first=l_e, second=expected, delta=delta)

        with self.subTest("Test 2"):
            l = 1
            k = 1

            l_e = S6.s6_3_2_l_e(l=l, k_e=k)
            expected = l * k
            delta = Test_UT_S6.delta_p
            self.assertAlmostEqual(first=l_e, second=expected, delta=delta)

        with self.subTest("Test 3"):
            l = 1
            k = 2.2

            l_e = S6.s6_3_2_l_e(l=l, k_e=k)
            expected = l * k
            delta = Test_UT_S6.delta_p
            self.assertAlmostEqual(first=l_e, second=expected, delta=delta)

    # end member property methods
    # endregion

    # Euler buckling methods.
    # region

    def test_N_euler(self):
        """
        Test the N_euler function against values calculated in MS Excel.
        """

        E = (
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        Ix = (
            3.180_000_00e-6,
            3.180_000_00e-6,
            3.180_000_00e-6,
            3.180_000_00e-6,
            1.530_000_00e-2,
            1.530_000_00e-2,
            1.530_000_00e-2,
            1.530_000_00e-2,
            1.530_000_00e-2,
            1.530_000_00e-2,
            2.100_000_00e-6,
            2.100_000_00e-6,
            2.100_000_00e-6,
            2.100_000_00e-6,
            2.100_000_00e-6,
            2.100_000_00e-6,
            9.610_000_00e-6,
            9.610_000_00e-6,
            9.610_000_00e-6,
            9.610_000_00e-6,
            9.610_000_00e-6,
            9.610_000_00e-6,
            1.210_000_00e-8,
            1.210_000_00e-8,
            1.210_000_00e-8,
            1.210_000_00e-8,
            1.210_000_00e-8,
            4.860_000_00e-4,
            4.860_000_00e-4,
            4.860_000_00e-4,
            4.860_000_00e-4,
            4.860_000_00e-4,
            1.520_000_00e-4,
            1.520_000_00e-4,
            1.520_000_00e-4,
            1.520_000_00e-4,
            1.520_000_00e-4,
            9.860_000_00e-4,
            9.860_000_00e-4,
            9.860_000_00e-4,
            9.860_000_00e-4,
            9.860_000_00e-4,
            6.830_000_00e-7,
            6.830_000_00e-7,
            6.830_000_00e-7,
            6.830_000_00e-7,
            6.830_000_00e-7,
            4.853_848_48e-4,
            4.853_848_48e-4,
            4.853_848_48e-4,
            4.853_848_48e-4,
            2.100_083_33e-4,
            2.100_083_33e-4,
            2.100_083_33e-4,
            2.100_083_33e-4,
        )

        Iy = (
            1.140_000_00e-6,
            1.140_000_00e-6,
            1.140_000_00e-6,
            1.140_000_00e-6,
            8.340_000_00e-4,
            8.340_000_00e-4,
            8.340_000_00e-4,
            8.340_000_00e-4,
            8.340_000_00e-4,
            8.340_000_00e-4,
            3.150_000_00e-7,
            3.150_000_00e-7,
            3.150_000_00e-7,
            3.150_000_00e-7,
            3.150_000_00e-7,
            3.150_000_00e-7,
            2.480_000_00e-6,
            2.480_000_00e-6,
            2.480_000_00e-6,
            2.480_000_00e-6,
            2.480_000_00e-6,
            2.480_000_00e-6,
            3.190_000_00e-9,
            3.190_000_00e-9,
            3.190_000_00e-9,
            3.190_000_00e-9,
            3.190_000_00e-9,
            2.000_000_00e-4,
            2.000_000_00e-4,
            2.000_000_00e-4,
            2.000_000_00e-4,
            2.000_000_00e-4,
            6.480_000_00e-6,
            6.480_000_00e-6,
            6.480_000_00e-6,
            6.480_000_00e-6,
            6.480_000_00e-6,
            3.930_000_00e-5,
            3.930_000_00e-5,
            3.930_000_00e-5,
            3.930_000_00e-5,
            3.930_000_00e-5,
            1.200_000_00e-7,
            1.200_000_00e-7,
            1.200_000_00e-7,
            1.200_000_00e-7,
            1.200_000_00e-7,
            1.504_166_67e-5,
            1.504_166_67e-5,
            1.504_166_67e-5,
            1.504_166_67e-5,
            2.671_025_64e-5,
            2.671_025_64e-5,
            2.671_025_64e-5,
            2.671_025_64e-5,
        )

        Neuler_x = (
            6.277_068_40e4,
            2.510_827_36e5,
            6.277_068_40e6,
            2.510_827_36e7,
            4.718_904_60e6,
            1.887_561_84e7,
            7.550_247_37e7,
            3.020_098_95e8,
            1.208_039_58e9,
            3.020_098_95e10,
            1.036_308_46e4,
            4.145_233_85e4,
            1.658_093_54e5,
            4.145_233_85e6,
            1.658_093_54e7,
            4.145_233_85e8,
            4.742_344_91e4,
            1.896_937_97e5,
            7.587_751_86e5,
            1.896_937_97e7,
            7.587_751_86e7,
            1.896_937_97e9,
            2.388_444_27e2,
            9.553_777_06e2,
            2.388_444_27e4,
            9.553_777_06e4,
            2.388_444_27e6,
            5.995_784_67e5,
            2.398_313_87e6,
            9.593_255_48e6,
            3.837_302_19e7,
            9.593_255_48e8,
            7.500_899_34e5,
            3.000_359_74e6,
            1.200_143_90e7,
            3.000_359_74e8,
            1.200_143_90e9,
            1.216_428_74e6,
            4.865_714_97e6,
            1.946_285_99e7,
            7.785_143_95e7,
            1.946_285_99e9,
            1.348_187_96e4,
            5.392_751_84e4,
            1.348_187_96e6,
            5.392_751_84e6,
            1.348_187_96e8,
            9.581_112_87e6,
            3.832_445_15e7,
            9.581_112_87e8,
            3.832_445_15e9,
            4.145_398_34e6,
            1.658_159_34e7,
            4.145_398_34e8,
            1.658_159_34e9,
        )

        Neuler_y = (
            2.250_269_80e4,
            9.001_079_21e4,
            2.250_269_80e6,
            9.001_079_21e6,
            2.572_265_65e5,
            1.028_906_26e6,
            4.115_625_04e6,
            1.646_250_01e7,
            6.585_000_06e7,
            1.646_250_01e9,
            1.554_462_69e3,
            6.217_850_77e3,
            2.487_140_31e4,
            6.217_850_77e5,
            2.487_140_31e6,
            6.217_850_77e7,
            1.223_830_95e4,
            4.895_323_78e4,
            1.958_129_51e5,
            4.895_323_78e6,
            1.958_129_51e7,
            4.895_323_78e8,
            6.296_807_61e1,
            2.518_723_04e2,
            6.296_807_61e3,
            2.518_723_04e4,
            6.296_807_61e5,
            2.467_401_10e5,
            9.869_604_40e5,
            3.947_841_76e6,
            1.579_136_70e7,
            3.947_841_76e8,
            3.197_751_83e4,
            1.279_100_73e5,
            5.116_402_92e5,
            1.279_100_73e7,
            5.116_402_92e7,
            4.848_443_16e4,
            1.939_377_26e5,
            7.757_509_06e5,
            3.103_003_62e6,
            7.757_509_06e7,
            2.368_705_06e3,
            9.474_820_23e3,
            2.368_705_06e5,
            9.474_820_23e5,
            2.368_705_06e7,
            2.969_105_99e5,
            1.187_642_40e6,
            2.969_105_99e7,
            1.187_642_40e8,
            5.272_393_28e5,
            2.108_957_31e6,
            5.272_393_28e7,
            2.108_957_31e8,
        )

        for i, v in enumerate(zip(E, Ix, lex, Iy, ley, Neuler_x, Neuler_y)):
            Ei, Ixi, lexi, Iyi, leyi, Nxi, Nyi = v

            with self.subTest(f"{i} Nx"):
                Nx = S6.N_euler(E=Ei, I=Ixi, l_e=lexi)
                delta_x = Nxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=Nx, second=Nxi, delta=delta_x)

            with self.subTest(f"{i} Ny"):
                Ny = S6.N_euler(E=Ei, I=Iyi, l_e=leyi)
                delta_y = Nyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=Ny, second=Nyi, delta=delta_y)

    def test_f_euler(self):
        """
        Testing the f_euler function against values calculated in MS Excel.
        """

        E = (
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            4.110_000_00e-2,
            4.110_000_00e-2,
            4.110_000_00e-2,
            4.110_000_00e-2,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            2.100_000_00e-1,
            2.100_000_00e-1,
            2.100_000_00e-1,
            2.100_000_00e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
        )

        ry = (
            2.450_000_00e-2,
            2.450_000_00e-2,
            2.450_000_00e-2,
            2.450_000_00e-2,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
        )

        feuler_x = (
            3.334_366_89e7,
            1.333_746_76e8,
            3.334_366_89e9,
            1.333_746_76e10,
            8.180_205_71e7,
            3.272_082_28e8,
            1.308_832_91e9,
            5.235_331_65e9,
            2.094_132_66e10,
            5.235_331_65e11,
            8.913_486_47e6,
            3.565_394_59e7,
            1.426_157_84e8,
            3.565_394_59e9,
            1.426_157_84e10,
            3.565_394_59e11,
            1.700_379_86e7,
            6.801_519_44e7,
            2.720_607_78e8,
            6.801_519_44e9,
            2.720_607_78e10,
            6.801_519_44e11,
            1.677_998_56e6,
            6.711_994_23e6,
            1.677_998_56e8,
            6.711_994_23e8,
            1.677_998_56e10,
            2.383_632_83e7,
            9.534_531_33e7,
            3.813_812_53e8,
            1.525_525_01e9,
            3.813_812_53e10,
            1.066_361_41e8,
            4.265_445_63e8,
            1.706_178_25e9,
            4.265_445_63e10,
            1.706_178_25e11,
            7.649_066_78e7,
            3.059_626_71e8,
            1.223_850_68e9,
            4.895_402_74e9,
            1.223_850_68e11,
            1.788_392_06e7,
            7.153_568_23e7,
            1.788_392_06e9,
            7.153_568_23e9,
            1.788_392_06e11,
            8.704_991_08e8,
            3.481_996_43e9,
            8.704_991_08e10,
            3.481_996_43e11,
            3.188_767_95e8,
            1.275_507_18e9,
            3.188_767_95e10,
            1.275_507_18e11,
        )

        feuler_y = (
            1.184_846_01e7,
            4.739_384_03e7,
            1.184_846_01e9,
            4.739_384_03e9,
            4.441_321_98e6,
            1.776_528_79e7,
            7.106_115_17e7,
            2.842_446_07e8,
            1.136_978_43e9,
            2.842_446_07e10,
            1.327_264_40e6,
            5.309_057_60e6,
            2.123_623_04e7,
            5.309_057_60e8,
            2.123_623_04e9,
            5.309_057_60e10,
            4.382_301_75e6,
            1.752_920_70e7,
            7.011_682_79e7,
            1.752_920_70e9,
            7.011_682_79e9,
            1.752_920_70e11,
            4.416_233_45e5,
            1.766_493_38e6,
            4.416_233_45e7,
            1.766_493_38e8,
            4.416_233_45e9,
            9.838_132_70e6,
            3.935_253_08e7,
            1.574_101_23e8,
            6.296_404_93e8,
            1.574_101_23e10,
            4.560_546_80e6,
            1.824_218_72e7,
            7.296_874_88e7,
            1.824_218_72e9,
            7.296_874_88e9,
            3.035_100_75e6,
            1.214_040_30e7,
            4.856_161_19e7,
            1.942_464_48e8,
            4.856_161_19e9,
            3.133_796_79e6,
            1.253_518_72e7,
            3.133_796_79e8,
            1.253_518_72e9,
            3.133_796_79e10,
            2.699_231_08e7,
            1.079_692_43e8,
            2.699_231_08e9,
            1.079_692_43e10,
            4.055_687_14e7,
            1.622_274_86e8,
            4.055_687_14e9,
            1.622_274_86e10,
        )

        for i, v in enumerate(zip(E, lex, rx, ley, ry, feuler_x, feuler_y)):
            Ei, lexi, rxi, leyi, ryi, fxi, fyi = v

            with self.subTest(f"{i} f_x"):
                fx = S6.f_euler(E=Ei, l_e=lexi, r=rxi)
                delta_x = fxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=fx, second=fxi, delta=delta_x)

            with self.subTest(f"{i} f_y"):
                fy = S6.f_euler(E=Ei, l_e=leyi, r=ryi)
                delta_y = fyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=fy, second=fyi, delta=delta_y)

    def test_r_ol(self):
        """
        Test the r_ol calculations against values calculated in MS Excel
        """

        rx = (
            4.110_000_00e-2,
            4.110_000_00e-2,
            4.110_000_00e-2,
            4.110_000_00e-2,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            2.100_000_00e-1,
            2.100_000_00e-1,
            2.100_000_00e-1,
            2.100_000_00e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
        )

        ry = (
            2.450_000_00e-2,
            2.450_000_00e-2,
            2.450_000_00e-2,
            2.450_000_00e-2,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
        )

        xo = (
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            5.670_000_00e-2,
            5.670_000_00e-2,
            5.670_000_00e-2,
            5.670_000_00e-2,
            5.670_000_00e-2,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            2.720_000_00e-2,
            2.720_000_00e-2,
            2.720_000_00e-2,
            2.720_000_00e-2,
            2.720_000_00e-2,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            2.206_140_81e-2,
            2.206_140_81e-2,
            2.206_140_81e-2,
            2.206_140_81e-2,
        )

        yo = (
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            1.542_850_48e-1,
            1.542_850_48e-1,
            1.542_850_48e-1,
            1.542_850_48e-1,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
        )

        rol = (
            4.784_830_20e-2,
            4.784_830_20e-2,
            4.784_830_20e-2,
            4.784_830_20e-2,
            5.287_958_02e-1,
            5.287_958_02e-1,
            5.287_958_02e-1,
            5.287_958_02e-1,
            5.287_958_02e-1,
            5.287_958_02e-1,
            4.555_447_29e-2,
            4.555_447_29e-2,
            4.555_447_29e-2,
            4.555_447_29e-2,
            4.555_447_29e-2,
            4.555_447_29e-2,
            6.583_107_17e-2,
            6.583_107_17e-2,
            6.583_107_17e-2,
            6.583_107_17e-2,
            6.583_107_17e-2,
            6.583_107_17e-2,
            1.036_249_49e-2,
            1.036_249_49e-2,
            1.036_249_49e-2,
            1.036_249_49e-2,
            1.036_249_49e-2,
            1.652_134_68e-1,
            1.652_134_68e-1,
            1.652_134_68e-1,
            1.652_134_68e-1,
            1.652_134_68e-1,
            1.604_619_89e-1,
            1.604_619_89e-1,
            1.604_619_89e-1,
            1.604_619_89e-1,
            1.604_619_89e-1,
            2.538_920_24e-1,
            2.538_920_24e-1,
            2.538_920_24e-1,
            2.538_920_24e-1,
            2.538_920_24e-1,
            4.248_070_15e-2,
            4.248_070_15e-2,
            4.248_070_15e-2,
            4.248_070_15e-2,
            4.248_070_15e-2,
            2.631_944_57e-1,
            2.631_944_57e-1,
            2.631_944_57e-1,
            2.631_944_57e-1,
            1.367_326_88e-1,
            1.367_326_88e-1,
            1.367_326_88e-1,
            1.367_326_88e-1,
        )

        for i, v in enumerate(zip(rx, ry, xo, yo, rol)):
            rxi, ryi, xoi, yoi, roli = v

            with self.subTest(f"{i} r_ol"):
                r_ol = S6.r_ol(r_x=rxi, r_y=ryi, x_o=xoi, y_o=yoi)
                delta = roli / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=r_ol, second=roli, delta=delta)

    def test_f_euler_torsion(self):
        """
        Test the f_euler_torsion method based on values calculated in MS Excel.
        """

        An = (
            1.89000e-3,
            1.89000e-3,
            1.89000e-3,
            1.89000e-3,
            5.79000e-2,
            5.79000e-2,
            5.79000e-2,
            5.79000e-2,
            5.79000e-2,
            5.79000e-2,
            1.17000e-3,
            1.17000e-3,
            1.17000e-3,
            1.17000e-3,
            1.17000e-3,
            1.17000e-3,
            2.79000e-3,
            2.79000e-3,
            2.79000e-3,
            2.79000e-3,
            2.79000e-3,
            2.79000e-3,
            1.43000e-4,
            1.43000e-4,
            1.43000e-4,
            1.43000e-4,
            1.43000e-4,
            2.51000e-2,
            2.51000e-2,
            2.51000e-2,
            2.51000e-2,
            2.51000e-2,
            7.03000e-3,
            7.03000e-3,
            7.03000e-3,
            7.03000e-3,
            7.03000e-3,
            1.60000e-2,
            1.60000e-2,
            1.60000e-2,
            1.60000e-2,
            1.60000e-2,
            7.54000e-4,
            7.54000e-4,
            7.54000e-4,
            7.54000e-4,
            7.54000e-4,
            1.10000e-2,
            1.10000e-2,
            1.10000e-2,
            1.10000e-2,
            1.30000e-2,
            1.30000e-2,
            1.30000e-2,
            1.30000e-2,
        )

        lez = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            4.110_000_00e-2,
            4.110_000_00e-2,
            4.110_000_00e-2,
            4.110_000_00e-2,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            5.150_000_00e-1,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            4.250_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            5.870_000_00e-2,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            9.220_000_00e-3,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.390_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            1.470_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            2.490_000_00e-1,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            3.010_000_00e-2,
            2.100_000_00e-1,
            2.100_000_00e-1,
            2.100_000_00e-1,
            2.100_000_00e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
            1.271_003_04e-1,
        )

        ry = (
            2.450_000_00e-2,
            2.450_000_00e-2,
            2.450_000_00e-2,
            2.450_000_00e-2,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.200_000_00e-1,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            1.640_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            2.980_000_00e-2,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            4.730_000_00e-3,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            8.930_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            3.040_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            4.960_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            1.260_000_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            3.697_900_00e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
            4.532_808_30e-2,
        )

        xo = (
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            5.670_000_00e-2,
            5.670_000_00e-2,
            5.670_000_00e-2,
            5.670_000_00e-2,
            5.670_000_00e-2,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            2.720_000_00e-2,
            2.720_000_00e-2,
            2.720_000_00e-2,
            2.720_000_00e-2,
            2.720_000_00e-2,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            2.206_140_81e-2,
            2.206_140_81e-2,
            2.206_140_81e-2,
            2.206_140_81e-2,
        )

        yo = (
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            1.542_850_48e-1,
            1.542_850_48e-1,
            1.542_850_48e-1,
            1.542_850_48e-1,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
        )

        J = (
            3.490_000_00e-8,
            3.490_000_00e-8,
            3.490_000_00e-8,
            3.490_000_00e-8,
            2.200_000_00e-5,
            2.200_000_00e-5,
            2.200_000_00e-5,
            2.200_000_00e-5,
            2.200_000_00e-5,
            2.200_000_00e-5,
            1.480_000_00e-8,
            1.480_000_00e-8,
            1.480_000_00e-8,
            1.480_000_00e-8,
            1.480_000_00e-8,
            1.480_000_00e-8,
            8.890_000_00e-8,
            8.890_000_00e-8,
            8.890_000_00e-8,
            8.890_000_00e-8,
            8.890_000_00e-8,
            8.890_000_00e-8,
            5.150_000_00e-10,
            5.150_000_00e-10,
            5.150_000_00e-10,
            5.150_000_00e-10,
            5.150_000_00e-10,
            5.750_000_00e-6,
            5.750_000_00e-6,
            5.750_000_00e-6,
            5.750_000_00e-6,
            5.750_000_00e-6,
            4.720_000_00e-7,
            4.720_000_00e-7,
            4.720_000_00e-7,
            4.720_000_00e-7,
            4.720_000_00e-7,
            1.560_000_00e-6,
            1.560_000_00e-6,
            1.560_000_00e-6,
            1.560_000_00e-6,
            1.560_000_00e-6,
            8.130_000_00e-9,
            8.130_000_00e-9,
            8.130_000_00e-9,
            8.130_000_00e-9,
            8.130_000_00e-9,
            9.183_880_08e-7,
            9.183_880_08e-7,
            9.183_880_08e-7,
            9.183_880_08e-7,
            1.584_755_62e-6,
            1.584_755_62e-6,
            1.584_755_62e-6,
            1.584_755_62e-6,
        )

        Iw = (
            2.300_000_00e-9,
            2.300_000_00e-9,
            2.300_000_00e-9,
            2.300_000_00e-9,
            2.800_000_00e-4,
            2.800_000_00e-4,
            2.800_000_00e-4,
            2.800_000_00e-4,
            2.800_000_00e-4,
            2.800_000_00e-4,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            0.000_000_00e0,
            4.600_000_00e-6,
            4.600_000_00e-6,
            4.600_000_00e-6,
            4.600_000_00e-6,
            4.600_000_00e-6,
            1.510_000_00e-7,
            1.510_000_00e-7,
            1.510_000_00e-7,
            1.510_000_00e-7,
            1.510_000_00e-7,
            3.450_000_00e-6,
            3.450_000_00e-6,
            3.450_000_00e-6,
            3.450_000_00e-6,
            3.450_000_00e-6,
            1.060_000_00e-10,
            1.060_000_00e-10,
            1.060_000_00e-10,
            1.060_000_00e-10,
            1.060_000_00e-10,
            4.029_090_74e-7,
            4.029_090_74e-7,
            4.029_090_74e-7,
            4.029_090_74e-7,
            3.063_442_39e-8,
            3.063_442_39e-8,
            3.063_442_39e-8,
            3.063_442_39e-8,
        )

        E = (
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
        )

        G = (
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
        )

        Foz = (
            6.557_310_18e8,
            6.872_073_39e8,
            1.694_449_62e9,
            4.842_081_73e9,
            1.140_411_52e8,
            1.300_431_60e8,
            1.940_511_94e8,
            4.500_833_27e8,
            1.474_211_86e9,
            3.424_632_49e10,
            4.876_450_15e8,
            4.876_450_15e8,
            4.876_450_15e8,
            4.876_450_15e8,
            4.876_450_15e8,
            4.876_450_15e8,
            5.882_009_13e8,
            5.882_009_13e8,
            5.882_009_13e8,
            5.882_009_13e8,
            5.882_009_13e8,
            5.882_009_13e8,
            2.683_073_20e9,
            2.683_073_20e9,
            2.683_073_20e9,
            2.683_073_20e9,
            2.683_073_20e9,
            6.797_016_56e8,
            7.045_515_32e8,
            8.039_510_36e8,
            1.201_549_05e9,
            1.392_468_56e10,
            2.127_253_31e8,
            2.250_753_69e8,
            2.744_755_20e8,
            1.855_280_34e9,
            6.795_295_42e9,
            1.251_298_72e8,
            1.375_101_96e8,
            1.870_314_91e8,
            3.851_166_75e8,
            6.723_842_54e9,
            4.795_354_55e8,
            4.841_486_54e8,
            6.317_710_10e8,
            1.093_090_87e9,
            1.585_532_65e10,
            1.068_580_03e8,
            1.381_700_80e8,
            1.140_156_55e9,
            4.271_364_29e9,
            5.241_200_12e8,
            5.315_840_30e8,
            7.704_325_94e8,
            1.516_834_36e9,
        )

        for i, v in enumerate(zip(An, lez, rx, ry, xo, yo, J, Iw, E, G, Foz)):
            Ani, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, Fozi = v

            with self.subTest(f"{i} f_torsion"):
                f = S6.f_euler_torsion(
                    A=Ani,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    E=Ei,
                    G=Gi,
                )
                delta = Fozi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=f, second=Fozi, delta=delta)

    # end Euler buckling methods
    # endregion

    # member flexural buckling capacity methods
    # region

    def test_s6_3_3_λ_n(self):
        """
        Test the s6_3_3_λ_n method against values calculated from excel.
        """

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0411,
            0.0411,
            0.0411,
            0.0411,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        fy = (
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
        )

        fref = (
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
        )

        λnx = (
            275.272_712_870_675,
            137.636_356_435_338,
            27.527_271_287_067_5,
            13.763_635_643_533_8,
            150.402_307_136_206,
            75.201_153_568_103_1,
            37.600_576_784_051_5,
            18.800_288_392_025_8,
            9.400_144_196_012_88,
            1.880_028_839_202_58,
            483.292_055_668_893,
            241.646_027_834_446,
            120.823_013_917_223,
            24.164_602_783_444_6,
            12.082_301_391_722_3,
            2.416_460_278_344_47,
            377.293_769_768_957,
            188.646_884_884_479,
            94.323_442_442_239_3,
            18.864_688_488_447_9,
            9.432_344_244_223_93,
            1.886_468_848_844_79,
            1227.083_351_299_87,
            613.541_675_649_933,
            122.708_335_129_987,
            61.354_167_564_993_3,
            12.270_833_512_998_7,
            304.546_913_503_838,
            152.273_456_751_919,
            76.136_728_375_959_4,
            38.068_364_187_979_7,
            7.613_672_837_595_94,
            143.986_465_908_277,
            71.993_232_954_138_5,
            35.996_616_477_069_3,
            7.199_323_295_413_85,
            3.599_661_647_706_93,
            165.703_414_724_21,
            82.851_707_362_105_2,
            41.425_853_681_052_6,
            20.712_926_840_526_3,
            4.142_585_368_105_26,
            375.870_714_251_985,
            187.935_357_125_993,
            37.587_071_425_198_5,
            18.793_535_712_599_3,
            3.758_707_142_519_85,
            52.164_053_095_730_1,
            26.082_026_547_865_1,
            5.216_405_309_573_01,
            2.608_202_654_786_5,
            86.187_450_697_036_1,
            43.093_725_348_518_1,
            8.618_745_069_703_61,
            4.309_372_534_851_81,
        )

        for i, v in enumerate(zip(kf, lex, rx, fy, fref, λnx)):

            kfi, lexi, rxi, fyi, frefi, λnxi = v

            with self.subTest(f"{i} λ_nx"):
                λ_n = S6.s6_3_3_λ_n(k_f=kfi, l_e=lexi, r=rxi, f_y=fyi, f_ref=frefi)

                delta = λnxi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=λ_n, second=λnxi, delta=delta)

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ry = (
            2.450_000_000e-2,
            2.450_000_000e-2,
            2.450_000_000e-2,
            2.450_000_000e-2,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
        )

        λny = (
            4.617_840_204e2,
            2.308_920_102e2,
            4.617_840_204e1,
            2.308_920_102e1,
            6.454_765_681e2,
            3.227_382_841e2,
            1.613_691_420e2,
            8.068_457_102e1,
            4.034_228_551e1,
            8.068_457_102e0,
            1.252_433_681e3,
            6.262_168_404e2,
            3.131_084_202e2,
            6.262_168_404e1,
            3.131_084_202e1,
            6.262_168_404e0,
            7.431_927_613e2,
            3.715_963_806e2,
            1.857_981_903e2,
            3.715_963_806e1,
            1.857_981_903e1,
            3.715_963_806e0,
            2.391_904_545e3,
            1.195_952_273e3,
            2.391_904_545e2,
            1.195_952_273e2,
            2.391_904_545e1,
            4.740_427_881e2,
            2.370_213_940e2,
            1.185_106_970e2,
            5.925_534_851e1,
            1.185_106_970e1,
            6.962_503_450e2,
            3.481_251_725e2,
            1.740_625_863e2,
            3.481_251_725e1,
            1.740_625_863e1,
            8.318_578_683e2,
            4.159_289_341e2,
            2.079_644_671e2,
            1.039_822_335e2,
            2.079_644_671e1,
            8.979_133_729e2,
            4.489_566_865e2,
            8.979_133_729e1,
            4.489_566_865e1,
            8.979_133_729e0,
            2.962_343_803e2,
            1.481_171_902e2,
            2.962_343_803e1,
            1.481_171_902e1,
            2.416_702_941e2,
            1.208_351_471e2,
            2.416_702_941e1,
            1.208_351_471e1,
        )

        for i, v in enumerate(zip(kf, ley, ry, fy, fref, λny)):

            kfi, leyi, ryi, fyi, frefi, λnyi = v

            with self.subTest(f"{i} λ_ny"):
                λ_n = S6.s6_3_3_λ_n(k_f=kfi, l_e=leyi, r=ryi, f_y=fyi, f_ref=frefi)

                delta = λnyi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=λ_n, second=λnyi, delta=delta)

    def test_s6_3_3_α_c(self):
        """
        Test the s6_3_3_α_c method against values calculated in Excel.
        """

        λnx = (
            2.752_727_129e2,
            1.376_363_564e2,
            2.752_727_129e1,
            1.376_363_564e1,
            1.504_023_071e2,
            7.520_115_357e1,
            3.760_057_678e1,
            1.880_028_839e1,
            9.400_144_196e0,
            1.880_028_839e0,
            4.832_920_557e2,
            2.416_460_278e2,
            1.208_230_139e2,
            2.416_460_278e1,
            1.208_230_139e1,
            2.416_460_278e0,
            3.772_937_698e2,
            1.886_468_849e2,
            9.432_344_244e1,
            1.886_468_849e1,
            9.432_344_244e0,
            1.886_468_849e0,
            1.227_083_351e3,
            6.135_416_756e2,
            1.227_083_351e2,
            6.135_416_756e1,
            1.227_083_351e1,
            3.045_469_135e2,
            1.522_734_568e2,
            7.613_672_838e1,
            3.806_836_419e1,
            7.613_672_838e0,
            1.439_864_659e2,
            7.199_323_295e1,
            3.599_661_648e1,
            7.199_323_295e0,
            3.599_661_648e0,
            1.657_034_147e2,
            8.285_170_736e1,
            4.142_585_368e1,
            2.071_292_684e1,
            4.142_585_368e0,
            3.758_707_143e2,
            1.879_353_571e2,
            3.758_707_143e1,
            1.879_353_571e1,
            3.758_707_143e0,
            5.216_405_310e1,
            2.608_202_655e1,
            5.216_405_310e0,
            2.608_202_655e0,
            8.618_745_070e1,
            4.309_372_535e1,
            8.618_745_070e0,
            4.309_372_535e0,
        )

        λny = (
            4.617_840_204e2,
            2.308_920_102e2,
            4.617_840_204e1,
            2.308_920_102e1,
            6.454_765_681e2,
            3.227_382_841e2,
            1.613_691_420e2,
            8.068_457_102e1,
            4.034_228_551e1,
            8.068_457_102e0,
            1.252_433_681e3,
            6.262_168_404e2,
            3.131_084_202e2,
            6.262_168_404e1,
            3.131_084_202e1,
            6.262_168_404e0,
            7.431_927_613e2,
            3.715_963_806e2,
            1.857_981_903e2,
            3.715_963_806e1,
            1.857_981_903e1,
            3.715_963_806e0,
            2.391_904_545e3,
            1.195_952_273e3,
            2.391_904_545e2,
            1.195_952_273e2,
            2.391_904_545e1,
            4.740_427_881e2,
            2.370_213_940e2,
            1.185_106_970e2,
            5.925_534_851e1,
            1.185_106_970e1,
            6.962_503_450e2,
            3.481_251_725e2,
            1.740_625_863e2,
            3.481_251_725e1,
            1.740_625_863e1,
            8.318_578_683e2,
            4.159_289_341e2,
            2.079_644_671e2,
            1.039_822_335e2,
            2.079_644_671e1,
            8.979_133_729e2,
            4.489_566_865e2,
            8.979_133_729e1,
            4.489_566_865e1,
            8.979_133_729e0,
            2.962_343_803e2,
            1.481_171_902e2,
            2.962_343_803e1,
            1.481_171_902e1,
            2.416_702_941e2,
            1.208_351_471e2,
            2.416_702_941e1,
            1.208_351_471e1,
        )

        αb = (
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0,
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0,
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
        )

        αcx = (
            9.708_656_934e-2,
            3.388_842_389e-1,
            9.521_989_787e-1,
            9.991_207_584e-1,
            2.718_756_932e-1,
            6.448_237_024e-1,
            8.774_682_468e-1,
            9.733_647_563e-1,
            1.000_000_000e0,
            1.000_000_000e0,
            3.258_937_687e-2,
            1.201_343_165e-1,
            3.788_217_835e-1,
            9.465_373_595e-1,
            1.000_000_000e0,
            1.000_000_000e0,
            5.237_583_110e-2,
            1.863_432_759e-1,
            5.194_585_002e-1,
            9.730_427_301e-1,
            1.000_000_000e0,
            1.000_000_000e0,
            5.259_492_508e-3,
            2.051_913_039e-2,
            3.705_551_033e-1,
            7.374_287_548e-1,
            1.000_000_000e0,
            8.011_587_805e-2,
            2.860_205_928e-1,
            7.074_242_692e-1,
            9.126_395_485e-1,
            1.000_000_000e0,
            2.913_266_864e-1,
            6.665_838_617e-1,
            8.859_737_757e-1,
            1.000_000_000e0,
            1.000_000_000e0,
            2.469_890_785e-1,
            6.606_427_508e-1,
            8.989_127_008e-1,
            9.758_042_548e-1,
            1.000_000_000e0,
            5.275_352_775e-2,
            1.875_617_005e-1,
            8.775_402_567e-1,
            9.733_985_234e-1,
            1.000_000_000e0,
            7.950_134_708e-1,
            9.369_052_228e-1,
            1.000_000_000e0,
            1.000_000_000e0,
            5.712_107_563e-1,
            8.475_597_267e-1,
            1.000_000_000e0,
            1.000_000_000e0,
        )

        αcy = (
            3.591_653_534e-2,
            1.351_162_568e-1,
            8.782_924_667e-1,
            9.676_914_721e-1,
            1.858_711_429e-2,
            7.036_459_900e-2,
            2.425_254_119e-1,
            6.077_516_302e-1,
            8.627_009_787e-1,
            1.000_000_000e0,
            5.051_151_548e-3,
            1.971_785_504e-2,
            7.447_774_960e-2,
            7.291_761_215e-1,
            9.103_435_409e-1,
            1.000_000_000e0,
            1.411_109_107e-2,
            5.391_269_351e-2,
            1.912_906_150e-1,
            8.798_157_899e-1,
            9.744_673_328e-1,
            1.000_000_000e0,
            1.399_879_531e-3,
            5.533_453_441e-3,
            1.223_788_322e-1,
            3.843_249_481e-1,
            9.477_681_998e-1,
            3.413_294_020e-2,
            1.286_673_675e-1,
            4.286_212_098e-1,
            8.128_045_141e-1,
            1.000_000_000e0,
            1.603_242_403e-2,
            6.100_836_679e-2,
            2.137_736_687e-1,
            8.921_953_914e-1,
            9.803_411_306e-1,
            1.134_699_969e-2,
            4.399_485_340e-2,
            1.639_956_096e-1,
            5.147_423_711e-1,
            9.755_208_070e-1,
            9.736_007_110e-3,
            3.755_817_947e-2,
            5.478_897_552e-1,
            8.374_532_731e-1,
            1.000_000_000e0,
            8.259_588_761e-2,
            2.785_965_988e-1,
            9.189_745_589e-1,
            9.933_738_100e-1,
            1.201_124_378e-1,
            3.787_678_741e-1,
            9.465_251_935e-1,
            1.000_000_000e0,
        )

        for i, v in enumerate(zip(λnx, λny, αb, αcx, αcy)):

            λnxi, λnyi, αbi, αcxi, αcyi = v

            with self.subTest(f"{i} α_cx"):
                α_c = S6.s6_3_3_α_c(λ_n=λnxi, α_b=αbi)
                delta = αcxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=α_c["α_c"], second=αcxi, delta=delta)

            with self.subTest(f"{i} α_cy"):
                α_c = S6.s6_3_3_α_c(λ_n=λnyi, α_b=αbi)
                delta = αcyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=α_c["α_c"], second=αcyi, delta=delta)

    def test_s6_3_3_N_c(self):
        """
        Test the s6_3_3_N_c method against values calculated in MS Excel
        """

        An = (
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            4.110_000_000e-2,
            4.110_000_000e-2,
            4.110_000_000e-2,
            4.110_000_000e-2,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            9.220_000_000e-3,
            9.220_000_000e-3,
            9.220_000_000e-3,
            9.220_000_000e-3,
            9.220_000_000e-3,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            3.010_000_000e-2,
            3.010_000_000e-2,
            3.010_000_000e-2,
            3.010_000_000e-2,
            3.010_000_000e-2,
            2.100_000_000e-1,
            2.100_000_000e-1,
            2.100_000_000e-1,
            2.100_000_000e-1,
            1.271_003_036e-1,
            1.271_003_036e-1,
            1.271_003_036e-1,
            1.271_003_036e-1,
        )

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ry = (
            2.450_000_000e-2,
            2.450_000_000e-2,
            2.450_000_000e-2,
            2.450_000_000e-2,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
        )

        fy = (
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
        )

        fref = (
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
            2.500e8,
        )

        αb = (
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0,
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0,
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
        )

        Ncx = (
            5.871_795_713e4,
            2.049_571_877e5,
            5.758_899_423e5,
            6.042_682_347e5,
            3.689_201_993e6,
            8.749_899_119e6,
            1.190_675_624e7,
            1.320_801_855e7,
            1.356_944_400e7,
            1.356_944_400e7,
            1.005_400_526e4,
            3.706_210_939e4,
            1.168_686_416e5,
            2.920_120_760e5,
            3.085_056_000e5,
            3.085_056_000e5,
            4.479_717_404e4,
            1.593_798_511e5,
            4.442_941_019e5,
            8.322_457_824e5,
            8.553_024_000e5,
            8.553_024_000e5,
            2.406_743_772e2,
            9.389_554_064e2,
            1.695_660_153e4,
            3.374_473_982e4,
            4.576_000_000e4,
            5.630_543_909e5,
            2.010_152_726e6,
            4.971_777_764e6,
            6.414_030_747e6,
            7.028_000_000e6,
            5.734_474_495e5,
            1.312_103_673e6,
            1.743_950_780e6,
            1.968_400_000e6,
            1.968_400_000e6,
            1.051_185_518e6,
            2.811_695_548e6,
            3.825_772_455e6,
            4.153_022_908e6,
            4.256_000_000e6,
            1.272_837_118e4,
            4.525_488_709e4,
            2.117_329_131e5,
            2.348_615_957e5,
            2.412_800_000e5,
            2.623_544_454e6,
            3.091_787_235e6,
            3.300_000_000e6,
            3.300_000_000e6,
            2.227_721_950e6,
            3.305_482_934e6,
            3.900_000_000e6,
            3.900_000_000e6,
        )

        Ncy = (
            2.172_232_058e4,
            8.171_831_213e4,
            5.311_912_838e5,
            5.852_598_023e5,
            2.522_168_064e5,
            9.548_084_858e5,
            3.290_934_996e6,
            8.246_851_712e6,
            1.170_637_262e7,
            1.356_944_400e7,
            1.558_308_539e3,
            6.083_068_698e3,
            2.297_680_283e4,
            2.249_549_169e5,
            2.808_460_803e5,
            3.085_056_000e5,
            1.206_925_006e4,
            4.611_165_615e4,
            1.636_113_221e5,
            7.525_085_567e5,
            8.334_642_485e5,
            8.553_024_000e5,
            6.405_848_735e1,
            2.532_108_294e2,
            5.600_055_361e3,
            1.758_670_963e4,
            4.336_987_282e4,
            2.398_863_037e5,
            9.042_742_591e5,
            3.012_349_862e6,
            5.712_390_125e6,
            7.028_000_000e6,
            3.155_822_346e4,
            1.200_888_692e5,
            4.207_920_895e5,
            1.756_197_408e6,
            1.929_703_481e6,
            4.829_283_067e4,
            1.872_420_961e5,
            6.979_653_144e5,
            2.190_743_531e6,
            4.151_816_554e6,
            2.349_103_796e3,
            9.062_037_542e3,
            1.321_948_401e5,
            2.020_607_257e5,
            2.412_800_000e5,
            2.725_664_291e5,
            9.193_687_761e5,
            3.032_616_044e6,
            3.278_133_573e6,
            4.684_385_075e5,
            1.477_194_709e6,
            3.691_448_255e6,
            3.900_000_000e6,
        )

        for i, v in enumerate(zip(An, kf, lex, rx, ley, ry, fy, fref, αb, Ncx, Ncy)):
            Ani, kfi, lexi, rxi, leyi, ryi, fyi, frefi, αbi, Ncxi, Ncyi = v

            with self.subTest(f"{i} N_cx"):
                N_c = S6.s6_3_3_N_c(
                    A_n=Ani, k_f=kfi, l_e=lexi, r=rxi, f_y=fyi, f_ref=frefi, α_b=αbi
                )
                delta = Ncxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N_c["N_c"], second=Ncxi, delta=delta)

            with self.subTest(f"{i} N_cy"):
                N_c = S6.s6_3_3_N_c(
                    A_n=Ani, k_f=kfi, l_e=leyi, r=ryi, f_y=fyi, f_ref=frefi, α_b=αbi
                )
                delta = Ncyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N_c["N_c"], second=Ncyi, delta=delta)

    # end member flexural buckling capacity methods
    # endregion

    # member torsion capacity methods - AS4600
    # region

    def test_f_oxz(self):
        """
        Test the f_oxz method against values calculated in excel.
        """

        An = (
            0.00189,
            0.00189,
            0.00189,
            0.00189,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        lez = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0411,
            0.0411,
            0.0411,
            0.0411,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0245,
            0.0245,
            0.0245,
            0.0245,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0,
            0,
            0,
            0,
            0,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            3.490_000e-8,
            3.490_000e-8,
            3.490_000e-8,
            3.490_000e-8,
            2.200_000e-5,
            2.200_000e-5,
            2.200_000e-5,
            2.200_000e-5,
            2.200_000e-5,
            2.200_000e-5,
            1.480_000e-8,
            1.480_000e-8,
            1.480_000e-8,
            1.480_000e-8,
            1.480_000e-8,
            1.480_000e-8,
            8.890_000e-8,
            8.890_000e-8,
            8.890_000e-8,
            8.890_000e-8,
            8.890_000e-8,
            8.890_000e-8,
            5.150_000e-10,
            5.150_000e-10,
            5.150_000e-10,
            5.150_000e-10,
            5.150_000e-10,
            5.750_000e-6,
            5.750_000e-6,
            5.750_000e-6,
            5.750_000e-6,
            5.750_000e-6,
            4.720_000e-7,
            4.720_000e-7,
            4.720_000e-7,
            4.720_000e-7,
            4.720_000e-7,
            1.560_000e-6,
            1.560_000e-6,
            1.560_000e-6,
            1.560_000e-6,
            1.560_000e-6,
            8.130_000e-9,
            8.130_000e-9,
            8.130_000e-9,
            8.130_000e-9,
            8.130_000e-9,
            9.183_880e-7,
            9.183_880e-7,
            9.183_880e-7,
            9.183_880e-7,
            1.584_756e-6,
            1.584_756e-6,
            1.584_756e-6,
            1.584_756e-6,
        )

        Iw = (
            2.300_000e-9,
            2.300_000e-9,
            2.300_000e-9,
            2.300_000e-9,
            2.800_000e-4,
            2.800_000e-4,
            2.800_000e-4,
            2.800_000e-4,
            2.800_000e-4,
            2.800_000e-4,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            0.000_000e0,
            4.600_000e-6,
            4.600_000e-6,
            4.600_000e-6,
            4.600_000e-6,
            4.600_000e-6,
            1.510_000e-7,
            1.510_000e-7,
            1.510_000e-7,
            1.510_000e-7,
            1.510_000e-7,
            3.450_000e-6,
            3.450_000e-6,
            3.450_000e-6,
            3.450_000e-6,
            3.450_000e-6,
            1.060_000e-10,
            1.060_000e-10,
            1.060_000e-10,
            1.060_000e-10,
            1.060_000e-10,
            4.029_091e-7,
            4.029_091e-7,
            4.029_091e-7,
            4.029_091e-7,
            3.063_442e-8,
            3.063_442e-8,
            3.063_442e-8,
            3.063_442e-8,
        )

        E = (
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
            2.000_000e11,
        )

        G = (
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
            8.000_000e10,
        )

        expected = (
            3.334_367e7,
            1.333_747e8,
            1.694_450e9,
            4.842_082e9,
            8.180_206e7,
            1.300_432e8,
            1.940_512e8,
            4.500_833e8,
            1.474_212e9,
            3.424_632e10,
            8.913_486e6,
            3.565_395e7,
            1.426_158e8,
            4.876_450e8,
            4.876_450e8,
            4.876_450e8,
            1.700_380e7,
            6.801_519e7,
            2.720_608e8,
            5.882_009e8,
            5.882_009e8,
            5.882_009e8,
            1.677_999e6,
            6.711_994e6,
            1.677_999e8,
            6.711_994e8,
            2.683_073e9,
            2.383_633e7,
            9.534_531e7,
            3.813_813e8,
            1.201_549e9,
            1.392_469e10,
            9.660_210e7,
            2.022_911e8,
            2.682_283e8,
            1.844_867e9,
            6.760_469e9,
            7.649_067e7,
            1.375_102e8,
            1.870_315e8,
            3.851_167e8,
            6.723_843e9,
            1.760_873e7,
            6.710_846e7,
            5.372_085e8,
            1.023_092e9,
            1.527_083e10,
            1.068_580e8,
            1.381_701e8,
            1.140_157e9,
            4.271_364e9,
            3.075_118e8,
            5.221_621e8,
            7.699_367e8,
            1.516_359e9,
        )

        for i, v in enumerate(zip(An, lex, lez, rx, ry, xo, yo, J, Iw, E, G, expected)):
            Ani, lexi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, expi = v

            with self.subTest(f"{i}"):
                f_oxz = S6.f_oxz(
                    A_n=Ani,
                    l_ex=lexi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    E=Ei,
                    G=Gi,
                )["f_oxz"]
                delta = expi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=f_oxz, second=expi, delta=delta)

    def test_f_oc_double_symmetric(self):
        """
        Test the f_oc_double_symmetric method against values calculated in Excel
        """

        An = (
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.00189,
            0.00189,
            0.00189,
            0.00189,
        )

        kf = (
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
        )

        lex = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10, 5, 1, 0.5)

        ley = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10, 5, 1, 0.5)

        lez = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10, 5, 1, 0.5)

        rx = (
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0411,
            0.0411,
            0.0411,
            0.0411,
        )

        ry = (
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0245,
            0.0245,
            0.0245,
            0.0245,
        )
        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        J = (
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            5.750_000_0e-6,
            5.750_000_0e-6,
            5.750_000_0e-6,
            5.750_000_0e-6,
            5.750_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            3.490_000_0e-8,
            3.490_000_0e-8,
            3.490_000_0e-8,
            3.490_000_0e-8,
        )

        Iw = (
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            4.600_000_0e-6,
            4.600_000_0e-6,
            4.600_000_0e-6,
            4.600_000_0e-6,
            4.600_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            2.300_000_0e-9,
            2.300_000_0e-9,
            2.300_000_0e-9,
            2.300_000_0e-9,
        )

        fy = (
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
        )

        E = (
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
        )

        G = (
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
        )

        expected = (
            8.180_205_7e7,
            1.300_431_6e8,
            1.940_511_9e8,
            4.500_833_3e8,
            1.474_211_9e9,
            3.424_632_5e10,
            2.383_632_8e7,
            9.534_531_3e7,
            3.813_812_5e8,
            1.201_549_1e9,
            1.392_468_6e10,
            7.649_066_8e7,
            1.375_102_0e8,
            1.870_314_9e8,
            3.851_166_7e8,
            6.723_842_5e9,
            3.334_366_9e7,
            1.333_746_8e8,
            1.694_449_6e9,
            4.842_081_7e9,
        )

        for i, v in enumerate(zip(An, lex, lez, rx, ry, xo, yo, J, Iw, E, G, expected)):
            Ani, lexi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, expi = v

            with self.subTest(f"{i} f_oc"):
                f_oc = S6.f_oc_double_symmetric(
                    A_n=Ani,
                    l_ex=lexi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    E=Ei,
                    G=Gi,
                )["f_oc"]
                delta = expi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=f_oc, second=expi, delta=delta)

    def test_f_oc_single_symmetric(self):
        """
        Test the f_oc_single_symmetric method against valus calculated in Excel.
        """

        An = (
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        kf = (
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        lex = (
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        lez = (
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            5.150_000_0e-10,
            5.150_000_0e-10,
            5.150_000_0e-10,
            5.150_000_0e-10,
            5.150_000_0e-10,
            4.720_000_0e-7,
            4.720_000_0e-7,
            4.720_000_0e-7,
            4.720_000_0e-7,
            4.720_000_0e-7,
            8.130_000_0e-9,
            8.130_000_0e-9,
            8.130_000_0e-9,
            8.130_000_0e-9,
            8.130_000_0e-9,
            9.183_880_1e-7,
            9.183_880_1e-7,
            9.183_880_1e-7,
            9.183_880_1e-7,
            1.584_755_6e-6,
            1.584_755_6e-6,
            1.584_755_6e-6,
            1.584_755_6e-6,
        )

        Iw = (
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.060_000_0e-10,
            1.060_000_0e-10,
            1.060_000_0e-10,
            1.060_000_0e-10,
            1.060_000_0e-10,
            4.029_090_7e-7,
            4.029_090_7e-7,
            4.029_090_7e-7,
            4.029_090_7e-7,
            3.063_442_4e-8,
            3.063_442_4e-8,
            3.063_442_4e-8,
            3.063_442_4e-8,
        )

        fy = (
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
        )

        E = (
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
        )

        G = (
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
        )

        Axis = (
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["y"],
            ["y"],
            ["y"],
            ["y"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
        )

        expected = [
            1.700_379_9e7,
            6.801_519_4e7,
            2.720_607_8e8,
            5.882_009_1e8,
            5.882_009_1e8,
            5.882_009_1e8,
            1.677_998_6e6,
            6.711_994_2e6,
            1.677_998_6e8,
            6.711_994_2e8,
            2.683_073_2e9,
            9.660_210_1e7,
            2.022_910_6e8,
            2.682_282_9e8,
            1.844_867_0e9,
            6.760_468_9e9,
            1.760_872_8e7,
            6.710_846_2e7,
            5.372_084_7e8,
            1.023_092_2e9,
            1.527_083_2e10,
            2.449_013_1e7,
            7.601_851_1e7,
            9.586_985_3e8,
            3.636_660_9e9,
            3.075_117_7e8,
            5.221_621_3e8,
            7.699_366_6e8,
            1.516_359_4e9,
        ]

        for i, v in enumerate(
            zip(An, lex, ley, lez, rx, ry, xo, yo, J, Iw, E, G, Axis, expected)
        ):
            Ani, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, Axi, expi = v

            with self.subTest(f"{i} f_oc single symmetric"):
                delta = expi / Test_UT_S6.delta_p
                f_oc = S6.f_oc_single_symmetric(
                    A_n=Ani,
                    l_ex=lexi,
                    l_ey=leyi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    E=Ei,
                    G=Gi,
                    sym=Symmetry(Axi),
                )["f_oc"]
                self.assertAlmostEqual(first=f_oc, second=expi, delta=delta)

    def test_f_oc_point_symmetric(self):
        """
        Test the f_oc_point_symmetric method against values calculated in Excel.
        """

        An = (
            0.00189,
            0.00189,
            0.00189,
            0.00189,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        lez = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0411,
            0.0411,
            0.0411,
            0.0411,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0245,
            0.0245,
            0.0245,
            0.0245,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0,
            0,
            0,
            0,
            0,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
        )

        Iw = (
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
        )

        E = (
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
        )

        G = (
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
        )

        expected = (
            655_731_018.07307,
            687_207_339.199_749,
            1_694_449_615.25344,
            4_842_081_727.92124,
            114_041_152.049_309,
            130_043_160.384_776,
            194_051_193.726_641,
            450_083_327.094_101,
            1_474_211_860.56394,
            34_246_324_931.5989,
            588_200_912.990_041,
            588_200_912.990_041,
            588_200_912.990_041,
            588_200_912.990_041,
            588_200_912.990_041,
            588_200_912.990_041,
            2_683_073_199.07552,
            2_683_073_199.07552,
            2_683_073_199.07552,
            2_683_073_199.07552,
            2_683_073_199.07552,
            679_701_655.557_604,
            704_551_531.690_738,
            803_951_036.223_273,
            1_201_549_054.35341,
            13_924_685_634.5179,
            212_725_331.257_086,
            225_075_368.944_878,
            274_475_519.696_047,
            1_855_280_343.73346,
            6_795_295_418.85039,
            125_129_871.710_703,
            137_510_195.666_545,
            187_031_491.489_911,
            385_116_674.783_376,
            6_723_842_540.17425,
            479_535_455.10111,
            484_148_653.743_465,
            631_771_010.298_818,
            1_093_090_874.5343,
            15_855_326_530.0696,
            106_858_002.989_415,
            138_170_080.303_502,
            1_140_156_554.35429,
            4_271_364_285.76301,
            524_120_011.944_884,
            531_584_029.590_048,
            770_432_594.235_289,
            1_516_834_358.75167,
        )

        for i, v in enumerate(zip(An, lez, rx, ry, xo, yo, J, Iw, E, G, expected)):
            Ani, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, expi = v

            with self.subTest(f"{i} f_oc point symmetric"):
                foc = S6.f_oc_point_symmetric(
                    A_n=Ani,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    E=Ei,
                    G=Gi,
                )["f_oc"]
                delta = expi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=foc, second=expi, delta=delta)

    def test_f_oc_unsymmetric(self):
        """
        Testing the f_oc_unsymmetric function against valuse calculated from
        Wolfram Alpha and MS Excel.
        """

        # the following tests are based on the coefficients r_o, a, b, c & d
        # being correct.

        # test solver

        # region

        with self.subTest("Test 1"):
            E = 200e9
            G = 80e9

            A_n = 0.01
            l_ex = 1
            l_ey = 1
            l_ez = 1
            r_x = 0.05
            r_y = 0.05
            x_o = 0.025
            y_o = 0.075
            J = 1
            I_w = 1

            f_oc = S6.f_oc_unsymmetric(
                A_n=A_n,
                l_ex=l_ex,
                l_ey=l_ey,
                l_ez=l_ez,
                r_x=r_x,
                r_y=r_y,
                x_o=x_o,
                y_o=y_o,
                J=J,
                I_w=I_w,
                E=E,
                G=G,
            )
            expected = 4_932_891_193.0  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(
                first=f_oc["f_oc"],
                second=expected,
                msg="f_oc was incorrectly calculated. "
                + "Expected was: "
                + str(expected)
                + " actual was: "
                + str(f_oc["f_oc"]),
                delta=delta_val,
            )

        with self.subTest("Test 2"):
            x_o = 0
            y_o = 0

            f_oc = S6.f_oc_unsymmetric(
                A_n=A_n,
                l_ex=l_ex,
                l_ey=l_ey,
                l_ez=l_ez,
                r_x=r_x,
                r_y=r_y,
                x_o=x_o,
                y_o=y_o,
                J=J,
                I_w=I_w,
                E=E,
                G=G,
            )
            expected = 4.9348e9  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(
                first=f_oc["f_oc"],
                second=expected,
                msg="f_oc was incorrectly calculated. "
                + "Expected was: "
                + str(expected)
                + " actual was: "
                + str(f_oc["f_oc"]),
                delta=delta_val,
            )

        with self.subTest("Test 3"):
            I_w = 0.1
            J = 0.1

            f_oc = S6.f_oc_unsymmetric(
                A_n=A_n,
                l_ex=l_ex,
                l_ey=l_ey,
                l_ez=l_ez,
                r_x=r_x,
                r_y=r_y,
                x_o=x_o,
                y_o=y_o,
                J=J,
                I_w=I_w,
                E=E,
                G=G,
            )
            expected = 4_934_802_200.0  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(
                first=f_oc["f_oc"],
                second=expected,
                msg="f_oc was incorrectly calculated. "
                + "Expected was: "
                + str(expected)
                + " actual was: "
                + str(f_oc["f_oc"]),
                delta=delta_val,
            )

        with self.subTest("Test 4 (200x13EA)"):
            A_n = 5090 / 1_000_000
            r_x = 78.3 / 1000
            r_y = 39.8 / 1000
            x_o = 0
            y_o = 0
            J = 3.04 * 1e-7
            I_w = 0

            f_oc = S6.f_oc_unsymmetric(
                A_n=A_n,
                l_ex=l_ex,
                l_ey=l_ey,
                l_ez=l_ez,
                r_x=r_x,
                r_y=r_y,
                x_o=x_o,
                y_o=y_o,
                J=J,
                I_w=I_w,
                E=E,
                G=G,
            )
            expected = 6.193_181_364_869_0e8  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(
                first=f_oc["f_oc"],
                second=expected,
                msg="f_oc was incorrectly calculated. "
                + "Expected was: "
                + str(expected)
                + " actual was: "
                + str(f_oc["f_oc"]),
                delta=delta_val,
            )

        with self.subTest("Test 5 (100x6EA)"):
            A_n = 1170 / 1_000_000
            r_x = 39.1 / 1000
            r_y = 19.8 / 1000
            x_o = 0
            y_o = 0
            J = 1.48 * 1e-8
            I_w = 0

            f_oc = S6.f_oc_unsymmetric(
                A_n=A_n,
                l_ex=l_ex,
                l_ey=l_ey,
                l_ez=l_ez,
                r_x=r_x,
                r_y=r_y,
                x_o=x_o,
                y_o=y_o,
                J=J,
                I_w=I_w,
                E=E,
                G=G,
            )

            expected = 5.268_322_940_187_0e8  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(
                first=f_oc["f_oc"],
                second=expected,
                msg="f_oc was incorrectly calculated. "
                + "Expected was: "
                + str(expected)
                + " actual was: "
                + str(f_oc["f_oc"]),
                delta=delta_val,
            )

        with self.subTest("Test 6 (50x3EA)"):
            A_n = 295 / 1_000_000
            r_x = 19.3 / 1000
            r_y = 9.90 / 1000
            x_o = 0
            y_o = 0
            J = 1.01 * 1e-9
            I_w = 0

            f_oc = S6.f_oc_unsymmetric(
                A_n=A_n,
                l_ex=l_ex,
                l_ey=l_ey,
                l_ez=l_ez,
                r_x=r_x,
                r_y=r_y,
                x_o=x_o,
                y_o=y_o,
                J=J,
                I_w=I_w,
                E=E,
                G=G,
            )
            expected = 1.934_639_854_701_5e8  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(
                first=f_oc["f_oc"],
                second=expected,
                msg="f_oc was incorrectly calculated. "
                + "Expected was: "
                + str(expected)
                + " actual was: "
                + str(f_oc["f_oc"]),
                delta=delta_val,
            )

        # test coefficients
        # following values calculated in excel. f_oc calculated by goal seek.

        An = (
            0.00189,
            0.00189,
            0.00189,
            0.00189,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        lez = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0411,
            0.0411,
            0.0411,
            0.0411,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0245,
            0.0245,
            0.0245,
            0.0245,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0,
            0,
            0,
            0,
            0,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
        )

        Iw = (
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
        )

        E = (
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
        )

        G = (
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
        )

        aexp = (
            2.289_460_000e-3,
            2.289_460_000e-3,
            2.289_460_000e-3,
            2.289_460_000e-3,
            2.796_250_000e-1,
            2.796_250_000e-1,
            2.796_250_000e-1,
            2.796_250_000e-1,
            2.796_250_000e-1,
            2.796_250_000e-1,
            2.075_210_000e-3,
            2.075_210_000e-3,
            2.075_210_000e-3,
            2.075_210_000e-3,
            2.075_210_000e-3,
            2.075_210_000e-3,
            4.333_730_000e-3,
            4.333_730_000e-3,
            4.333_730_000e-3,
            4.333_730_000e-3,
            4.333_730_000e-3,
            4.333_730_000e-3,
            1.073_813_000e-4,
            1.073_813_000e-4,
            1.073_813_000e-4,
            1.073_813_000e-4,
            1.073_813_000e-4,
            2.729_549_000e-2,
            2.729_549_000e-2,
            2.729_549_000e-2,
            2.729_549_000e-2,
            2.729_549_000e-2,
            2.574_805_000e-2,
            2.574_805_000e-2,
            2.574_805_000e-2,
            2.574_805_000e-2,
            2.574_805_000e-2,
            6.446_116_000e-2,
            6.446_116_000e-2,
            6.446_116_000e-2,
            6.446_116_000e-2,
            6.446_116_000e-2,
            1.804_610_000e-3,
            1.804_610_000e-3,
            1.804_610_000e-3,
            1.804_610_000e-3,
            1.804_610_000e-3,
            6.927_132_244e-2,
            6.927_132_244e-2,
            6.927_132_244e-2,
            6.927_132_244e-2,
            1.869_582_801e-2,
            1.869_582_801e-2,
            1.869_582_801e-2,
            1.869_582_801e-2,
        )

        bexp = (
            1.604_735_508e6,
            1.987_196_001e6,
            1.422_593_178e7,
            5.247_198_108e7,
            5.600_456_202e7,
            1.328_265_382e8,
            4.401_144_431e8,
            1.669_266_062e9,
            6.585_872_540e9,
            1.639_172_798e11,
            1.033_217_521e6,
            1.096_972_646e6,
            1.351_993_150e6,
            9.512_649_261e6,
            3.501_469_961e7,
            8.510_803_107e8,
            2.641_785_527e6,
            2.919_830_281e6,
            4.032_009_297e6,
            3.962_173_779e7,
            1.508_396_393e8,
            3.709_812_489e9,
            2.883_394_959e5,
            2.890_223_191e5,
            3.108_726_636e5,
            3.791_549_903e5,
            2.564_189_442e6,
            1.947_195_066e7,
            2.290_772_294e7,
            3.665_081_210e7,
            9.162_316_871e7,
            1.850_738_580e9,
            8.325_698_680e6,
            1.718_899_671e7,
            5.264_218_884e7,
            1.187_144_337e9,
            4.732_463_550e9,
            1.319_233_997e7,
            2.936_935_989e7,
            9.407_743_955e7,
            3.529_097_582e8,
            8.635_543_955e9,
            9.009_847_523e5,
            1.016_140_601e6,
            4.701_127_753e6,
            1.621_671_260e7,
            3.847_154_278e8,
            4.885_135_982e7,
            1.753_678_828e8,
            4.223_896_617e9,
            1.687_554_891e10,
            1.649_902_835e7,
            3.673_908_661e7,
            6.844_209_508e8,
            2.708_426_776e9,
        )

        cexp = (
            6.875_008_417e13,
            2.988_811_935e14,
            2.657_671_530e16,
            3.451_154_294e17,
            2.851_784_526e15,
            1.416_982_762e16,
            1.008_823_427e17,
            1.110_777_886e18,
            1.575_908_779e19,
            9.446_758_189e21,
            1.038_784_066e13,
            4.184_597_322e13,
            1.720_976_623e14,
            8.073_457_104e15,
            7.943_152_275e16,
            3.969_594_353e19,
            5.483_832_395e13,
            2.232_284_709e14,
            9.549_166_844e14,
            7.347_515_789e16,
            9.139_286_414e17,
            5.188_706_239e20,
            6.107_678_425e11,
            2.444_026_260e12,
            6.186_456_880e13,
            2.570_071_788e14,
            1.406_430_235e16,
            6.311_561_230e14,
            2.692_799_765e15,
            1.346_200_343e16,
            9.690_088_371e16,
            3.686_481_807e19,
            6.215_752_118e14,
            2.777_999_539e15,
            1.577_917_722e16,
            4.128_222_685e18,
            6.318_468_142e19,
            6.564_212_777e14,
            3.059_128_507e15,
            1.917_160_836e16,
            1.876_479_428e17,
            9.346_040_604e19,
            1.828_933_477e13,
            7.507_089_430e13,
            3.407_616_517e15,
            3.276_601_806e16,
            1.612_759_204e19,
            8.271_059_853e15,
            6.040_281_745e16,
            2.336_493_286e19,
            3.666_455_118e20,
            3.763_825_828e15,
            1.815_737_154e16,
            2.935_588_873e18,
            4.276_303_779e19,
        )

        dexp = (
            5.931_084_103e20,
            9.945_259_657e21,
            1.532_628_913e25,
            7.007_457_185e26,
            1.158_548_121e22,
            2.113_780_950e23,
            5.046_714_833e24,
            1.872_860_174e26,
            9.815_045_404e27,
            1.425_037_859e32,
            1.197_211_545e19,
            1.915_538_472e20,
            3.064_861_556e21,
            1.915_538_472e24,
            3.064_861_556e25,
            1.915_538_472e28,
            1.899_484_591e20,
            3.039_175_345e21,
            4.862_680_553e22,
            3.039_175_345e25,
            4.862_680_553e26,
            3.039_175_345e29,
            2.135_033_945e17,
            3.416_054_312e18,
            2.135_033_945e21,
            3.416_054_312e22,
            2.135_033_945e25,
            4.350_721_238e21,
            7.215_653_603e22,
            1.317_384_334e24,
            3.150_245_385e25,
            2.281_751_237e29,
            2.663_697_411e21,
            4.509_346_764e22,
            8.798_512_621e23,
            3.717_022_637e27,
            2.178_281_421e29,
            1.872_581_290e21,
            3.292_566_561e22,
            7.165_300_076e23,
            2.360_651_903e25,
            2.575_948_525e29,
            4.849_954_296e19,
            7.834_578_463e20,
            6.389_643_337e23,
            1.768_858_832e25,
            1.603_585_474e29,
            1.739_277_702e23,
            3.598_287_567e24,
            1.855_779_461e28,
            1.112_367_958e30,
            1.267_251_486e23,
            2.056_477_558e24,
            1.862_802_083e27,
            5.868_001_378e28,
        )

        focexp = (
            1.184_846_008e7,
            4.739_384_033e7,
            1.184_846_008e9,
            4.739_384_033e9,
            4.441_321_980e6,
            1.776_528_792e7,
            7.106_115_169e7,
            2.842_446_068e8,
            1.136_978_427e9,
            2.842_446_068e10,
            1.327_264_400e6,
            5.309_057_599e6,
            2.123_623_040e7,
            4.876_450_152e8,
            4.876_450_152e8,
            4.876_450_152e8,
            4.382_301_746e6,
            1.752_920_698e7,
            7.011_682_794e7,
            5.882_009_130e8,
            5.882_009_130e8,
            5.882_009_130e8,
            4.416_233_446e5,
            1.766_493_378e6,
            4.416_233_446e7,
            1.766_493_378e8,
            2.683_073_199e9,
            9.838_132_700e6,
            3.935_253_080e7,
            1.574_101_232e8,
            6.296_404_928e8,
            1.392_468_563e10,
            4.559_989_573e6,
            1.823_322_128e7,
            7.282_205_967e7,
            1.711_177_935e9,
            6.500_657_993e9,
            3.035_100_745e6,
            1.214_040_298e7,
            4.856_161_193e7,
            1.942_464_477e8,
            4.856_161_193e9,
            3.132_003_516e6,
            1.250_631_607e7,
            2.918_645_540e8,
            9.024_135_560e8,
            1.481_487_541e10,
            2.443_191_076e7,
            7.571_964_668e7,
            9.573_420_497e8,
            3.632_020_679e9,
            4.054_397_676e7,
            1.619_583_437e8,
            7.698_206_587e8,
            1.516_310_486e9,
        )

        for i, v in enumerate(
            zip(
                An,
                lex,
                ley,
                lez,
                rx,
                ry,
                xo,
                yo,
                J,
                Iw,
                E,
                G,
                aexp,
                bexp,
                cexp,
                dexp,
                focexp,
            )
        ):
            Ani, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, aexpi, bexpi, cexpi, dexpi, focexpi = (
                v
            )

            with self.subTest(f"{i}"):
                f_oc = S6.f_oc_unsymmetric(
                    A_n=Ani,
                    l_ex=lexi,
                    l_ey=leyi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    E=Ei,
                    G=Gi,
                )

                delta_a = aexpi / Test_UT_S6.delta_p
                delta_b = bexpi / Test_UT_S6.delta_p
                delta_c = cexpi / Test_UT_S6.delta_p
                delta_d = dexpi / Test_UT_S6.delta_p
                delta_foc = focexpi / Test_UT_S6.delta_p

                self.assertAlmostEqual(
                    first=f_oc["Intermediate"]["a"], second=aexpi, delta=delta_a
                )
                self.assertAlmostEqual(
                    first=f_oc["Intermediate"]["b"], second=bexpi, delta=delta_b
                )
                self.assertAlmostEqual(
                    first=f_oc["Intermediate"]["c"], second=cexpi, delta=delta_c
                )
                self.assertAlmostEqual(
                    first=f_oc["Intermediate"]["d"], second=dexpi, delta=delta_d
                )
                self.assertAlmostEqual(
                    first=f_oc["f_oc"], second=focexpi, delta=delta_foc
                )

    def test_s6_3_3_N_c_torsion(self):
        """
        Test the s6_3_3_N_c_Torsion method against values calculated in Excel.
        """

        # test double symmetry
        # region

        An = (
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.00189,
            0.00189,
            0.00189,
            0.00189,
        )

        kf = (
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
        )

        lex = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10, 5, 1, 0.5)

        ley = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10, 5, 1, 0.5)

        lez = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10, 5, 1, 0.5)

        rx = (
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0411,
            0.0411,
            0.0411,
            0.0411,
        )

        ry = (
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0245,
            0.0245,
            0.0245,
            0.0245,
        )

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        J = (
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            2.200_000_0e-5,
            5.750_000_0e-6,
            5.750_000_0e-6,
            5.750_000_0e-6,
            5.750_000_0e-6,
            5.750_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            1.560_000_0e-6,
            3.490_000_0e-8,
            3.490_000_0e-8,
            3.490_000_0e-8,
            3.490_000_0e-8,
        )

        Iw = (
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            2.800_000_0e-4,
            4.600_000_0e-6,
            4.600_000_0e-6,
            4.600_000_0e-6,
            4.600_000_0e-6,
            4.600_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            3.450_000_0e-6,
            2.300_000_0e-9,
            2.300_000_0e-9,
            2.300_000_0e-9,
            2.300_000_0e-9,
        )

        fy = (
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
        )

        E = (
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
        )

        G = (
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
        )

        Axis = (
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
        )

        Ncexp = (
            2.955_199_2e6,
            4.683_790_5e6,
            6.305_155_6e6,
            8.889_923_6e6,
            1.065_261_6e7,
            1.149_462_4e7,
            4.459_966_5e5,
            1.783_986_6e6,
            4.393_361_6e6,
            5.418_653_8e6,
            5.923_733_8e6,
            8.667_035_2e5,
            1.542_729_6e6,
            1.933_264_3e6,
            2.668_463_4e6,
            3.555_092_9e6,
            4.697_791_2e4,
            1.879_116_5e5,
            4.750_095_3e5,
            5.000_549_7e5,
        )

        for i, v in enumerate(
            zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw, fy, E, G, Axis, Ncexp)
        ):
            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, Gi, Axi, Ncexpi = (
                v
            )

            with self.subTest(f"{i} N_c_torsion, double symmetry"):
                Nc = S6.s6_3_3_N_c_torsion(
                    A_n=Ani,
                    k_f=kfi,
                    l_ex=lexi,
                    l_ey=leyi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    f_y=fyi,
                    E=Ei,
                    G=Gi,
                    sym=Symmetry(Axi),
                )["N_cz"]

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

        # test single symmetry
        # region

        An = (
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        kf = (
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        lex = (
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        lez = (
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            8.890_000_0e-8,
            5.150_000_0e-10,
            5.150_000_0e-10,
            5.150_000_0e-10,
            5.150_000_0e-10,
            5.150_000_0e-10,
            4.720_000_0e-7,
            4.720_000_0e-7,
            4.720_000_0e-7,
            4.720_000_0e-7,
            4.720_000_0e-7,
            8.130_000_0e-9,
            8.130_000_0e-9,
            8.130_000_0e-9,
            8.130_000_0e-9,
            8.130_000_0e-9,
            9.183_880_1e-7,
            9.183_880_1e-7,
            9.183_880_1e-7,
            9.183_880_1e-7,
            1.584_755_6e-6,
            1.584_755_6e-6,
            1.584_755_6e-6,
            1.584_755_6e-6,
        )

        Iw = (
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            0.000_000_0e0,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.510_000_0e-7,
            1.060_000_0e-10,
            1.060_000_0e-10,
            1.060_000_0e-10,
            1.060_000_0e-10,
            1.060_000_0e-10,
            4.029_090_7e-7,
            4.029_090_7e-7,
            4.029_090_7e-7,
            4.029_090_7e-7,
            3.063_442_4e-8,
            3.063_442_4e-8,
            3.063_442_4e-8,
            3.063_442_4e-8,
        )

        fy = (
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            2.800_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.200_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
            3.000_000_0e8,
        )

        E = (
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
            2.000_000_0e11,
        )

        G = (
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
            8.000_000_0e10,
        )

        Axis = (
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["y"],
            ["y"],
            ["y"],
            ["y"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
        )

        Ncexp = (
            3.387_928_1e4,
            1.355_171_2e5,
            4.443_595_3e5,
            5.789_588_8e5,
            5.789_588_8e5,
            5.789_588_8e5,
            1.788_735_6e2,
            7.154_942_2e2,
            1.750_876_7e4,
            3.185_976_7e4,
            3.700_202_0e4,
            5.062_446_2e5,
            9.374_124_2e5,
            1.080_888_0e6,
            1.570_160_3e6,
            1.644_385_7e6,
            9.897_325_2e3,
            3.771_960_6e4,
            1.598_315_5e5,
            1.799_224_8e5,
            2.032_971_0e5,
            2.008_178_5e5,
            6.233_479_9e5,
            2.460_658_5e6,
            2.709_803_1e6,
            2.203_686_1e6,
            2.606_442_2e6,
            2.816_155_5e6,
            3.051_553_1e6,
        )

        for i, v in enumerate(
            zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw, fy, E, G, Axis, Ncexp)
        ):
            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, Gi, Axi, Ncexpi = (
                v
            )

            with self.subTest(f"{i} N_c_torsion, single symmetry"):
                Nc = S6.s6_3_3_N_c_torsion(
                    A_n=Ani,
                    k_f=kfi,
                    l_ex=lexi,
                    l_ey=leyi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    f_y=fyi,
                    E=Ei,
                    G=Gi,
                    sym=Symmetry(Axi),
                )["N_cz"]

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

        # test point symmetry
        # region

        An = (
            0.00189,
            0.00189,
            0.00189,
            0.00189,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        lez = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0411,
            0.0411,
            0.0411,
            0.0411,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0245,
            0.0245,
            0.0245,
            0.0245,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0,
            0,
            0,
            0,
            0,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
        )

        Iw = (
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
        )

        fy = (
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
        )

        E = (
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
        )

        G = (
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
        )

        Axis = (
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
            ["point"],
        )

        Ncexp = (
            419_106.155_746_496,
            423_045.512_255_854,
            475_009.533_425_687,
            500_054.974_957_511,
            4_119_875.923_039_97,
            4_683_790.478_014_97,
            6_305_155.642_714_61,
            8_889_923.629_036_2,
            10_652_615.705_617_5,
            11_494_624.348_339_3,
            578_958.884_095_936,
            578_958.884_095_936,
            578_958.884_095_936,
            578_958.884_095_936,
            578_958.884_095_936,
            578_958.884_095_936,
            37002.019_768_243_3,
            37002.019_768_243_3,
            37002.019_768_243_3,
            37002.019_768_243_3,
            37002.019_768_243_3,
            5_027_703.565_267_41,
            5_058_371.868_827_53,
            5_163_478.914_596_12,
            5_418_653.755_326_58,
            5_923_733.788_839_68,
            964_432.579_707_819,
            994_031.743_422_623,
            1_091_690.508_416_4,
            1_570_720.193_292_56,
            1_644_531.831_067_96,
            1_417_976.883_016_73,
            1_542_729.591_895_77,
            1_933_264.339_018_83,
            2_668_463.372_097_56,
            3_555_092.885_703,
            155_110.114_279_886,
            155_523.464_847_291,
            165_908.779_342_738,
            181_437.173_491_866,
            203_362.838_693_571,
            876_230.281_613_051,
            1_130_467.777_494_14,
            2_512_488.847_521_47,
            2_723_741.764_911_02,
            2_608_784.571_759_65,
            2_617_574.955_386_2,
            2_816_451.117_729_63,
            3_051_632.208_376_09,
        )

        for i, v in enumerate(
            zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw, fy, E, G, Axis, Ncexp)
        ):

            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, Gi, Axi, Ncexpi = (
                v
            )

            with self.subTest(f"{i} N_c_torsion Point Symmetry"):

                Nc = S6.s6_3_3_N_c_torsion(
                    A_n=Ani,
                    k_f=kfi,
                    l_ex=lexi,
                    l_ey=leyi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    f_y=fyi,
                    E=Ei,
                    G=Gi,
                    sym=Symmetry(Axi),
                )["N_cz"]

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

        # test no symmetry
        # region

        An = (
            0.00189,
            0.00189,
            0.00189,
            0.00189,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.0579,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00117,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.00279,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.000_143,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.0251,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.00703,
            0.016,
            0.016,
            0.016,
            0.016,
            0.016,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.000_754,
            0.011,
            0.011,
            0.011,
            0.011,
            0.013,
            0.013,
            0.013,
            0.013,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        lex = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        ley = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        lez = (
            10,
            5,
            1,
            0.5,
            80,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            20,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            0.1,
            40,
            20,
            10,
            5,
            1,
            20,
            10,
            5,
            1,
            0.5,
            40,
            20,
            10,
            5,
            1,
            10,
            5,
            1,
            0.5,
            0.1,
            10,
            5,
            1,
            0.5,
            10,
            5,
            1,
            0.5,
        )

        rx = (
            0.0411,
            0.0411,
            0.0411,
            0.0411,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.515,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0425,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.0587,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.00922,
            0.139,
            0.139,
            0.139,
            0.139,
            0.139,
            0.147,
            0.147,
            0.147,
            0.147,
            0.147,
            0.249,
            0.249,
            0.249,
            0.249,
            0.249,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.0301,
            0.21,
            0.21,
            0.21,
            0.21,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
            0.127_100_303_6,
        )

        ry = (
            0.0245,
            0.0245,
            0.0245,
            0.0245,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.12,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0164,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.0298,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.00473,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0893,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0304,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0496,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.0126,
            0.036_979,
            0.036_979,
            0.036_979,
            0.036_979,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
            0.045_328_083_000_3,
        )

        xo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0.0567,
            0,
            0,
            0,
            0,
            0,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0.0272,
            0,
            0,
            0,
            0,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
            0.022_061_408_061_9,
        )

        yo = (
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0.154_285_047_87,
            0,
            0,
            0,
            0,
        )

        J = (
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_000_034_9,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_022,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_014_8,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_088_9,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_000_000_515,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_005_75,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_000_472,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_001_56,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_008_13,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_000_918_388_007_92,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
            0.000_001_584_755_618_8,
        )

        Iw = (
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.000_000_002_3,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0.00028,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_004_6,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_000_151,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_003_45,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_000_106,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            0.000_000_402_909_074_37,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
            3.063_442_393_88e-08,
        )

        fy = (
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            280_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            320_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
            300_000_000,
        )

        E = (
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
            200_000_000_000,
        )

        G = (
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
            80_000_000_000,
        )

        Axis = (
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
            [],
        )

        Ncexp = (
            1.669_330_134e4,
            6.677_320_534e4,
            4.591_320_923e5,
            4.997_553_404e5,
            1.604_481_818e5,
            6.417_927_271e5,
            2.567_170_908e6,
            7.636_973_676e6,
            1.040_437_645e7,
            1.148_657_049e7,
            9.538_696_667e2,
            3.815_478_667e3,
            1.526_191_467e4,
            1.992_503_406e5,
            1.992_503_406e5,
            1.992_503_406e5,
            8.731_533_193e3,
            3.492_613_277e4,
            1.397_045_311e5,
            5.789_588_841e5,
            5.789_588_841e5,
            5.789_588_841e5,
            4.707_676_148e1,
            1.883_070_459e2,
            4.707_676_148e3,
            1.822_306_529e4,
            3.700_201_977e4,
            1.840_792_841e5,
            7.363_171_365e5,
            2.837_345_351e6,
            4.959_250_649e6,
            5.923_733_789e6,
            2.389_668_692e4,
            9.555_144_229e4,
            3.816_249_868e5,
            1.562_386_903e6,
            1.643_246_839e6,
            3.439_024_093e4,
            1.375_609_637e5,
            5.502_438_549e5,
            1.978_786_886e6,
            3.531_341_223e6,
            1.760_403_024e3,
            7.029_416_318e3,
            1.296_114_307e5,
            1.768_000_222e5,
            2.032_422_271e5,
            2.003_404_466e5,
            6.208_973_168e5,
            2.460_201_882e6,
            2.709_683_520e6,
            3.929_055_972e5,
            1.526_786_241e6,
            2.816_086_259e6,
            3.051_544_932e6,
        )

        for i, v in enumerate(
            zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw, fy, E, G, Axis, Ncexp)
        ):

            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, Gi, Axi, Ncexpi = (
                v
            )

            with self.subTest(f"{i} N_c_torsion, No symmetry"):
                Nc = S6.s6_3_3_N_c_torsion(
                    A_n=Ani,
                    k_f=kfi,
                    l_ex=lexi,
                    l_ey=leyi,
                    l_ez=lezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    f_y=fyi,
                    E=Ei,
                    G=Gi,
                    sym=Symmetry(Axi),
                )["N_cz"]

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

    # end member torsion capacity methods - AS4600
    # endregion

    # member capacity methods
    # region

    def test_s6_1_1_Nc(self):
        """
        Test the s6_1_1_Nc method against values calculated in MS Excel.
        """

        An = (
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            1.890_000_000e-3,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            5.790_000_000e-2,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            1.170_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            2.790_000_000e-3,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            1.430_000_000e-4,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            2.510_000_000e-2,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            7.030_000_000e-3,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            1.600_000_000e-2,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            7.540_000_000e-4,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.100_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
            1.300_000_000e-2,
        )

        kf = (
            1,
            1,
            1,
            1,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.837,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.824,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            0.958,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            0.95,
            0.95,
            0.95,
            0.95,
            0.95,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
            1,
        )

        l = (
            10,
            10,
            10,
            10,
            80,
            80,
            80,
            80,
            80,
            80,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            20,
            10,
            10,
            10,
            10,
            10,
            40,
            40,
            40,
            40,
            40,
            20,
            20,
            20,
            20,
            20,
            40,
            40,
            40,
            40,
            40,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
            10,
        )

        kex = (
            1,
            0.5,
            0.1,
            0.05,
            1,
            0.5,
            0.25,
            0.125,
            0.0625,
            0.0125,
            1,
            0.5,
            0.25,
            0.05,
            0.025,
            0.005,
            1,
            0.5,
            0.25,
            0.05,
            0.025,
            0.005,
            1,
            0.5,
            0.1,
            0.05,
            0.01,
            1,
            0.5,
            0.25,
            0.125,
            0.025,
            1,
            0.5,
            0.25,
            0.05,
            0.025,
            1,
            0.5,
            0.25,
            0.125,
            0.025,
            1,
            0.5,
            0.1,
            0.05,
            0.01,
            1,
            0.5,
            0.1,
            0.05,
            1,
            0.5,
            0.1,
            0.05,
        )

        key = (
            1,
            0.5,
            0.1,
            0.05,
            1,
            0.5,
            0.25,
            0.125,
            0.0625,
            0.0125,
            1,
            0.5,
            0.25,
            0.05,
            0.025,
            0.005,
            1,
            0.5,
            0.25,
            0.05,
            0.025,
            0.005,
            1,
            0.5,
            0.1,
            0.05,
            0.01,
            1,
            0.5,
            0.25,
            0.125,
            0.025,
            1,
            0.5,
            0.25,
            0.05,
            0.025,
            1,
            0.5,
            0.25,
            0.125,
            0.025,
            1,
            0.5,
            0.1,
            0.05,
            0.01,
            1,
            0.5,
            0.1,
            0.05,
            1,
            0.5,
            0.1,
            0.05,
        )

        kez = (
            1.000_000_000e0,
            5.000_000_000e-1,
            1.000_000_000e-1,
            5.000_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            2.500_000_000e-1,
            1.250_000_000e-1,
            6.250_000_000e-2,
            1.250_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            2.500_000_000e-1,
            5.000_000_000e-2,
            2.500_000_000e-2,
            5.000_000_000e-3,
            1.000_000_000e0,
            5.000_000_000e-1,
            2.500_000_000e-1,
            5.000_000_000e-2,
            2.500_000_000e-2,
            5.000_000_000e-3,
            1.000_000_000e0,
            5.000_000_000e-1,
            1.000_000_000e-1,
            5.000_000_000e-2,
            1.000_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            2.500_000_000e-1,
            1.250_000_000e-1,
            2.500_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            2.500_000_000e-1,
            5.000_000_000e-2,
            2.500_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            2.500_000_000e-1,
            1.250_000_000e-1,
            2.500_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            1.000_000_000e-1,
            5.000_000_000e-2,
            1.000_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            1.000_000_000e-1,
            5.000_000_000e-2,
            1.000_000_000e0,
            5.000_000_000e-1,
            1.000_000_000e-1,
            5.000_000_000e-2,
        )

        rx = (
            4.110_000_000e-2,
            4.110_000_000e-2,
            4.110_000_000e-2,
            4.110_000_000e-2,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            5.150_000_000e-1,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            4.250_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            5.870_000_000e-2,
            9.220_000_000e-3,
            9.220_000_000e-3,
            9.220_000_000e-3,
            9.220_000_000e-3,
            9.220_000_000e-3,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.390_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            1.470_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            2.490_000_000e-1,
            3.010_000_000e-2,
            3.010_000_000e-2,
            3.010_000_000e-2,
            3.010_000_000e-2,
            3.010_000_000e-2,
            2.100_000_000e-1,
            2.100_000_000e-1,
            2.100_000_000e-1,
            2.100_000_000e-1,
            1.271_003_036e-1,
            1.271_003_036e-1,
            1.271_003_036e-1,
            1.271_003_036e-1,
        )

        ry = (
            2.450_000_000e-2,
            2.450_000_000e-2,
            2.450_000_000e-2,
            2.450_000_000e-2,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.200_000_000e-1,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            1.640_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            2.980_000_000e-2,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            4.730_000_000e-3,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            8.930_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            3.040_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            4.960_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            1.260_000_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            3.697_900_000e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
            4.532_808_300e-2,
        )

        xo = (
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            5.670_000_000e-2,
            5.670_000_000e-2,
            5.670_000_000e-2,
            5.670_000_000e-2,
            5.670_000_000e-2,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            2.720_000_000e-2,
            2.720_000_000e-2,
            2.720_000_000e-2,
            2.720_000_000e-2,
            2.720_000_000e-2,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            2.206_140_806e-2,
            2.206_140_806e-2,
            2.206_140_806e-2,
            2.206_140_806e-2,
        )

        yo = (
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            1.542_850_479e-1,
            1.542_850_479e-1,
            1.542_850_479e-1,
            1.542_850_479e-1,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
            0.000_000_000e0,
        )

        J = (
            3.490_000_000e-8,
            3.490_000_000e-8,
            3.490_000_000e-8,
            3.490_000_000e-8,
            2.200_000_000e-5,
            2.200_000_000e-5,
            2.200_000_000e-5,
            2.200_000_000e-5,
            2.200_000_000e-5,
            2.200_000_000e-5,
            1.480_000_000e-8,
            1.480_000_000e-8,
            1.480_000_000e-8,
            1.480_000_000e-8,
            1.480_000_000e-8,
            1.480_000_000e-8,
            8.890_000_000e-8,
            8.890_000_000e-8,
            8.890_000_000e-8,
            8.890_000_000e-8,
            8.890_000_000e-8,
            8.890_000_000e-8,
            5.150_000_000e-10,
            5.150_000_000e-10,
            5.150_000_000e-10,
            5.150_000_000e-10,
            5.150_000_000e-10,
            5.750_000_000e-6,
            5.750_000_000e-6,
            5.750_000_000e-6,
            5.750_000_000e-6,
            5.750_000_000e-6,
            4.720_000_000e-7,
            4.720_000_000e-7,
            4.720_000_000e-7,
            4.720_000_000e-7,
            4.720_000_000e-7,
            1.560_000_000e-6,
            1.560_000_000e-6,
            1.560_000_000e-6,
            1.560_000_000e-6,
            1.560_000_000e-6,
            8.130_000_000e-9,
            8.130_000_000e-9,
            8.130_000_000e-9,
            8.130_000_000e-9,
            8.130_000_000e-9,
            9.183_880_079e-7,
            9.183_880_079e-7,
            9.183_880_079e-7,
            9.183_880_079e-7,
            1.584_755_619e-6,
            1.584_755_619e-6,
            1.584_755_619e-6,
            1.584_755_619e-6,
        )

        Iw = (
            2.300e-9,
            2.300e-9,
            2.300e-9,
            2.300e-9,
            2.800e-4,
            2.800e-4,
            2.800e-4,
            2.800e-4,
            2.800e-4,
            2.800e-4,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            0.000e0,
            4.600e-6,
            4.600e-6,
            4.600e-6,
            4.600e-6,
            4.600e-6,
            1.510e-7,
            1.510e-7,
            1.510e-7,
            1.510e-7,
            1.510e-7,
            3.450e-6,
            3.450e-6,
            3.450e-6,
            3.450e-6,
            3.450e-6,
            1.060e-10,
            1.060e-10,
            1.060e-10,
            1.060e-10,
            1.060e-10,
            4.029e-7,
            4.029e-7,
            4.029e-7,
            4.029e-7,
            3.063e-8,
            3.063e-8,
            3.063e-8,
            3.063e-8,
        )

        fy = (
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            2.800e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.200e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
            3.000e8,
        )

        E = (
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
            2.000e11,
        )

        G = (
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
            8.000e10,
        )

        fref = (
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
            250_000_000,
        )

        αb = (
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0,
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0,
            0,
            0,
            0,
            0,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
            0.5,
        )

        Axis = (
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            [],
            [],
            [],
            [],
            [],
            [],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x", "y"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
            ["y"],
            ["y"],
            ["y"],
            ["y"],
            ["x"],
            ["x"],
            ["x"],
            ["x"],
        )

        calc_buckle = (
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
        )

        calc_torsion = (
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
            True,
        )

        φNs = (
            5.443_200_000e5,
            5.443_200_000e5,
            5.443_200_000e5,
            5.443_200_000e5,
            1.221_249_960e7,
            1.221_249_960e7,
            1.221_249_960e7,
            1.221_249_960e7,
            1.221_249_960e7,
            1.221_249_960e7,
            2.776_550_400e5,
            2.776_550_400e5,
            2.776_550_400e5,
            2.776_550_400e5,
            2.776_550_400e5,
            2.776_550_400e5,
            7.697_721_600e5,
            7.697_721_600e5,
            7.697_721_600e5,
            7.697_721_600e5,
            7.697_721_600e5,
            7.697_721_600e5,
            4.118_400_000e4,
            4.118_400_000e4,
            4.118_400_000e4,
            4.118_400_000e4,
            4.118_400_000e4,
            6.325_200_000e6,
            6.325_200_000e6,
            6.325_200_000e6,
            6.325_200_000e6,
            6.325_200_000e6,
            1.771_560_000e6,
            1.771_560_000e6,
            1.771_560_000e6,
            1.771_560_000e6,
            1.771_560_000e6,
            3.830_400_000e6,
            3.830_400_000e6,
            3.830_400_000e6,
            3.830_400_000e6,
            3.830_400_000e6,
            2.171_520_000e5,
            2.171_520_000e5,
            2.171_520_000e5,
            2.171_520_000e5,
            2.171_520_000e5,
            2.970_000_000e6,
            2.970_000_000e6,
            2.970_000_000e6,
            2.970_000_000e6,
            3.510_000_000e6,
            3.510_000_000e6,
            3.510_000_000e6,
            3.510_000_000e6,
        )

        φNcx = (
            5.284_616_142e4,
            1.844_614_689e5,
            5.183_009_481e5,
            5.438_414_112e5,
            3.320_281_794e6,
            7.874_909_207e6,
            1.071_608_061e7,
            1.188_721_670e7,
            1.221_249_960e7,
            1.221_249_960e7,
            9.048_604_737e3,
            3.335_589_845e4,
            1.051_817_775e5,
            2.628_108_684e5,
            2.776_550_400e5,
            2.776_550_400e5,
            4.031_745_663e4,
            1.434_418_660e5,
            3.998_646_917e5,
            7.490_212_041e5,
            7.697_721_600e5,
            7.697_721_600e5,
            2.166_069_395e2,
            8.450_598_658e2,
            1.526_094_137e4,
            3.037_026_584e4,
            4.118_400_000e4,
            5.067_489_518e5,
            1.809_137_453e6,
            4.474_599_988e6,
            5.772_627_672e6,
            6.325_200_000e6,
            5.161_027_046e5,
            1.180_893_306e6,
            1.569_555_702e6,
            1.771_560_000e6,
            1.771_560_000e6,
            9.460_669_662e5,
            2.530_525_993e6,
            3.443_195_209e6,
            3.737_720_618e6,
            3.830_400_000e6,
            1.145_553_406e4,
            4.072_939_838e4,
            1.905_596_218e5,
            2.113_754_361e5,
            2.171_520_000e5,
            2.361_190_008e6,
            2.782_608_512e6,
            2.970_000_000e6,
            2.970_000_000e6,
            2.004_949_755e6,
            2.974_934_641e6,
            3.510_000_000e6,
            3.510_000_000e6,
        )

        φNcy = (
            1.955_008_852e4,
            7.354_648_092e4,
            4.780_721_554e5,
            5.267_338_221e5,
            2.269_951_258e5,
            8.593_276_372e5,
            2.961_841_496e6,
            7.422_166_541e6,
            1.053_573_536e7,
            1.221_249_960e7,
            1.402_477_685e3,
            5.474_761_829e3,
            2.067_912_255e4,
            2.024_594_252e5,
            2.527_614_723e5,
            2.776_550_400e5,
            1.086_232_506e4,
            4.150_049_053e4,
            1.472_501_899e5,
            6.772_577_010e5,
            7.501_178_236e5,
            7.697_721_600e5,
            5.765_263_862e1,
            2.278_897_465e2,
            5.040_049_825e3,
            1.582_803_866e4,
            3.903_288_554e4,
            2.158_976_733e5,
            8.138_468_332e5,
            2.711_114_876e6,
            5.141_151_112e6,
            6.325_200_000e6,
            2.840_240_111e4,
            1.080_799_823e5,
            3.787_128_805e5,
            1.580_577_668e6,
            1.736_733_133e6,
            4.346_354_761e4,
            1.685_178_865e5,
            6.281_687_830e5,
            1.971_669_178e6,
            3.736_634_899e6,
            2.114_193_416e3,
            8.155_833_788e3,
            1.189_753_561e5,
            1.818_546_532e5,
            2.171_520_000e5,
            2.453_097_862e5,
            8.274_318_985e5,
            2.729_354_440e6,
            2.950_320_216e6,
            4.215_946_567e5,
            1.329_475_238e6,
            3.322_303_429e6,
            3.510_000_000e6,
        )

        φNcz = (
            4.228_012_061e4,
            1.691_204_824e5,
            4.275_085_801e5,
            4.500_494_775e5,
            2.659_679_313e6,
            4.215_411_430e6,
            5.674_640_078e6,
            8.000_931_266e6,
            9.587_354_135e6,
            1.034_516_191e7,
            8.584_827_001e2,
            3.433_930_800e3,
            1.373_572_320e4,
            1.793_253_065e5,
            1.793_253_065e5,
            1.793_253_065e5,
            3.049_135_281e4,
            1.219_654_112e5,
            3.999_235_785e5,
            5.210_629_957e5,
            5.210_629_957e5,
            5.210_629_957e5,
            1.609_862_000e2,
            6.439_447_999e2,
            1.575_789_065e4,
            2.867_379_056e4,
            3.330_181_779e4,
            4.013_969_876e5,
            1.605_587_951e6,
            3.954_025_453e6,
            4.876_788_380e6,
            5.331_360_410e6,
            4.556_201_536e5,
            8.436_711_752e5,
            9.727_991_554e5,
            1.413_144_227e6,
            1.479_947_157e6,
            7.800_331_666e5,
            1.388_456_633e6,
            1.739_937_905e6,
            2.401_617_035e6,
            3.199_583_597e6,
            8.907_592_684e3,
            3.394_764_573e4,
            1.438_483_979e5,
            1.619_302_357e5,
            1.829_673_872e5,
            1.807_360_629e5,
            5.610_131_898e5,
            2.214_592_642e6,
            2.438_822_747e6,
            1.983_317_484e6,
            2.345_797_946e6,
            2.534_539_918e6,
            2.746_397_779e6,
        )

        φNc = (
            1.955_008_852e4,
            7.354_648_092e4,
            4.275_085_801e5,
            4.500_494_775e5,
            2.269_951_258e5,
            8.593_276_372e5,
            2.961_841_496e6,
            7.422_166_541e6,
            9.587_354_135e6,
            1.034_516_191e7,
            8.584_827_001e2,
            3.433_930_800e3,
            1.373_572_320e4,
            1.793_253_065e5,
            1.793_253_065e5,
            1.793_253_065e5,
            1.086_232_506e4,
            4.150_049_053e4,
            1.472_501_899e5,
            5.210_629_957e5,
            5.210_629_957e5,
            5.210_629_957e5,
            5.765_263_862e1,
            2.278_897_465e2,
            5.040_049_825e3,
            1.582_803_866e4,
            3.330_181_779e4,
            2.158_976_733e5,
            8.138_468_332e5,
            2.711_114_876e6,
            4.876_788_380e6,
            5.331_360_410e6,
            2.840_240_111e4,
            1.080_799_823e5,
            3.787_128_805e5,
            1.413_144_227e6,
            1.479_947_157e6,
            4.346_354_761e4,
            1.685_178_865e5,
            6.281_687_830e5,
            1.971_669_178e6,
            3.199_583_597e6,
            2.114_193_416e3,
            8.155_833_788e3,
            1.189_753_561e5,
            1.619_302_357e5,
            1.829_673_872e5,
            1.807_360_629e5,
            5.610_131_898e5,
            2.214_592_642e6,
            2.438_822_747e6,
            4.215_946_567e5,
            1.329_475_238e6,
            2.534_539_918e6,
            2.746_397_779e6,
        )

        for i, v in enumerate(
            zip(
                An,
                kf,
                l,
                kex,
                key,
                kez,
                rx,
                ry,
                xo,
                yo,
                J,
                Iw,
                fy,
                E,
                G,
                Axis,
                fref,
                αb,
                calc_buckle,
                calc_torsion,
                φNs,
                φNcx,
                φNcy,
                φNcz,
                φNc,
            )
        ):
            Ani, kfi, li, kexi, keyi, kezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, Gi, Axi, frefi, αbi, cbucki, ctori, φNsi, φNcxi, φNcyi, φNczi, φNci = (
                v
            )

            with self.subTest(f"{i} N"):
                N = S6.s6_1_1_Nc(
                    A_n=Ani,
                    k_f=kfi,
                    l=li,
                    k_ex=kexi,
                    k_ey=keyi,
                    k_ez=kezi,
                    r_x=rxi,
                    r_y=ryi,
                    x_o=xoi,
                    y_o=yoi,
                    J=Ji,
                    I_w=Iwi,
                    f_y=fyi,
                    E=Ei,
                    G=Gi,
                    sym=Symmetry(Axi),
                    f_ref=frefi,
                    α_b=αbi,
                    uncertainty_factor=0.85,
                    φ=0.9,
                    calc_buckling=cbucki,
                    calc_torsion=ctori,
                )

                Nsexp = φNsi
                Ncxexp = φNcxi
                Ncyexp = φNcyi
                Nczexp = φNczi
                Ncexp = φNci

                Nsdelta = Nsexp / Test_UT_S6.delta_p
                Ncxdelta = Ncxexp / Test_UT_S6.delta_p
                Ncydelta = Ncyexp / Test_UT_S6.delta_p
                Nczdelta = Nczexp / Test_UT_S6.delta_p
                Ncdelta = Ncexp / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N["φN_s"], second=Nsexp, delta=Nsdelta)
                self.assertAlmostEqual(first=N["φN_cx"], second=Ncxexp, delta=Ncxdelta)
                self.assertAlmostEqual(first=N["φN_cy"], second=Ncyexp, delta=Ncydelta)
                self.assertAlmostEqual(first=N["φN_cz"], second=Nczexp, delta=Nczdelta)
                self.assertAlmostEqual(first=N["φN_c"], second=Ncexp, delta=Ncdelta)

    # endregion

    if __name__ == "__main__":
        unittest.main()
