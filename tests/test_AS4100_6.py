import unittest
import BeamDesign.AS4100.S6 as S6
from BeamDesign.Misc.SymmetryClass import Symmetry


class Test_UT_S6(unittest.TestCase):
    delta_p = 100000.  # accept an accuracy of 0.001% in these tests U.N.O.

    # section capacity methods
    # region

    def test_s6_2_A_e(self):
        """
        Test the s6_2_A_e method against test values calculated in Excel.
        """

        An = (1.890000000E-3, 1.890000000E-3, 1.890000000E-3, 1.890000000E-3,
              5.790000000E-2, 5.790000000E-2, 5.790000000E-2, 5.790000000E-2,
              5.790000000E-2, 5.790000000E-2, 1.170000000E-3, 1.170000000E-3,
              1.170000000E-3, 1.170000000E-3, 1.170000000E-3, 1.170000000E-3,
              2.790000000E-3, 2.790000000E-3, 2.790000000E-3, 2.790000000E-3,
              2.790000000E-3, 2.790000000E-3, 1.430000000E-4, 1.430000000E-4,
              1.430000000E-4, 1.430000000E-4, 1.430000000E-4, 2.510000000E-2,
              2.510000000E-2, 2.510000000E-2, 2.510000000E-2, 2.510000000E-2,
              7.030000000E-3, 7.030000000E-3, 7.030000000E-3, 7.030000000E-3,
              7.030000000E-3, 1.600000000E-2, 1.600000000E-2, 1.600000000E-2,
              1.600000000E-2, 1.600000000E-2, 7.540000000E-4, 7.540000000E-4,
              7.540000000E-4, 7.540000000E-4, 7.540000000E-4, 1.100000000E-2,
              1.100000000E-2, 1.100000000E-2, 1.100000000E-2, 1.300000000E-2,
              1.300000000E-2, 1.300000000E-2, 1.300000000E-2)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.824,
              0.824, 0.824, 0.824, 0.824, 0.824, 0.958, 0.958, 0.958, 0.958,
              0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        Ae = (1.890000000E-3, 1.890000000E-3, 1.890000000E-3, 1.890000000E-3,
              4.846230000E-2, 4.846230000E-2, 4.846230000E-2, 4.846230000E-2,
              4.846230000E-2, 4.846230000E-2, 9.640800000E-4, 9.640800000E-4,
              9.640800000E-4, 9.640800000E-4, 9.640800000E-4, 9.640800000E-4,
              2.672820000E-3, 2.672820000E-3, 2.672820000E-3, 2.672820000E-3,
              2.672820000E-3, 2.672820000E-3, 1.430000000E-4, 1.430000000E-4,
              1.430000000E-4, 1.430000000E-4, 1.430000000E-4, 2.510000000E-2,
              2.510000000E-2, 2.510000000E-2, 2.510000000E-2, 2.510000000E-2,
              7.030000000E-3, 7.030000000E-3, 7.030000000E-3, 7.030000000E-3,
              7.030000000E-3, 1.520000000E-2, 1.520000000E-2, 1.520000000E-2,
              1.520000000E-2, 1.520000000E-2, 7.540000000E-4, 7.540000000E-4,
              7.540000000E-4, 7.540000000E-4, 7.540000000E-4, 1.100000000E-2,
              1.100000000E-2, 1.100000000E-2, 1.100000000E-2, 1.300000000E-2,
              1.300000000E-2, 1.300000000E-2, 1.300000000E-2)

        for i, v in enumerate(zip(An, kf, Ae)):
            Ani, kfi, Aei = v

            with self.subTest(f'{i} Ae'):
                A_e = S6.s6_2_A_e(A_n=Ani, k_f=kfi)
                delta = Aei / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=A_e, second=Aei, delta=delta)

    def test_s6_2_N_s(self):
        """
        Test the s6_2_N_s method against test values calcualted in excel.
        """

        An = (1.890000000E-3, 1.890000000E-3, 1.890000000E-3, 1.890000000E-3,
              5.790000000E-2, 5.790000000E-2, 5.790000000E-2, 5.790000000E-2,
              5.790000000E-2, 5.790000000E-2, 1.170000000E-3, 1.170000000E-3,
              1.170000000E-3, 1.170000000E-3, 1.170000000E-3, 1.170000000E-3,
              2.790000000E-3, 2.790000000E-3, 2.790000000E-3, 2.790000000E-3,
              2.790000000E-3, 2.790000000E-3, 1.430000000E-4, 1.430000000E-4,
              1.430000000E-4, 1.430000000E-4, 1.430000000E-4, 2.510000000E-2,
              2.510000000E-2, 2.510000000E-2, 2.510000000E-2, 2.510000000E-2,
              7.030000000E-3, 7.030000000E-3, 7.030000000E-3, 7.030000000E-3,
              7.030000000E-3, 1.600000000E-2, 1.600000000E-2, 1.600000000E-2,
              1.600000000E-2, 1.600000000E-2, 7.540000000E-4, 7.540000000E-4,
              7.540000000E-4, 7.540000000E-4, 7.540000000E-4, 1.100000000E-2,
              1.100000000E-2, 1.100000000E-2, 1.100000000E-2, 1.300000000E-2,
              1.300000000E-2, 1.300000000E-2, 1.300000000E-2)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.824,
              0.824, 0.824, 0.824, 0.824, 0.824, 0.958, 0.958, 0.958, 0.958,
              0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        fy = (3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.000E+8,
              3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8,
              3.000E+8)

        Ns = (6.048000000E+5, 6.048000000E+5, 6.048000000E+5, 6.048000000E+5,
              1.356944400E+7, 1.356944400E+7, 1.356944400E+7, 1.356944400E+7,
              1.356944400E+7, 1.356944400E+7, 3.085056000E+5, 3.085056000E+5,
              3.085056000E+5, 3.085056000E+5, 3.085056000E+5, 3.085056000E+5,
              8.553024000E+5, 8.553024000E+5, 8.553024000E+5, 8.553024000E+5,
              8.553024000E+5, 8.553024000E+5, 4.576000000E+4, 4.576000000E+4,
              4.576000000E+4, 4.576000000E+4, 4.576000000E+4, 7.028000000E+6,
              7.028000000E+6, 7.028000000E+6, 7.028000000E+6, 7.028000000E+6,
              1.968400000E+6, 1.968400000E+6, 1.968400000E+6, 1.968400000E+6,
              1.968400000E+6, 4.256000000E+6, 4.256000000E+6, 4.256000000E+6,
              4.256000000E+6, 4.256000000E+6, 2.412800000E+5, 2.412800000E+5,
              2.412800000E+5, 2.412800000E+5, 2.412800000E+5, 3.300000000E+6,
              3.300000000E+6, 3.300000000E+6, 3.300000000E+6, 3.900000000E+6,
              3.900000000E+6, 3.900000000E+6, 3.900000000E+6)

        for i, v in enumerate(zip(An, kf, fy, Ns)):
            Ani, kfi, fyi, Nsi = v

            with self.subTest(f'{i} Ns'):
                A_e = S6.s6_2_A_e(A_n=Ani, k_f=kfi)
                N_s = S6.s6_2_N_s(A_e=A_e, f_y=fyi)

                delta = Nsi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N_s, second=Nsi, delta=delta)

    # endregion

    # member property methods

    # region

    def test_s6_3_2_l_e(self):
        """
        Test the s6_3_2_l_e method
        """

        with self.subTest('Test 1'):
            l = 1
            k = 0.5

            l_e = S6.s6_3_2_l_e(l=l, k_e=k)
            expected = l * k
            delta = Test_UT_S6.delta_p
            self.assertAlmostEqual(first=l_e, second=expected, delta=delta)

        with self.subTest('Test 2'):
            l = 1
            k = 1

            l_e = S6.s6_3_2_l_e(l=l, k_e=k)
            expected = l * k
            delta = Test_UT_S6.delta_p
            self.assertAlmostEqual(first=l_e, second=expected, delta=delta)

        with self.subTest('Test 3'):
            l = 1
            k = 2.2

            l_e = S6.s6_3_2_l_e(l=l, k_e=k)
            expected = l * k
            delta = Test_UT_S6.delta_p
            self.assertAlmostEqual(first=l_e, second=expected, delta=delta)

    # end member property methods
    # endregion

    # Euler buckling methods.
    # region

    def test_N_euler(self):
        """
        Test the N_euler function against values calculated in MS Excel.
        """

        E = (2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        Ix = (3.18000000E-6, 3.18000000E-6, 3.18000000E-6, 3.18000000E-6,
              1.53000000E-2, 1.53000000E-2, 1.53000000E-2, 1.53000000E-2,
              1.53000000E-2, 1.53000000E-2, 2.10000000E-6, 2.10000000E-6,
              2.10000000E-6, 2.10000000E-6, 2.10000000E-6, 2.10000000E-6,
              9.61000000E-6, 9.61000000E-6, 9.61000000E-6, 9.61000000E-6,
              9.61000000E-6, 9.61000000E-6, 1.21000000E-8, 1.21000000E-8,
              1.21000000E-8, 1.21000000E-8, 1.21000000E-8, 4.86000000E-4,
              4.86000000E-4, 4.86000000E-4, 4.86000000E-4, 4.86000000E-4,
              1.52000000E-4, 1.52000000E-4, 1.52000000E-4, 1.52000000E-4,
              1.52000000E-4, 9.86000000E-4, 9.86000000E-4, 9.86000000E-4,
              9.86000000E-4, 9.86000000E-4, 6.83000000E-7, 6.83000000E-7,
              6.83000000E-7, 6.83000000E-7, 6.83000000E-7, 4.85384848E-4,
              4.85384848E-4, 4.85384848E-4, 4.85384848E-4, 2.10008333E-4,
              2.10008333E-4, 2.10008333E-4, 2.10008333E-4)

        Iy = (1.14000000E-6, 1.14000000E-6, 1.14000000E-6, 1.14000000E-6,
              8.34000000E-4, 8.34000000E-4, 8.34000000E-4, 8.34000000E-4,
              8.34000000E-4, 8.34000000E-4, 3.15000000E-7, 3.15000000E-7,
              3.15000000E-7, 3.15000000E-7, 3.15000000E-7, 3.15000000E-7,
              2.48000000E-6, 2.48000000E-6, 2.48000000E-6, 2.48000000E-6,
              2.48000000E-6, 2.48000000E-6, 3.19000000E-9, 3.19000000E-9,
              3.19000000E-9, 3.19000000E-9, 3.19000000E-9, 2.00000000E-4,
              2.00000000E-4, 2.00000000E-4, 2.00000000E-4, 2.00000000E-4,
              6.48000000E-6, 6.48000000E-6, 6.48000000E-6, 6.48000000E-6,
              6.48000000E-6, 3.93000000E-5, 3.93000000E-5, 3.93000000E-5,
              3.93000000E-5, 3.93000000E-5, 1.20000000E-7, 1.20000000E-7,
              1.20000000E-7, 1.20000000E-7, 1.20000000E-7, 1.50416667E-5,
              1.50416667E-5, 1.50416667E-5, 1.50416667E-5, 2.67102564E-5,
              2.67102564E-5, 2.67102564E-5, 2.67102564E-5)

        Neuler_x = (6.27706840E+4, 2.51082736E+5, 6.27706840E+6, 2.51082736E+7,
                    4.71890460E+6, 1.88756184E+7, 7.55024737E+7, 3.02009895E+8,
                    1.20803958E+9, 3.02009895E+10, 1.03630846E+4, 4.14523385E+4,
                    1.65809354E+5, 4.14523385E+6, 1.65809354E+7, 4.14523385E+8,
                    4.74234491E+4, 1.89693797E+5, 7.58775186E+5, 1.89693797E+7,
                    7.58775186E+7, 1.89693797E+9, 2.38844427E+2, 9.55377706E+2,
                    2.38844427E+4, 9.55377706E+4, 2.38844427E+6, 5.99578467E+5,
                    2.39831387E+6, 9.59325548E+6, 3.83730219E+7, 9.59325548E+8,
                    7.50089934E+5, 3.00035974E+6, 1.20014390E+7, 3.00035974E+8,
                    1.20014390E+9, 1.21642874E+6, 4.86571497E+6, 1.94628599E+7,
                    7.78514395E+7, 1.94628599E+9, 1.34818796E+4, 5.39275184E+4,
                    1.34818796E+6, 5.39275184E+6, 1.34818796E+8, 9.58111287E+6,
                    3.83244515E+7, 9.58111287E+8, 3.83244515E+9, 4.14539834E+6,
                    1.65815934E+7, 4.14539834E+8, 1.65815934E+9)

        Neuler_y = (2.25026980E+4, 9.00107921E+4, 2.25026980E+6, 9.00107921E+6,
                    2.57226565E+5, 1.02890626E+6, 4.11562504E+6, 1.64625001E+7,
                    6.58500006E+7, 1.64625001E+9, 1.55446269E+3, 6.21785077E+3,
                    2.48714031E+4, 6.21785077E+5, 2.48714031E+6, 6.21785077E+7,
                    1.22383095E+4, 4.89532378E+4, 1.95812951E+5, 4.89532378E+6,
                    1.95812951E+7, 4.89532378E+8, 6.29680761E+1, 2.51872304E+2,
                    6.29680761E+3, 2.51872304E+4, 6.29680761E+5, 2.46740110E+5,
                    9.86960440E+5, 3.94784176E+6, 1.57913670E+7, 3.94784176E+8,
                    3.19775183E+4, 1.27910073E+5, 5.11640292E+5, 1.27910073E+7,
                    5.11640292E+7, 4.84844316E+4, 1.93937726E+5, 7.75750906E+5,
                    3.10300362E+6, 7.75750906E+7, 2.36870506E+3, 9.47482023E+3,
                    2.36870506E+5, 9.47482023E+5, 2.36870506E+7, 2.96910599E+5,
                    1.18764240E+6, 2.96910599E+7, 1.18764240E+8, 5.27239328E+5,
                    2.10895731E+6, 5.27239328E+7, 2.10895731E+8)

        for i, v in enumerate(zip(E, Ix, lex, Iy, ley, Neuler_x, Neuler_y)):
            Ei, Ixi, lexi, Iyi, leyi, Nxi, Nyi = v

            with self.subTest(f'{i} Nx'):
                Nx = S6.N_euler(E=Ei, I=Ixi, l_e=lexi)
                delta_x = Nxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=Nx, second=Nxi,
                                       delta=delta_x)

            with self.subTest(f'{i} Ny'):
                Ny = S6.N_euler(E=Ei, I=Iyi, l_e=leyi)
                delta_y = Nyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=Ny, second=Nyi, delta=delta_y)

    def test_f_euler(self):
        """
        Testing the f_euler function against values calculated in MS Excel.
        """

        E = (2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        rx = (4.11000000E-2, 4.11000000E-2, 4.11000000E-2, 4.11000000E-2,
              5.15000000E-1, 5.15000000E-1, 5.15000000E-1, 5.15000000E-1,
              5.15000000E-1, 5.15000000E-1, 4.25000000E-2, 4.25000000E-2,
              4.25000000E-2, 4.25000000E-2, 4.25000000E-2, 4.25000000E-2,
              5.87000000E-2, 5.87000000E-2, 5.87000000E-2, 5.87000000E-2,
              5.87000000E-2, 5.87000000E-2, 9.22000000E-3, 9.22000000E-3,
              9.22000000E-3, 9.22000000E-3, 9.22000000E-3, 1.39000000E-1,
              1.39000000E-1, 1.39000000E-1, 1.39000000E-1, 1.39000000E-1,
              1.47000000E-1, 1.47000000E-1, 1.47000000E-1, 1.47000000E-1,
              1.47000000E-1, 2.49000000E-1, 2.49000000E-1, 2.49000000E-1,
              2.49000000E-1, 2.49000000E-1, 3.01000000E-2, 3.01000000E-2,
              3.01000000E-2, 3.01000000E-2, 3.01000000E-2, 2.10000000E-1,
              2.10000000E-1, 2.10000000E-1, 2.10000000E-1, 1.27100304E-1,
              1.27100304E-1, 1.27100304E-1, 1.27100304E-1)

        ry = (2.45000000E-2, 2.45000000E-2, 2.45000000E-2, 2.45000000E-2,
              1.20000000E-1, 1.20000000E-1, 1.20000000E-1, 1.20000000E-1,
              1.20000000E-1, 1.20000000E-1, 1.64000000E-2, 1.64000000E-2,
              1.64000000E-2, 1.64000000E-2, 1.64000000E-2, 1.64000000E-2,
              2.98000000E-2, 2.98000000E-2, 2.98000000E-2, 2.98000000E-2,
              2.98000000E-2, 2.98000000E-2, 4.73000000E-3, 4.73000000E-3,
              4.73000000E-3, 4.73000000E-3, 4.73000000E-3, 8.93000000E-2,
              8.93000000E-2, 8.93000000E-2, 8.93000000E-2, 8.93000000E-2,
              3.04000000E-2, 3.04000000E-2, 3.04000000E-2, 3.04000000E-2,
              3.04000000E-2, 4.96000000E-2, 4.96000000E-2, 4.96000000E-2,
              4.96000000E-2, 4.96000000E-2, 1.26000000E-2, 1.26000000E-2,
              1.26000000E-2, 1.26000000E-2, 1.26000000E-2, 3.69790000E-2,
              3.69790000E-2, 3.69790000E-2, 3.69790000E-2, 4.53280830E-2,
              4.53280830E-2, 4.53280830E-2, 4.53280830E-2)

        feuler_x = (3.33436689E+7, 1.33374676E+8, 3.33436689E+9, 1.33374676E+10,
                    8.18020571E+7, 3.27208228E+8, 1.30883291E+9, 5.23533165E+9,
                    2.09413266E+10, 5.23533165E+11, 8.91348647E+6,
                    3.56539459E+7, 1.42615784E+8, 3.56539459E+9, 1.42615784E+10,
                    3.56539459E+11, 1.70037986E+7, 6.80151944E+7, 2.72060778E+8,
                    6.80151944E+9, 2.72060778E+10, 6.80151944E+11,
                    1.67799856E+6, 6.71199423E+6, 1.67799856E+8, 6.71199423E+8,
                    1.67799856E+10, 2.38363283E+7, 9.53453133E+7, 3.81381253E+8,
                    1.52552501E+9, 3.81381253E+10, 1.06636141E+8, 4.26544563E+8,
                    1.70617825E+9, 4.26544563E+10, 1.70617825E+11,
                    7.64906678E+7, 3.05962671E+8, 1.22385068E+9, 4.89540274E+9,
                    1.22385068E+11, 1.78839206E+7, 7.15356823E+7, 1.78839206E+9,
                    7.15356823E+9, 1.78839206E+11, 8.70499108E+8, 3.48199643E+9,
                    8.70499108E+10, 3.48199643E+11, 3.18876795E+8,
                    1.27550718E+9, 3.18876795E+10, 1.27550718E+11)

        feuler_y = (1.18484601E+7, 4.73938403E+7, 1.18484601E+9, 4.73938403E+9,
                    4.44132198E+6, 1.77652879E+7, 7.10611517E+7, 2.84244607E+8,
                    1.13697843E+9, 2.84244607E+10, 1.32726440E+6, 5.30905760E+6,
                    2.12362304E+7, 5.30905760E+8, 2.12362304E+9, 5.30905760E+10,
                    4.38230175E+6, 1.75292070E+7, 7.01168279E+7, 1.75292070E+9,
                    7.01168279E+9, 1.75292070E+11, 4.41623345E+5, 1.76649338E+6,
                    4.41623345E+7, 1.76649338E+8, 4.41623345E+9, 9.83813270E+6,
                    3.93525308E+7, 1.57410123E+8, 6.29640493E+8, 1.57410123E+10,
                    4.56054680E+6, 1.82421872E+7, 7.29687488E+7, 1.82421872E+9,
                    7.29687488E+9, 3.03510075E+6, 1.21404030E+7, 4.85616119E+7,
                    1.94246448E+8, 4.85616119E+9, 3.13379679E+6, 1.25351872E+7,
                    3.13379679E+8, 1.25351872E+9, 3.13379679E+10, 2.69923108E+7,
                    1.07969243E+8, 2.69923108E+9, 1.07969243E+10, 4.05568714E+7,
                    1.62227486E+8, 4.05568714E+9, 1.62227486E+10)

        for i, v in enumerate(zip(E, lex, rx, ley, ry, feuler_x, feuler_y)):
            Ei, lexi, rxi, leyi, ryi, fxi, fyi = v

            with self.subTest(f'{i} f_x'):
                fx = S6.f_euler(E=Ei, l_e=lexi, r=rxi)
                delta_x = fxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=fx, second=fxi, delta=delta_x)

            with self.subTest(f'{i} f_y'):
                fy = S6.f_euler(E=Ei, l_e=leyi, r=ryi)
                delta_y = fyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=fy, second=fyi, delta=delta_y)

    def test_r_ol(self):
        """
        Test the r_ol calculations against values calculated in MS Excel
        """

        rx = (4.11000000E-2, 4.11000000E-2, 4.11000000E-2, 4.11000000E-2,
              5.15000000E-1, 5.15000000E-1, 5.15000000E-1, 5.15000000E-1,
              5.15000000E-1, 5.15000000E-1, 4.25000000E-2, 4.25000000E-2,
              4.25000000E-2, 4.25000000E-2, 4.25000000E-2, 4.25000000E-2,
              5.87000000E-2, 5.87000000E-2, 5.87000000E-2, 5.87000000E-2,
              5.87000000E-2, 5.87000000E-2, 9.22000000E-3, 9.22000000E-3,
              9.22000000E-3, 9.22000000E-3, 9.22000000E-3, 1.39000000E-1,
              1.39000000E-1, 1.39000000E-1, 1.39000000E-1, 1.39000000E-1,
              1.47000000E-1, 1.47000000E-1, 1.47000000E-1, 1.47000000E-1,
              1.47000000E-1, 2.49000000E-1, 2.49000000E-1, 2.49000000E-1,
              2.49000000E-1, 2.49000000E-1, 3.01000000E-2, 3.01000000E-2,
              3.01000000E-2, 3.01000000E-2, 3.01000000E-2, 2.10000000E-1,
              2.10000000E-1, 2.10000000E-1, 2.10000000E-1, 1.27100304E-1,
              1.27100304E-1, 1.27100304E-1, 1.27100304E-1)

        ry = (2.45000000E-2, 2.45000000E-2, 2.45000000E-2, 2.45000000E-2,
              1.20000000E-1, 1.20000000E-1, 1.20000000E-1, 1.20000000E-1,
              1.20000000E-1, 1.20000000E-1, 1.64000000E-2, 1.64000000E-2,
              1.64000000E-2, 1.64000000E-2, 1.64000000E-2, 1.64000000E-2,
              2.98000000E-2, 2.98000000E-2, 2.98000000E-2, 2.98000000E-2,
              2.98000000E-2, 2.98000000E-2, 4.73000000E-3, 4.73000000E-3,
              4.73000000E-3, 4.73000000E-3, 4.73000000E-3, 8.93000000E-2,
              8.93000000E-2, 8.93000000E-2, 8.93000000E-2, 8.93000000E-2,
              3.04000000E-2, 3.04000000E-2, 3.04000000E-2, 3.04000000E-2,
              3.04000000E-2, 4.96000000E-2, 4.96000000E-2, 4.96000000E-2,
              4.96000000E-2, 4.96000000E-2, 1.26000000E-2, 1.26000000E-2,
              1.26000000E-2, 1.26000000E-2, 1.26000000E-2, 3.69790000E-2,
              3.69790000E-2, 3.69790000E-2, 3.69790000E-2, 4.53280830E-2,
              4.53280830E-2, 4.53280830E-2, 4.53280830E-2)

        xo = (0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              5.67000000E-2, 5.67000000E-2, 5.67000000E-2, 5.67000000E-2,
              5.67000000E-2, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 2.72000000E-2, 2.72000000E-2,
              2.72000000E-2, 2.72000000E-2, 2.72000000E-2, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 2.20614081E-2,
              2.20614081E-2, 2.20614081E-2, 2.20614081E-2)

        yo = (0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 1.54285048E-1,
              1.54285048E-1, 1.54285048E-1, 1.54285048E-1, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0)

        rol = (4.78483020E-2, 4.78483020E-2, 4.78483020E-2, 4.78483020E-2,
               5.28795802E-1, 5.28795802E-1, 5.28795802E-1, 5.28795802E-1,
               5.28795802E-1, 5.28795802E-1, 4.55544729E-2, 4.55544729E-2,
               4.55544729E-2, 4.55544729E-2, 4.55544729E-2, 4.55544729E-2,
               6.58310717E-2, 6.58310717E-2, 6.58310717E-2, 6.58310717E-2,
               6.58310717E-2, 6.58310717E-2, 1.03624949E-2, 1.03624949E-2,
               1.03624949E-2, 1.03624949E-2, 1.03624949E-2, 1.65213468E-1,
               1.65213468E-1, 1.65213468E-1, 1.65213468E-1, 1.65213468E-1,
               1.60461989E-1, 1.60461989E-1, 1.60461989E-1, 1.60461989E-1,
               1.60461989E-1, 2.53892024E-1, 2.53892024E-1, 2.53892024E-1,
               2.53892024E-1, 2.53892024E-1, 4.24807015E-2, 4.24807015E-2,
               4.24807015E-2, 4.24807015E-2, 4.24807015E-2, 2.63194457E-1,
               2.63194457E-1, 2.63194457E-1, 2.63194457E-1, 1.36732688E-1,
               1.36732688E-1, 1.36732688E-1, 1.36732688E-1)

        for i, v in enumerate(zip(rx, ry, xo, yo, rol)):
            rxi, ryi, xoi, yoi, roli = v

            with self.subTest(f'{i} r_ol'):
                r_ol = S6.r_ol(r_x=rxi, r_y=ryi, x_o=xoi, y_o=yoi)
                delta = roli / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=r_ol, second=roli,
                                       delta=delta)

    def test_f_euler_torsion(self):
        """
        Test the f_euler_torsion method based on values calculated in MS Excel.
        """

        An = (1.89000E-3, 1.89000E-3, 1.89000E-3, 1.89000E-3, 5.79000E-2,
              5.79000E-2, 5.79000E-2, 5.79000E-2, 5.79000E-2, 5.79000E-2,
              1.17000E-3, 1.17000E-3, 1.17000E-3, 1.17000E-3, 1.17000E-3,
              1.17000E-3, 2.79000E-3, 2.79000E-3, 2.79000E-3, 2.79000E-3,
              2.79000E-3, 2.79000E-3, 1.43000E-4, 1.43000E-4, 1.43000E-4,
              1.43000E-4, 1.43000E-4, 2.51000E-2, 2.51000E-2, 2.51000E-2,
              2.51000E-2, 2.51000E-2, 7.03000E-3, 7.03000E-3, 7.03000E-3,
              7.03000E-3, 7.03000E-3, 1.60000E-2, 1.60000E-2, 1.60000E-2,
              1.60000E-2, 1.60000E-2, 7.54000E-4, 7.54000E-4, 7.54000E-4,
              7.54000E-4, 7.54000E-4, 1.10000E-2, 1.10000E-2, 1.10000E-2,
              1.10000E-2, 1.30000E-2, 1.30000E-2, 1.30000E-2, 1.30000E-2)

        lez = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1,
               20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1,
               20, 10, 5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5,
               1, 0.5, 10, 5, 1, 0.5)

        rx = (4.11000000E-2, 4.11000000E-2, 4.11000000E-2, 4.11000000E-2,
              5.15000000E-1, 5.15000000E-1, 5.15000000E-1, 5.15000000E-1,
              5.15000000E-1, 5.15000000E-1, 4.25000000E-2, 4.25000000E-2,
              4.25000000E-2, 4.25000000E-2, 4.25000000E-2, 4.25000000E-2,
              5.87000000E-2, 5.87000000E-2, 5.87000000E-2, 5.87000000E-2,
              5.87000000E-2, 5.87000000E-2, 9.22000000E-3, 9.22000000E-3,
              9.22000000E-3, 9.22000000E-3, 9.22000000E-3, 1.39000000E-1,
              1.39000000E-1, 1.39000000E-1, 1.39000000E-1, 1.39000000E-1,
              1.47000000E-1, 1.47000000E-1, 1.47000000E-1, 1.47000000E-1,
              1.47000000E-1, 2.49000000E-1, 2.49000000E-1, 2.49000000E-1,
              2.49000000E-1, 2.49000000E-1, 3.01000000E-2, 3.01000000E-2,
              3.01000000E-2, 3.01000000E-2, 3.01000000E-2, 2.10000000E-1,
              2.10000000E-1, 2.10000000E-1, 2.10000000E-1, 1.27100304E-1,
              1.27100304E-1, 1.27100304E-1, 1.27100304E-1)

        ry = (2.45000000E-2, 2.45000000E-2, 2.45000000E-2, 2.45000000E-2,
              1.20000000E-1, 1.20000000E-1, 1.20000000E-1, 1.20000000E-1,
              1.20000000E-1, 1.20000000E-1, 1.64000000E-2, 1.64000000E-2,
              1.64000000E-2, 1.64000000E-2, 1.64000000E-2, 1.64000000E-2,
              2.98000000E-2, 2.98000000E-2, 2.98000000E-2, 2.98000000E-2,
              2.98000000E-2, 2.98000000E-2, 4.73000000E-3, 4.73000000E-3,
              4.73000000E-3, 4.73000000E-3, 4.73000000E-3, 8.93000000E-2,
              8.93000000E-2, 8.93000000E-2, 8.93000000E-2, 8.93000000E-2,
              3.04000000E-2, 3.04000000E-2, 3.04000000E-2, 3.04000000E-2,
              3.04000000E-2, 4.96000000E-2, 4.96000000E-2, 4.96000000E-2,
              4.96000000E-2, 4.96000000E-2, 1.26000000E-2, 1.26000000E-2,
              1.26000000E-2, 1.26000000E-2, 1.26000000E-2, 3.69790000E-2,
              3.69790000E-2, 3.69790000E-2, 3.69790000E-2, 4.53280830E-2,
              4.53280830E-2, 4.53280830E-2, 4.53280830E-2)

        xo = (0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              5.67000000E-2, 5.67000000E-2, 5.67000000E-2, 5.67000000E-2,
              5.67000000E-2, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 2.72000000E-2, 2.72000000E-2,
              2.72000000E-2, 2.72000000E-2, 2.72000000E-2, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 2.20614081E-2,
              2.20614081E-2, 2.20614081E-2, 2.20614081E-2)

        yo = (0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 1.54285048E-1,
              1.54285048E-1, 1.54285048E-1, 1.54285048E-1, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0)

        J = (3.49000000E-8, 3.49000000E-8, 3.49000000E-8, 3.49000000E-8,
             2.20000000E-5, 2.20000000E-5, 2.20000000E-5, 2.20000000E-5,
             2.20000000E-5, 2.20000000E-5, 1.48000000E-8, 1.48000000E-8,
             1.48000000E-8, 1.48000000E-8, 1.48000000E-8, 1.48000000E-8,
             8.89000000E-8, 8.89000000E-8, 8.89000000E-8, 8.89000000E-8,
             8.89000000E-8, 8.89000000E-8, 5.15000000E-10, 5.15000000E-10,
             5.15000000E-10, 5.15000000E-10, 5.15000000E-10, 5.75000000E-6,
             5.75000000E-6, 5.75000000E-6, 5.75000000E-6, 5.75000000E-6,
             4.72000000E-7, 4.72000000E-7, 4.72000000E-7, 4.72000000E-7,
             4.72000000E-7, 1.56000000E-6, 1.56000000E-6, 1.56000000E-6,
             1.56000000E-6, 1.56000000E-6, 8.13000000E-9, 8.13000000E-9,
             8.13000000E-9, 8.13000000E-9, 8.13000000E-9, 9.18388008E-7,
             9.18388008E-7, 9.18388008E-7, 9.18388008E-7, 1.58475562E-6,
             1.58475562E-6, 1.58475562E-6, 1.58475562E-6)

        Iw = (2.30000000E-9, 2.30000000E-9, 2.30000000E-9, 2.30000000E-9,
              2.80000000E-4, 2.80000000E-4, 2.80000000E-4, 2.80000000E-4,
              2.80000000E-4, 2.80000000E-4, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 0.00000000E+0,
              0.00000000E+0, 0.00000000E+0, 0.00000000E+0, 4.60000000E-6,
              4.60000000E-6, 4.60000000E-6, 4.60000000E-6, 4.60000000E-6,
              1.51000000E-7, 1.51000000E-7, 1.51000000E-7, 1.51000000E-7,
              1.51000000E-7, 3.45000000E-6, 3.45000000E-6, 3.45000000E-6,
              3.45000000E-6, 3.45000000E-6, 1.06000000E-10, 1.06000000E-10,
              1.06000000E-10, 1.06000000E-10, 1.06000000E-10, 4.02909074E-7,
              4.02909074E-7, 4.02909074E-7, 4.02909074E-7, 3.06344239E-8,
              3.06344239E-8, 3.06344239E-8, 3.06344239E-8)

        E = (2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11)

        G = (8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10)

        Foz = (6.55731018E+8, 6.87207339E+8, 1.69444962E+9, 4.84208173E+9,
               1.14041152E+8, 1.30043160E+8, 1.94051194E+8, 4.50083327E+8,
               1.47421186E+9, 3.42463249E+10, 4.87645015E+8, 4.87645015E+8,
               4.87645015E+8, 4.87645015E+8, 4.87645015E+8, 4.87645015E+8,
               5.88200913E+8, 5.88200913E+8, 5.88200913E+8, 5.88200913E+8,
               5.88200913E+8, 5.88200913E+8, 2.68307320E+9, 2.68307320E+9,
               2.68307320E+9, 2.68307320E+9, 2.68307320E+9, 6.79701656E+8,
               7.04551532E+8, 8.03951036E+8, 1.20154905E+9, 1.39246856E+10,
               2.12725331E+8, 2.25075369E+8, 2.74475520E+8, 1.85528034E+9,
               6.79529542E+9, 1.25129872E+8, 1.37510196E+8, 1.87031491E+8,
               3.85116675E+8, 6.72384254E+9, 4.79535455E+8, 4.84148654E+8,
               6.31771010E+8, 1.09309087E+9, 1.58553265E+10, 1.06858003E+8,
               1.38170080E+8, 1.14015655E+9, 4.27136429E+9, 5.24120012E+8,
               5.31584030E+8, 7.70432594E+8, 1.51683436E+9)

        for i, v in enumerate(zip(An, lez, rx, ry, xo, yo, J, Iw, E, G, Foz)):
            Ani, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, Fozi = v

            with self.subTest(f'{i} f_torsion'):
                f = S6.f_euler_torsion(A=Ani, l_ez=lezi, r_x=rxi, r_y=ryi,
                                       x_o=xoi, y_o=yoi, J=Ji, I_w=Iwi, E=Ei,
                                       G=Gi)
                delta = Fozi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=f, second=Fozi,
                                       delta=delta)

    # end Euler buckling methods
    # endregion

    # member flexural buckling capacity methods
    # region

    def test_s6_3_3_λ_n(self):
        """
        Test the s6_3_3_λ_n method against values calculated from excel.
        """

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        rx = (0.0411, 0.0411, 0.0411, 0.0411, 0.515, 0.515, 0.515, 0.515, 0.515,
              0.515, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0587,
              0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922, 0.00922, 0.00922,
              0.00922, 0.00922, 0.139, 0.139, 0.139, 0.139, 0.139, 0.147, 0.147,
              0.147, 0.147, 0.147, 0.249, 0.249, 0.249, 0.249, 0.249, 0.0301,
              0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21, 0.21, 0.21,
              0.1271003036, 0.1271003036, 0.1271003036, 0.1271003036)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.824,
              0.824, 0.824, 0.824, 0.824, 0.824, 0.958, 0.958, 0.958, 0.958,
              0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        fy = (320000000, 320000000, 320000000, 320000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 280000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 280000000, 280000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 300000000,
              300000000, 300000000, 300000000, 300000000, 300000000, 300000000,
              300000000)

        fref = (250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000)

        λnx = (275.272712870675, 137.636356435338, 27.5272712870675,
               13.7636356435338, 150.402307136206, 75.2011535681031,
               37.6005767840515, 18.8002883920258, 9.40014419601288,
               1.88002883920258, 483.292055668893, 241.646027834446,
               120.823013917223, 24.1646027834446, 12.0823013917223,
               2.41646027834447, 377.293769768957, 188.646884884479,
               94.3234424422393, 18.8646884884479, 9.43234424422393,
               1.88646884884479, 1227.08335129987, 613.541675649933,
               122.708335129987, 61.3541675649933, 12.2708335129987,
               304.546913503838, 152.273456751919, 76.1367283759594,
               38.0683641879797, 7.61367283759594, 143.986465908277,
               71.9932329541385, 35.9966164770693, 7.19932329541385,
               3.59966164770693, 165.70341472421, 82.8517073621052,
               41.4258536810526, 20.7129268405263, 4.14258536810526,
               375.870714251985, 187.935357125993, 37.5870714251985,
               18.7935357125993, 3.75870714251985, 52.1640530957301,
               26.0820265478651, 5.21640530957301, 2.6082026547865,
               86.1874506970361, 43.0937253485181, 8.61874506970361,
               4.30937253485181)

        for i, v in enumerate(zip(kf, lex, rx, fy, fref, λnx)):

            kfi, lexi, rxi, fyi, frefi, λnxi = v

            with self.subTest(f'{i} λ_nx'):
                λ_n = S6.s6_3_3_λ_n(k_f=kfi, l_e=lexi, r=rxi, f_y=fyi,
                                    f_ref=frefi)

                delta = λnxi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=λ_n, second=λnxi, delta=delta)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        ry = (2.450000000E-2, 2.450000000E-2, 2.450000000E-2, 2.450000000E-2,
              1.200000000E-1, 1.200000000E-1, 1.200000000E-1, 1.200000000E-1,
              1.200000000E-1, 1.200000000E-1, 1.640000000E-2, 1.640000000E-2,
              1.640000000E-2, 1.640000000E-2, 1.640000000E-2, 1.640000000E-2,
              2.980000000E-2, 2.980000000E-2, 2.980000000E-2, 2.980000000E-2,
              2.980000000E-2, 2.980000000E-2, 4.730000000E-3, 4.730000000E-3,
              4.730000000E-3, 4.730000000E-3, 4.730000000E-3, 8.930000000E-2,
              8.930000000E-2, 8.930000000E-2, 8.930000000E-2, 8.930000000E-2,
              3.040000000E-2, 3.040000000E-2, 3.040000000E-2, 3.040000000E-2,
              3.040000000E-2, 4.960000000E-2, 4.960000000E-2, 4.960000000E-2,
              4.960000000E-2, 4.960000000E-2, 1.260000000E-2, 1.260000000E-2,
              1.260000000E-2, 1.260000000E-2, 1.260000000E-2, 3.697900000E-2,
              3.697900000E-2, 3.697900000E-2, 3.697900000E-2, 4.532808300E-2,
              4.532808300E-2, 4.532808300E-2, 4.532808300E-2)

        λny = (4.617840204E+2, 2.308920102E+2, 4.617840204E+1, 2.308920102E+1,
               6.454765681E+2, 3.227382841E+2, 1.613691420E+2, 8.068457102E+1,
               4.034228551E+1, 8.068457102E+0, 1.252433681E+3, 6.262168404E+2,
               3.131084202E+2, 6.262168404E+1, 3.131084202E+1, 6.262168404E+0,
               7.431927613E+2, 3.715963806E+2, 1.857981903E+2, 3.715963806E+1,
               1.857981903E+1, 3.715963806E+0, 2.391904545E+3, 1.195952273E+3,
               2.391904545E+2, 1.195952273E+2, 2.391904545E+1, 4.740427881E+2,
               2.370213940E+2, 1.185106970E+2, 5.925534851E+1, 1.185106970E+1,
               6.962503450E+2, 3.481251725E+2, 1.740625863E+2, 3.481251725E+1,
               1.740625863E+1, 8.318578683E+2, 4.159289341E+2, 2.079644671E+2,
               1.039822335E+2, 2.079644671E+1, 8.979133729E+2, 4.489566865E+2,
               8.979133729E+1, 4.489566865E+1, 8.979133729E+0, 2.962343803E+2,
               1.481171902E+2, 2.962343803E+1, 1.481171902E+1, 2.416702941E+2,
               1.208351471E+2, 2.416702941E+1, 1.208351471E+1)

        for i, v in enumerate(zip(kf, ley, ry, fy, fref, λny)):

            kfi, leyi, ryi, fyi, frefi, λnyi = v

            with self.subTest(f'{i} λ_ny'):
                λ_n = S6.s6_3_3_λ_n(k_f=kfi, l_e=leyi, r=ryi, f_y=fyi,
                                    f_ref=frefi)

                delta = λnyi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=λ_n, second=λnyi, delta=delta)

    def test_s6_3_3_α_c(self):
        """
        Test the s6_3_3_α_c method against values calculated in Excel.
        """

        λnx = (2.752727129E+2, 1.376363564E+2, 2.752727129E+1, 1.376363564E+1,
               1.504023071E+2, 7.520115357E+1, 3.760057678E+1, 1.880028839E+1,
               9.400144196E+0, 1.880028839E+0, 4.832920557E+2, 2.416460278E+2,
               1.208230139E+2, 2.416460278E+1, 1.208230139E+1, 2.416460278E+0,
               3.772937698E+2, 1.886468849E+2, 9.432344244E+1, 1.886468849E+1,
               9.432344244E+0, 1.886468849E+0, 1.227083351E+3, 6.135416756E+2,
               1.227083351E+2, 6.135416756E+1, 1.227083351E+1, 3.045469135E+2,
               1.522734568E+2, 7.613672838E+1, 3.806836419E+1, 7.613672838E+0,
               1.439864659E+2, 7.199323295E+1, 3.599661648E+1, 7.199323295E+0,
               3.599661648E+0, 1.657034147E+2, 8.285170736E+1, 4.142585368E+1,
               2.071292684E+1, 4.142585368E+0, 3.758707143E+2, 1.879353571E+2,
               3.758707143E+1, 1.879353571E+1, 3.758707143E+0, 5.216405310E+1,
               2.608202655E+1, 5.216405310E+0, 2.608202655E+0, 8.618745070E+1,
               4.309372535E+1, 8.618745070E+0, 4.309372535E+0)

        λny = (4.617840204E+2, 2.308920102E+2, 4.617840204E+1, 2.308920102E+1,
               6.454765681E+2, 3.227382841E+2, 1.613691420E+2, 8.068457102E+1,
               4.034228551E+1, 8.068457102E+0, 1.252433681E+3, 6.262168404E+2,
               3.131084202E+2, 6.262168404E+1, 3.131084202E+1, 6.262168404E+0,
               7.431927613E+2, 3.715963806E+2, 1.857981903E+2, 3.715963806E+1,
               1.857981903E+1, 3.715963806E+0, 2.391904545E+3, 1.195952273E+3,
               2.391904545E+2, 1.195952273E+2, 2.391904545E+1, 4.740427881E+2,
               2.370213940E+2, 1.185106970E+2, 5.925534851E+1, 1.185106970E+1,
               6.962503450E+2, 3.481251725E+2, 1.740625863E+2, 3.481251725E+1,
               1.740625863E+1, 8.318578683E+2, 4.159289341E+2, 2.079644671E+2,
               1.039822335E+2, 2.079644671E+1, 8.979133729E+2, 4.489566865E+2,
               8.979133729E+1, 4.489566865E+1, 8.979133729E+0, 2.962343803E+2,
               1.481171902E+2, 2.962343803E+1, 1.481171902E+1, 2.416702941E+2,
               1.208351471E+2, 2.416702941E+1, 1.208351471E+1)

        αb = (0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0,
              0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5,
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)

        αcx = (9.708656934E-2, 3.388842389E-1, 9.521989787E-1, 9.991207584E-1,
               2.718756932E-1, 6.448237024E-1, 8.774682468E-1, 9.733647563E-1,
               1.000000000E+0, 1.000000000E+0, 3.258937687E-2, 1.201343165E-1,
               3.788217835E-1, 9.465373595E-1, 1.000000000E+0, 1.000000000E+0,
               5.237583110E-2, 1.863432759E-1, 5.194585002E-1, 9.730427301E-1,
               1.000000000E+0, 1.000000000E+0, 5.259492508E-3, 2.051913039E-2,
               3.705551033E-1, 7.374287548E-1, 1.000000000E+0, 8.011587805E-2,
               2.860205928E-1, 7.074242692E-1, 9.126395485E-1, 1.000000000E+0,
               2.913266864E-1, 6.665838617E-1, 8.859737757E-1, 1.000000000E+0,
               1.000000000E+0, 2.469890785E-1, 6.606427508E-1, 8.989127008E-1,
               9.758042548E-1, 1.000000000E+0, 5.275352775E-2, 1.875617005E-1,
               8.775402567E-1, 9.733985234E-1, 1.000000000E+0, 7.950134708E-1,
               9.369052228E-1, 1.000000000E+0, 1.000000000E+0, 5.712107563E-1,
               8.475597267E-1, 1.000000000E+0, 1.000000000E+0)

        αcy = (3.591653534E-2, 1.351162568E-1, 8.782924667E-1, 9.676914721E-1,
               1.858711429E-2, 7.036459900E-2, 2.425254119E-1, 6.077516302E-1,
               8.627009787E-1, 1.000000000E+0, 5.051151548E-3, 1.971785504E-2,
               7.447774960E-2, 7.291761215E-1, 9.103435409E-1, 1.000000000E+0,
               1.411109107E-2, 5.391269351E-2, 1.912906150E-1, 8.798157899E-1,
               9.744673328E-1, 1.000000000E+0, 1.399879531E-3, 5.533453441E-3,
               1.223788322E-1, 3.843249481E-1, 9.477681998E-1, 3.413294020E-2,
               1.286673675E-1, 4.286212098E-1, 8.128045141E-1, 1.000000000E+0,
               1.603242403E-2, 6.100836679E-2, 2.137736687E-1, 8.921953914E-1,
               9.803411306E-1, 1.134699969E-2, 4.399485340E-2, 1.639956096E-1,
               5.147423711E-1, 9.755208070E-1, 9.736007110E-3, 3.755817947E-2,
               5.478897552E-1, 8.374532731E-1, 1.000000000E+0, 8.259588761E-2,
               2.785965988E-1, 9.189745589E-1, 9.933738100E-1, 1.201124378E-1,
               3.787678741E-1, 9.465251935E-1, 1.000000000E+0)

        for i, v in enumerate(zip(λnx, λny, αb, αcx, αcy)):

            λnxi, λnyi, αbi, αcxi, αcyi = v

            with self.subTest(f'{i} α_cx'):
                α_c = S6.s6_3_3_α_c(λ_n=λnxi, α_b=αbi)
                delta = αcxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=α_c['α_c'], second=αcxi,
                                       delta=delta)

            with self.subTest(f'{i} α_cy'):
                α_c = S6.s6_3_3_α_c(λ_n=λnyi, α_b=αbi)
                delta = αcyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=α_c['α_c'], second=αcyi,
                                       delta=delta)

    def test_s6_3_3_N_c(self):
        """
        Test the s6_3_3_N_c method against values calculated in MS Excel
        """

        An = (1.890000000E-3, 1.890000000E-3, 1.890000000E-3, 1.890000000E-3,
              5.790000000E-2, 5.790000000E-2, 5.790000000E-2, 5.790000000E-2,
              5.790000000E-2, 5.790000000E-2, 1.170000000E-3, 1.170000000E-3,
              1.170000000E-3, 1.170000000E-3, 1.170000000E-3, 1.170000000E-3,
              2.790000000E-3, 2.790000000E-3, 2.790000000E-3, 2.790000000E-3,
              2.790000000E-3, 2.790000000E-3, 1.430000000E-4, 1.430000000E-4,
              1.430000000E-4, 1.430000000E-4, 1.430000000E-4, 2.510000000E-2,
              2.510000000E-2, 2.510000000E-2, 2.510000000E-2, 2.510000000E-2,
              7.030000000E-3, 7.030000000E-3, 7.030000000E-3, 7.030000000E-3,
              7.030000000E-3, 1.600000000E-2, 1.600000000E-2, 1.600000000E-2,
              1.600000000E-2, 1.600000000E-2, 7.540000000E-4, 7.540000000E-4,
              7.540000000E-4, 7.540000000E-4, 7.540000000E-4, 1.100000000E-2,
              1.100000000E-2, 1.100000000E-2, 1.100000000E-2, 1.300000000E-2,
              1.300000000E-2, 1.300000000E-2, 1.300000000E-2)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.824,
              0.824, 0.824, 0.824, 0.824, 0.824, 0.958, 0.958, 0.958, 0.958,
              0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        rx = (4.110000000E-2, 4.110000000E-2, 4.110000000E-2, 4.110000000E-2,
              5.150000000E-1, 5.150000000E-1, 5.150000000E-1, 5.150000000E-1,
              5.150000000E-1, 5.150000000E-1, 4.250000000E-2, 4.250000000E-2,
              4.250000000E-2, 4.250000000E-2, 4.250000000E-2, 4.250000000E-2,
              5.870000000E-2, 5.870000000E-2, 5.870000000E-2, 5.870000000E-2,
              5.870000000E-2, 5.870000000E-2, 9.220000000E-3, 9.220000000E-3,
              9.220000000E-3, 9.220000000E-3, 9.220000000E-3, 1.390000000E-1,
              1.390000000E-1, 1.390000000E-1, 1.390000000E-1, 1.390000000E-1,
              1.470000000E-1, 1.470000000E-1, 1.470000000E-1, 1.470000000E-1,
              1.470000000E-1, 2.490000000E-1, 2.490000000E-1, 2.490000000E-1,
              2.490000000E-1, 2.490000000E-1, 3.010000000E-2, 3.010000000E-2,
              3.010000000E-2, 3.010000000E-2, 3.010000000E-2, 2.100000000E-1,
              2.100000000E-1, 2.100000000E-1, 2.100000000E-1, 1.271003036E-1,
              1.271003036E-1, 1.271003036E-1, 1.271003036E-1)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        ry = (2.450000000E-2, 2.450000000E-2, 2.450000000E-2, 2.450000000E-2,
              1.200000000E-1, 1.200000000E-1, 1.200000000E-1, 1.200000000E-1,
              1.200000000E-1, 1.200000000E-1, 1.640000000E-2, 1.640000000E-2,
              1.640000000E-2, 1.640000000E-2, 1.640000000E-2, 1.640000000E-2,
              2.980000000E-2, 2.980000000E-2, 2.980000000E-2, 2.980000000E-2,
              2.980000000E-2, 2.980000000E-2, 4.730000000E-3, 4.730000000E-3,
              4.730000000E-3, 4.730000000E-3, 4.730000000E-3, 8.930000000E-2,
              8.930000000E-2, 8.930000000E-2, 8.930000000E-2, 8.930000000E-2,
              3.040000000E-2, 3.040000000E-2, 3.040000000E-2, 3.040000000E-2,
              3.040000000E-2, 4.960000000E-2, 4.960000000E-2, 4.960000000E-2,
              4.960000000E-2, 4.960000000E-2, 1.260000000E-2, 1.260000000E-2,
              1.260000000E-2, 1.260000000E-2, 1.260000000E-2, 3.697900000E-2,
              3.697900000E-2, 3.697900000E-2, 3.697900000E-2, 4.532808300E-2,
              4.532808300E-2, 4.532808300E-2, 4.532808300E-2)

        fy = (3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.000E+8,
              3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8,
              3.000E+8)

        fref = (2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8, 2.500E+8,
                2.500E+8)

        αb = (0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0,
              0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5,
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)

        Ncx = (5.871795713E+4, 2.049571877E+5, 5.758899423E+5, 6.042682347E+5,
               3.689201993E+6, 8.749899119E+6, 1.190675624E+7, 1.320801855E+7,
               1.356944400E+7, 1.356944400E+7, 1.005400526E+4, 3.706210939E+4,
               1.168686416E+5, 2.920120760E+5, 3.085056000E+5, 3.085056000E+5,
               4.479717404E+4, 1.593798511E+5, 4.442941019E+5, 8.322457824E+5,
               8.553024000E+5, 8.553024000E+5, 2.406743772E+2, 9.389554064E+2,
               1.695660153E+4, 3.374473982E+4, 4.576000000E+4, 5.630543909E+5,
               2.010152726E+6, 4.971777764E+6, 6.414030747E+6, 7.028000000E+6,
               5.734474495E+5, 1.312103673E+6, 1.743950780E+6, 1.968400000E+6,
               1.968400000E+6, 1.051185518E+6, 2.811695548E+6, 3.825772455E+6,
               4.153022908E+6, 4.256000000E+6, 1.272837118E+4, 4.525488709E+4,
               2.117329131E+5, 2.348615957E+5, 2.412800000E+5, 2.623544454E+6,
               3.091787235E+6, 3.300000000E+6, 3.300000000E+6, 2.227721950E+6,
               3.305482934E+6, 3.900000000E+6, 3.900000000E+6)

        Ncy = (2.172232058E+4, 8.171831213E+4, 5.311912838E+5, 5.852598023E+5,
               2.522168064E+5, 9.548084858E+5, 3.290934996E+6, 8.246851712E+6,
               1.170637262E+7, 1.356944400E+7, 1.558308539E+3, 6.083068698E+3,
               2.297680283E+4, 2.249549169E+5, 2.808460803E+5, 3.085056000E+5,
               1.206925006E+4, 4.611165615E+4, 1.636113221E+5, 7.525085567E+5,
               8.334642485E+5, 8.553024000E+5, 6.405848735E+1, 2.532108294E+2,
               5.600055361E+3, 1.758670963E+4, 4.336987282E+4, 2.398863037E+5,
               9.042742591E+5, 3.012349862E+6, 5.712390125E+6, 7.028000000E+6,
               3.155822346E+4, 1.200888692E+5, 4.207920895E+5, 1.756197408E+6,
               1.929703481E+6, 4.829283067E+4, 1.872420961E+5, 6.979653144E+5,
               2.190743531E+6, 4.151816554E+6, 2.349103796E+3, 9.062037542E+3,
               1.321948401E+5, 2.020607257E+5, 2.412800000E+5, 2.725664291E+5,
               9.193687761E+5, 3.032616044E+6, 3.278133573E+6, 4.684385075E+5,
               1.477194709E+6, 3.691448255E+6, 3.900000000E+6)

        for i, v in enumerate(zip(An, kf, lex, rx, ley, ry,
                                  fy, fref, αb, Ncx, Ncy)):
            Ani, kfi, lexi, rxi, leyi, ryi, fyi, frefi, αbi, Ncxi, Ncyi = v

            with self.subTest(f'{i} N_cx'):
                N_c = S6.s6_3_3_N_c(A_n=Ani, k_f=kfi, l_e=lexi, r=rxi, f_y=fyi,
                                    f_ref=frefi, α_b=αbi)
                delta = Ncxi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N_c['N_c'], second=Ncxi,
                                       delta=delta)

            with self.subTest(f'{i} N_cy'):
                N_c = S6.s6_3_3_N_c(A_n=Ani, k_f=kfi, l_e=leyi, r=ryi, f_y=fyi,
                                    f_ref=frefi, α_b=αbi)
                delta = Ncyi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N_c['N_c'], second=Ncyi,
                                       delta=delta)

    # end member flexural buckling capacity methods
    # endregion

    # member torsion capacity methods - AS4600
    # region

    def test_f_oxz(self):
        """
        Test the f_oxz method against values calculated in excel.
        """

        An = (0.00189, 0.00189, 0.00189, 0.00189, 0.0579, 0.0579, 0.0579,
              0.0579, 0.0579, 0.0579, 0.00117, 0.00117, 0.00117, 0.00117,
              0.00117, 0.00117, 0.00279, 0.00279, 0.00279, 0.00279, 0.00279,
              0.00279, 0.000143, 0.000143, 0.000143, 0.000143, 0.000143,
              0.0251, 0.0251, 0.0251, 0.0251, 0.0251, 0.00703, 0.00703,
              0.00703, 0.00703, 0.00703, 0.016, 0.016, 0.016, 0.016, 0.016,
              0.000754, 0.000754, 0.000754, 0.000754, 0.000754, 0.011, 0.011,
              0.011, 0.011, 0.013, 0.013, 0.013, 0.013)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        lez = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        rx = (0.0411, 0.0411, 0.0411, 0.0411, 0.515, 0.515, 0.515, 0.515, 0.515,
              0.515, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0587,
              0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922, 0.00922, 0.00922,
              0.00922, 0.00922, 0.139, 0.139, 0.139, 0.139, 0.139, 0.147, 0.147,
              0.147, 0.147, 0.147, 0.249, 0.249, 0.249, 0.249, 0.249, 0.0301,
              0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21, 0.21, 0.21,
              0.1271003036, 0.1271003036, 0.1271003036, 0.1271003036)

        ry = (0.0245, 0.0245, 0.0245, 0.0245, 0.12, 0.12, 0.12, 0.12, 0.12,
              0.12, 0.0164, 0.0164, 0.0164, 0.0164, 0.0164, 0.0164, 0.0298,
              0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473, 0.00473, 0.00473,
              0.00473, 0.00473, 0.0893, 0.0893, 0.0893, 0.0893, 0.0893, 0.0304,
              0.0304, 0.0304, 0.0304, 0.0304, 0.0496, 0.0496, 0.0496, 0.0496,
              0.0496, 0.0126, 0.0126, 0.0126, 0.0126, 0.0126, 0.036979,
              0.036979, 0.036979, 0.036979, 0.0453280830003, 0.0453280830003,
              0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567,
              0.0567, 0, 0, 0, 0, 0, 0.0272, 0.0272, 0.0272, 0.0272, 0.0272,
              0, 0, 0, 0, 0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0.15428504787, 0.15428504787, 0.15428504787,
              0.15428504787, 0, 0, 0, 0)

        J = (3.490000E-8, 3.490000E-8, 3.490000E-8, 3.490000E-8, 2.200000E-5,
             2.200000E-5, 2.200000E-5, 2.200000E-5, 2.200000E-5, 2.200000E-5,
             1.480000E-8, 1.480000E-8, 1.480000E-8, 1.480000E-8, 1.480000E-8,
             1.480000E-8, 8.890000E-8, 8.890000E-8, 8.890000E-8, 8.890000E-8,
             8.890000E-8, 8.890000E-8, 5.150000E-10, 5.150000E-10, 5.150000E-10,
             5.150000E-10, 5.150000E-10, 5.750000E-6, 5.750000E-6, 5.750000E-6,
             5.750000E-6, 5.750000E-6, 4.720000E-7, 4.720000E-7, 4.720000E-7,
             4.720000E-7, 4.720000E-7, 1.560000E-6, 1.560000E-6, 1.560000E-6,
             1.560000E-6, 1.560000E-6, 8.130000E-9, 8.130000E-9, 8.130000E-9,
             8.130000E-9, 8.130000E-9, 9.183880E-7, 9.183880E-7, 9.183880E-7,
             9.183880E-7, 1.584756E-6, 1.584756E-6, 1.584756E-6, 1.584756E-6)

        Iw = (2.300000E-9, 2.300000E-9, 2.300000E-9, 2.300000E-9, 2.800000E-4,
              2.800000E-4, 2.800000E-4, 2.800000E-4, 2.800000E-4, 2.800000E-4,
              0.000000E+0, 0.000000E+0, 0.000000E+0, 0.000000E+0, 0.000000E+0,
              0.000000E+0, 0.000000E+0, 0.000000E+0, 0.000000E+0, 0.000000E+0,
              0.000000E+0, 0.000000E+0, 0.000000E+0, 0.000000E+0, 0.000000E+0,
              0.000000E+0, 0.000000E+0, 4.600000E-6, 4.600000E-6, 4.600000E-6,
              4.600000E-6, 4.600000E-6, 1.510000E-7, 1.510000E-7, 1.510000E-7,
              1.510000E-7, 1.510000E-7, 3.450000E-6, 3.450000E-6, 3.450000E-6,
              3.450000E-6, 3.450000E-6, 1.060000E-10, 1.060000E-10,
              1.060000E-10, 1.060000E-10, 1.060000E-10, 4.029091E-7,
              4.029091E-7, 4.029091E-7, 4.029091E-7, 3.063442E-8,
              3.063442E-8, 3.063442E-8, 3.063442E-8)

        E = (2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11, 2.000000E+11,
             2.000000E+11, 2.000000E+11, 2.000000E+11)

        G = (8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10, 8.000000E+10,
             8.000000E+10, 8.000000E+10, 8.000000E+10)

        expected = (3.334367E+7, 1.333747E+8, 1.694450E+9, 4.842082E+9,
                    8.180206E+7, 1.300432E+8, 1.940512E+8, 4.500833E+8,
                    1.474212E+9, 3.424632E+10, 8.913486E+6, 3.565395E+7,
                    1.426158E+8, 4.876450E+8, 4.876450E+8, 4.876450E+8,
                    1.700380E+7, 6.801519E+7, 2.720608E+8, 5.882009E+8,
                    5.882009E+8, 5.882009E+8, 1.677999E+6, 6.711994E+6,
                    1.677999E+8, 6.711994E+8, 2.683073E+9, 2.383633E+7,
                    9.534531E+7, 3.813813E+8, 1.201549E+9, 1.392469E+10,
                    9.660210E+7, 2.022911E+8, 2.682283E+8, 1.844867E+9,
                    6.760469E+9, 7.649067E+7, 1.375102E+8, 1.870315E+8,
                    3.851167E+8, 6.723843E+9, 1.760873E+7, 6.710846E+7,
                    5.372085E+8, 1.023092E+9, 1.527083E+10, 1.068580E+8,
                    1.381701E+8, 1.140157E+9, 4.271364E+9, 3.075118E+8,
                    5.221621E+8, 7.699367E+8, 1.516359E+9)

        for i, v in enumerate(zip(An, lex, lez, rx, ry, xo, yo, J, Iw, E, G,
                                  expected)):
            Ani, lexi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, expi = v

            with self.subTest(f'{i}'):
                f_oxz = S6.f_oxz(A_n=Ani, l_ex=lexi, l_ez=lezi, r_x=rxi,
                                 r_y=ryi, x_o=xoi, y_o=yoi, J=Ji, I_w=Iwi, E=Ei,
                                 G=Gi)['f_oxz']
                delta = expi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=f_oxz, second=expi, delta=delta)

    def test_f_oc_double_symmetric(self):
        """
        Test the f_oc_double_symmetric method against values calculated in Excel
        """

        An = (0.0579, 0.0579, 0.0579, 0.0579, 0.0579, 0.0579, 0.0251, 0.0251,
              0.0251, 0.0251, 0.0251, 0.016, 0.016, 0.016, 0.016, 0.016,
              0.00189, 0.00189, 0.00189, 0.00189)

        kf = (0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1)

        lex = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10,
               5, 1, 0.5)

        ley = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10,
               5, 1, 0.5)

        lez = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10,
               5, 1, 0.5)

        rx = (0.515, 0.515, 0.515, 0.515, 0.515, 0.515, 0.139, 0.139, 0.139,
              0.139, 0.139, 0.249, 0.249, 0.249, 0.249, 0.249, 0.0411, 0.0411,
              0.0411, 0.0411)

        ry = (0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.0893, 0.0893, 0.0893,
              0.0893, 0.0893, 0.0496, 0.0496, 0.0496, 0.0496, 0.0496, 0.0245,
              0.0245, 0.0245, 0.0245)
        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        J = (2.2000000E-5, 2.2000000E-5, 2.2000000E-5, 2.2000000E-5,
             2.2000000E-5, 2.2000000E-5, 5.7500000E-6, 5.7500000E-6,
             5.7500000E-6, 5.7500000E-6, 5.7500000E-6, 1.5600000E-6,
             1.5600000E-6, 1.5600000E-6, 1.5600000E-6, 1.5600000E-6,
             3.4900000E-8, 3.4900000E-8, 3.4900000E-8, 3.4900000E-8)

        Iw = (2.8000000E-4, 2.8000000E-4, 2.8000000E-4, 2.8000000E-4,
              2.8000000E-4, 2.8000000E-4, 4.6000000E-6, 4.6000000E-6,
              4.6000000E-6, 4.6000000E-6, 4.6000000E-6, 3.4500000E-6,
              3.4500000E-6, 3.4500000E-6, 3.4500000E-6, 3.4500000E-6,
              2.3000000E-9, 2.3000000E-9, 2.3000000E-9, 2.3000000E-9)

        fy = (2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8)

        E = (2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11)

        G = (8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10)

        expected = (8.1802057E+7, 1.3004316E+8, 1.9405119E+8, 4.5008333E+8,
                    1.4742119E+9, 3.4246325E+10, 2.3836328E+7, 9.5345313E+7,
                    3.8138125E+8, 1.2015491E+9, 1.3924686E+10, 7.6490668E+7,
                    1.3751020E+8, 1.8703149E+8, 3.8511667E+8, 6.7238425E+9,
                    3.3343669E+7, 1.3337468E+8, 1.6944496E+9, 4.8420817E+9)

        for i, v in \
                enumerate(
                    zip(An, lex, lez, rx, ry, xo, yo, J, Iw, E, G, expected)):
            Ani, lexi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, expi = v

            with self.subTest(f'{i} f_oc'):
                f_oc = S6.f_oc_double_symmetric(A_n=Ani, l_ex=lexi, l_ez=lezi,
                                                r_x=rxi, r_y=ryi, x_o=xoi,
                                                y_o=yoi, J=Ji, I_w=Iwi, E=Ei,
                                                G=Gi)['f_oc']
                delta = expi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=f_oc, second=expi,
                                       delta=delta)

    def test_f_oc_single_symmetric(self):
        """
        Test the f_oc_single_symmetric method against valus calculated in Excel.
        """

        An = (0.00279, 0.00279, 0.00279, 0.00279, 0.00279, 0.00279, 0.000143,
              0.000143, 0.000143, 0.000143, 0.000143, 0.00703, 0.00703, 0.00703,
              0.00703, 0.00703, 0.000754, 0.000754, 0.000754, 0.000754,
              0.000754, 0.011, 0.011, 0.011, 0.011, 0.013, 0.013, 0.013,
              0.013)

        kf = (0.958, 0.958, 0.958, 0.958, 0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        lex = (20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 20, 10, 5, 1, 0.5,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        ley = (20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 20, 10, 5, 1, 0.5,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        lez = (20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 20, 10, 5, 1, 0.5,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        rx = (0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922, 0.00922,
              0.00922, 0.00922, 0.00922, 0.147, 0.147, 0.147, 0.147, 0.147,
              0.0301, 0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21, 0.21, 0.21,
              0.1271003036, 0.1271003036, 0.1271003036, 0.1271003036)

        ry = (0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473, 0.00473,
              0.00473, 0.00473, 0.00473, 0.0304, 0.0304, 0.0304, 0.0304, 0.0304,
              0.0126, 0.0126, 0.0126, 0.0126, 0.0126, 0.036979, 0.036979,
              0.036979, 0.036979, 0.0453280830003, 0.0453280830003,
              0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567,
              0.0567, 0.0272, 0.0272, 0.0272, 0.0272, 0.0272, 0, 0, 0, 0,
              0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0.15428504787, 0.15428504787, 0.15428504787, 0.15428504787, 0,
              0, 0, 0)

        J = (8.8900000E-8, 8.8900000E-8, 8.8900000E-8, 8.8900000E-8,
             8.8900000E-8, 8.8900000E-8, 5.1500000E-10, 5.1500000E-10,
             5.1500000E-10, 5.1500000E-10, 5.1500000E-10, 4.7200000E-7,
             4.7200000E-7, 4.7200000E-7, 4.7200000E-7, 4.7200000E-7,
             8.1300000E-9, 8.1300000E-9, 8.1300000E-9, 8.1300000E-9,
             8.1300000E-9, 9.1838801E-7, 9.1838801E-7, 9.1838801E-7,
             9.1838801E-7, 1.5847556E-6, 1.5847556E-6, 1.5847556E-6,
             1.5847556E-6)

        Iw = (0.0000000E+0, 0.0000000E+0, 0.0000000E+0, 0.0000000E+0,
              0.0000000E+0, 0.0000000E+0, 0.0000000E+0, 0.0000000E+0,
              0.0000000E+0, 0.0000000E+0, 0.0000000E+0, 1.5100000E-7,
              1.5100000E-7, 1.5100000E-7, 1.5100000E-7, 1.5100000E-7,
              1.0600000E-10, 1.0600000E-10, 1.0600000E-10, 1.0600000E-10,
              1.0600000E-10, 4.0290907E-7, 4.0290907E-7, 4.0290907E-7,
              4.0290907E-7, 3.0634424E-8, 3.0634424E-8, 3.0634424E-8,
              3.0634424E-8)

        fy = (3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8,
              3.2000000E+8, 3.0000000E+8, 3.0000000E+8, 3.0000000E+8,
              3.0000000E+8, 3.0000000E+8, 3.0000000E+8, 3.0000000E+8,
              3.0000000E+8)

        E = (2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11)

        G = (8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10)

        Axis = (['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'],
                ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'],
                ['x'], ['x'], ['x'], ['y'], ['y'], ['y'], ['y'], ['x'], ['x'],
                ['x'], ['x'])

        expected = [1.7003799E+7, 6.8015194E+7, 2.7206078E+8, 5.8820091E+8,
                    5.8820091E+8, 5.8820091E+8, 1.6779986E+6, 6.7119942E+6,
                    1.6779986E+8, 6.7119942E+8, 2.6830732E+9, 9.6602101E+7,
                    2.0229106E+8, 2.6822829E+8, 1.8448670E+9, 6.7604689E+9,
                    1.7608728E+7, 6.7108462E+7, 5.3720847E+8, 1.0230922E+9,
                    1.5270832E+10, 2.4490131E+7, 7.6018511E+7, 9.5869853E+8,
                    3.6366609E+9, 3.0751177E+8, 5.2216213E+8, 7.6993666E+8,
                    1.5163594E+9]

        for i, v in enumerate(zip(An, lex, ley, lez, rx, ry, xo, yo, J, Iw, E,
                                  G, Axis, expected)):
            Ani, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, Axi, \
            expi = v

            with self.subTest(f'{i} f_oc single symmetric'):
                delta = expi / Test_UT_S6.delta_p
                f_oc = S6.f_oc_single_symmetric(A_n=Ani, l_ex=lexi, l_ey=leyi,
                                                l_ez=lezi, r_x=rxi, r_y=ryi,
                                                x_o=xoi, y_o=yoi, J=Ji, I_w=Iwi,
                                                E=Ei, G=Gi,
                                                sym=Symmetry(Axi))['f_oc']
                self.assertAlmostEqual(first=f_oc, second=expi, delta=delta)

    def test_f_oc_point_symmetric(self):
        """
        Test the f_oc_point_symmetric method against values calculated in Excel.
        """

        An = (0.00189, 0.00189, 0.00189, 0.00189, 0.0579, 0.0579, 0.0579,
              0.0579, 0.0579, 0.0579, 0.00279, 0.00279, 0.00279, 0.00279,
              0.00279, 0.00279, 0.000143, 0.000143, 0.000143, 0.000143,
              0.000143, 0.0251, 0.0251, 0.0251, 0.0251, 0.0251, 0.00703,
              0.00703, 0.00703, 0.00703, 0.00703, 0.016, 0.016, 0.016, 0.016,
              0.016, 0.000754, 0.000754, 0.000754, 0.000754, 0.000754, 0.011,
              0.011, 0.011, 0.011, 0.013, 0.013, 0.013, 0.013)

        lez = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 10,
               5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 40, 20, 10,
               5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        rx = (0.0411, 0.0411, 0.0411, 0.0411, 0.515, 0.515, 0.515, 0.515, 0.515,
              0.515, 0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922,
              0.00922, 0.00922, 0.00922, 0.00922, 0.139, 0.139, 0.139, 0.139,
              0.139, 0.147, 0.147, 0.147, 0.147, 0.147, 0.249, 0.249, 0.249,
              0.249, 0.249, 0.0301, 0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21,
              0.21, 0.21, 0.1271003036, 0.1271003036, 0.1271003036,
              0.1271003036)

        ry = (0.0245, 0.0245, 0.0245, 0.0245, 0.12, 0.12, 0.12, 0.12, 0.12,
              0.12, 0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473,
              0.00473, 0.00473, 0.00473, 0.00473, 0.0893, 0.0893, 0.0893,
              0.0893, 0.0893, 0.0304, 0.0304, 0.0304, 0.0304, 0.0304, 0.0496,
              0.0496, 0.0496, 0.0496, 0.0496, 0.0126, 0.0126, 0.0126, 0.0126,
              0.0126, 0.036979, 0.036979, 0.036979, 0.036979, 0.0453280830003,
              0.0453280830003, 0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567, 0.0567, 0, 0, 0, 0, 0,
              0.0272, 0.0272, 0.0272, 0.0272, 0.0272, 0, 0, 0, 0,
              0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0.15428504787, 0.15428504787, 0.15428504787, 0.15428504787,
              0, 0, 0, 0)

        J = (0.0000000349, 0.0000000349, 0.0000000349, 0.0000000349, 0.000022,
             0.000022, 0.000022, 0.000022, 0.000022, 0.000022, 0.0000000889,
             0.0000000889, 0.0000000889, 0.0000000889, 0.0000000889,
             0.0000000889, 0.000000000515, 0.000000000515, 0.000000000515,
             0.000000000515, 0.000000000515, 0.00000575, 0.00000575, 0.00000575,
             0.00000575, 0.00000575, 0.000000472, 0.000000472, 0.000000472,
             0.000000472, 0.000000472, 0.00000156, 0.00000156, 0.00000156,
             0.00000156, 0.00000156, 0.00000000813, 0.00000000813,
             0.00000000813, 0.00000000813, 0.00000000813, 0.00000091838800792,
             0.00000091838800792, 0.00000091838800792, 0.00000091838800792,
             0.0000015847556188, 0.0000015847556188, 0.0000015847556188,
             0.0000015847556188)

        Iw = (0.0000000023, 0.0000000023, 0.0000000023, 0.0000000023, 0.00028,
              0.00028, 0.00028, 0.00028, 0.00028, 0.00028, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0.0000046, 0.0000046, 0.0000046, 0.0000046, 0.0000046,
              0.000000151, 0.000000151, 0.000000151, 0.000000151, 0.000000151,
              0.00000345, 0.00000345, 0.00000345, 0.00000345, 0.00000345,
              0.000000000106, 0.000000000106, 0.000000000106, 0.000000000106,
              0.000000000106, 0.00000040290907437, 0.00000040290907437,
              0.00000040290907437, 0.00000040290907437, 3.06344239388E-08,
              3.06344239388E-08, 3.06344239388E-08, 3.06344239388E-08)

        E = (200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000)

        G = (80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000)

        expected = (655731018.07307, 687207339.199749, 1694449615.25344,
                    4842081727.92124, 114041152.049309, 130043160.384776,
                    194051193.726641, 450083327.094101, 1474211860.56394,
                    34246324931.5989, 588200912.990041, 588200912.990041,
                    588200912.990041, 588200912.990041, 588200912.990041,
                    588200912.990041, 2683073199.07552, 2683073199.07552,
                    2683073199.07552, 2683073199.07552, 2683073199.07552,
                    679701655.557604, 704551531.690738, 803951036.223273,
                    1201549054.35341, 13924685634.5179, 212725331.257086,
                    225075368.944878, 274475519.696047, 1855280343.73346,
                    6795295418.85039, 125129871.710703, 137510195.666545,
                    187031491.489911, 385116674.783376, 6723842540.17425,
                    479535455.10111, 484148653.743465, 631771010.298818,
                    1093090874.5343, 15855326530.0696, 106858002.989415,
                    138170080.303502, 1140156554.35429, 4271364285.76301,
                    524120011.944884, 531584029.590048, 770432594.235289,
                    1516834358.75167)

        for i, v in \
                enumerate(zip(An, lez, rx, ry, xo, yo, J, Iw, E, G, expected)):
            Ani, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, expi = v

            with self.subTest(f'{i} f_oc point symmetric'):
                foc = S6.f_oc_point_symmetric(A_n=Ani, l_ez=lezi, r_x=rxi,
                                              r_y=ryi, x_o=xoi, y_o=yoi, J=Ji,
                                              I_w=Iwi, E=Ei, G=Gi)['f_oc']
                delta = expi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=foc, second=expi, delta=delta)

    def test_f_oc_unsymmetric(self):
        """
        Testing the f_oc_unsymmetric function against valuse calculated from
        Wolfram Alpha and MS Excel.
        """

        # the following tests are based on the coefficients r_o, a, b, c & d
        # being correct.

        # test solver

        # region

        with self.subTest('Test 1'):
            E = 200e9
            G = 80e9

            A_n = 0.01
            l_ex = 1
            l_ey = 1
            l_ez = 1
            r_x = 0.05
            r_y = 0.05
            x_o = 0.025
            y_o = 0.075
            J = 1
            I_w = 1

            f_oc = S6.f_oc_unsymmetric(A_n=A_n, l_ex=l_ex, l_ey=l_ey, l_ez=l_ez,
                                       r_x=r_x, r_y=r_y, x_o=x_o, y_o=y_o, J=J,
                                       I_w=I_w, E=E, G=G)
            expected = 4932891193.  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(first=f_oc['f_oc'], second=expected,
                                   msg="f_oc was incorrectly calculated. " +
                                       "Expected was: " + str(expected) +
                                       " actual was: " + str(f_oc["f_oc"]),
                                   delta=delta_val)

        with self.subTest('Test 2'):
            x_o = 0
            y_o = 0

            f_oc = S6.f_oc_unsymmetric(A_n=A_n, l_ex=l_ex, l_ey=l_ey, l_ez=l_ez,
                                       r_x=r_x, r_y=r_y, x_o=x_o, y_o=y_o, J=J,
                                       I_w=I_w, E=E, G=G)
            expected = 4.9348e9  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(first=f_oc['f_oc'], second=expected,
                                   msg="f_oc was incorrectly calculated. " +
                                       "Expected was: " + str(expected) +
                                       " actual was: " + str(f_oc["f_oc"]),
                                   delta=delta_val)

        with self.subTest('Test 3'):
            I_w = 0.1
            J = 0.1

            f_oc = S6.f_oc_unsymmetric(A_n=A_n, l_ex=l_ex, l_ey=l_ey, l_ez=l_ez,
                                       r_x=r_x, r_y=r_y, x_o=x_o, y_o=y_o, J=J,
                                       I_w=I_w, E=E, G=G)
            expected = 4934802200.  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(first=f_oc['f_oc'], second=expected,
                                   msg="f_oc was incorrectly calculated. " +
                                       "Expected was: " + str(expected) +
                                       " actual was: " + str(f_oc["f_oc"]),
                                   delta=delta_val)

        with self.subTest('Test 4 (200x13EA)'):
            A_n = 5090 / 1000000
            r_x = 78.3 / 1000
            r_y = 39.8 / 1000
            x_o = 0
            y_o = 0
            J = 3.04 * 1e-7
            I_w = 0

            f_oc = S6.f_oc_unsymmetric(A_n=A_n, l_ex=l_ex, l_ey=l_ey, l_ez=l_ez,
                                       r_x=r_x, r_y=r_y, x_o=x_o, y_o=y_o, J=J,
                                       I_w=I_w, E=E, G=G)
            expected = 6.1931813648690e8  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(first=f_oc['f_oc'], second=expected,
                                   msg="f_oc was incorrectly calculated. " +
                                       "Expected was: " + str(expected) +
                                       " actual was: " + str(f_oc["f_oc"]),
                                   delta=delta_val)

        with self.subTest('Test 5 (100x6EA)'):
            A_n = 1170 / 1000000
            r_x = 39.1 / 1000
            r_y = 19.8 / 1000
            x_o = 0
            y_o = 0
            J = 1.48 * 1e-8
            I_w = 0

            f_oc = S6.f_oc_unsymmetric(A_n=A_n, l_ex=l_ex, l_ey=l_ey, l_ez=l_ez,
                                       r_x=r_x, r_y=r_y, x_o=x_o, y_o=y_o, J=J,
                                       I_w=I_w, E=E, G=G)

            expected = 5.2683229401870e8  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(first=f_oc['f_oc'], second=expected,
                                   msg="f_oc was incorrectly calculated. " +
                                       "Expected was: " + str(expected) +
                                       " actual was: " + str(f_oc["f_oc"]),
                                   delta=delta_val)

        with self.subTest('Test 6 (50x3EA)'):
            A_n = 295 / 1000000
            r_x = 19.3 / 1000
            r_y = 9.90 / 1000
            x_o = 0
            y_o = 0
            J = 1.01 * 1e-9
            I_w = 0

            f_oc = S6.f_oc_unsymmetric(A_n=A_n, l_ex=l_ex, l_ey=l_ey, l_ez=l_ez,
                                       r_x=r_x, r_y=r_y, x_o=x_o, y_o=y_o, J=J,
                                       I_w=I_w, E=E, G=G)
            expected = 1.9346398547015e8  # calculated at wolfram from coefficients
            delta_val = expected / Test_UT_S6.delta_p

            self.assertAlmostEqual(first=f_oc['f_oc'], second=expected,
                                   msg="f_oc was incorrectly calculated. " +
                                       "Expected was: " + str(expected) +
                                       " actual was: " + str(f_oc["f_oc"]),
                                   delta=delta_val)

        # test coefficients
        # following values calculated in excel. f_oc calculated by goal seek.

        An = (0.00189, 0.00189, 0.00189, 0.00189, 0.0579, 0.0579, 0.0579,
              0.0579, 0.0579, 0.0579, 0.00117, 0.00117, 0.00117, 0.00117,
              0.00117, 0.00117, 0.00279, 0.00279, 0.00279, 0.00279, 0.00279,
              0.00279, 0.000143, 0.000143, 0.000143, 0.000143, 0.000143, 0.0251,
              0.0251, 0.0251, 0.0251, 0.0251, 0.00703, 0.00703, 0.00703,
              0.00703, 0.00703, 0.016, 0.016, 0.016, 0.016, 0.016, 0.000754,
              0.000754, 0.000754, 0.000754, 0.000754, 0.011, 0.011, 0.011,
              0.011, 0.013, 0.013, 0.013, 0.013)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        lez = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        rx = (0.0411, 0.0411, 0.0411, 0.0411, 0.515, 0.515, 0.515, 0.515, 0.515,
              0.515, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0587,
              0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922, 0.00922, 0.00922,
              0.00922, 0.00922, 0.139, 0.139, 0.139, 0.139, 0.139, 0.147, 0.147,
              0.147, 0.147, 0.147, 0.249, 0.249, 0.249, 0.249, 0.249, 0.0301,
              0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21, 0.21, 0.21,
              0.1271003036, 0.1271003036, 0.1271003036, 0.1271003036)

        ry = (0.0245, 0.0245, 0.0245, 0.0245, 0.12, 0.12, 0.12, 0.12, 0.12,
              0.12, 0.0164, 0.0164, 0.0164, 0.0164, 0.0164, 0.0164, 0.0298,
              0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473, 0.00473, 0.00473,
              0.00473, 0.00473, 0.0893, 0.0893, 0.0893, 0.0893, 0.0893, 0.0304,
              0.0304, 0.0304, 0.0304, 0.0304, 0.0496, 0.0496, 0.0496, 0.0496,
              0.0496, 0.0126, 0.0126, 0.0126, 0.0126, 0.0126, 0.036979,
              0.036979, 0.036979, 0.036979, 0.0453280830003, 0.0453280830003,
              0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567,
              0.0567, 0, 0, 0, 0, 0, 0.0272, 0.0272, 0.0272, 0.0272, 0.0272, 0,
              0, 0, 0, 0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0.15428504787, 0.15428504787, 0.15428504787,
              0.15428504787, 0, 0, 0, 0)

        J = (0.0000000349, 0.0000000349, 0.0000000349, 0.0000000349, 0.000022,
             0.000022, 0.000022, 0.000022, 0.000022, 0.000022, 0.0000000148,
             0.0000000148, 0.0000000148, 0.0000000148, 0.0000000148,
             0.0000000148, 0.0000000889, 0.0000000889, 0.0000000889,
             0.0000000889, 0.0000000889, 0.0000000889, 0.000000000515,
             0.000000000515, 0.000000000515, 0.000000000515, 0.000000000515,
             0.00000575, 0.00000575, 0.00000575, 0.00000575, 0.00000575,
             0.000000472, 0.000000472, 0.000000472, 0.000000472, 0.000000472,
             0.00000156, 0.00000156, 0.00000156, 0.00000156, 0.00000156,
             0.00000000813, 0.00000000813, 0.00000000813, 0.00000000813,
             0.00000000813, 0.00000091838800792, 0.00000091838800792,
             0.00000091838800792, 0.00000091838800792, 0.0000015847556188,
             0.0000015847556188, 0.0000015847556188, 0.0000015847556188)

        Iw = (0.0000000023, 0.0000000023, 0.0000000023, 0.0000000023, 0.00028,
              0.00028, 0.00028, 0.00028, 0.00028, 0.00028, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0000046, 0.0000046, 0.0000046,
              0.0000046, 0.0000046, 0.000000151, 0.000000151, 0.000000151,
              0.000000151, 0.000000151, 0.00000345, 0.00000345, 0.00000345,
              0.00000345, 0.00000345, 0.000000000106, 0.000000000106,
              0.000000000106, 0.000000000106, 0.000000000106,
              0.00000040290907437, 0.00000040290907437, 0.00000040290907437,
              0.00000040290907437, 3.06344239388E-08, 3.06344239388E-08,
              3.06344239388E-08, 3.06344239388E-08)

        E = (200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000)

        G = (80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000)

        aexp = (2.289460000E-3, 2.289460000E-3, 2.289460000E-3, 2.289460000E-3,
                2.796250000E-1, 2.796250000E-1, 2.796250000E-1, 2.796250000E-1,
                2.796250000E-1, 2.796250000E-1, 2.075210000E-3, 2.075210000E-3,
                2.075210000E-3, 2.075210000E-3, 2.075210000E-3, 2.075210000E-3,
                4.333730000E-3, 4.333730000E-3, 4.333730000E-3, 4.333730000E-3,
                4.333730000E-3, 4.333730000E-3, 1.073813000E-4, 1.073813000E-4,
                1.073813000E-4, 1.073813000E-4, 1.073813000E-4, 2.729549000E-2,
                2.729549000E-2, 2.729549000E-2, 2.729549000E-2, 2.729549000E-2,
                2.574805000E-2, 2.574805000E-2, 2.574805000E-2, 2.574805000E-2,
                2.574805000E-2, 6.446116000E-2, 6.446116000E-2, 6.446116000E-2,
                6.446116000E-2, 6.446116000E-2, 1.804610000E-3, 1.804610000E-3,
                1.804610000E-3, 1.804610000E-3, 1.804610000E-3, 6.927132244E-2,
                6.927132244E-2, 6.927132244E-2, 6.927132244E-2, 1.869582801E-2,
                1.869582801E-2, 1.869582801E-2, 1.869582801E-2)

        bexp = (1.604735508E+6, 1.987196001E+6, 1.422593178E+7, 5.247198108E+7,
                5.600456202E+7, 1.328265382E+8, 4.401144431E+8, 1.669266062E+9,
                6.585872540E+9, 1.639172798E+11, 1.033217521E+6, 1.096972646E+6,
                1.351993150E+6, 9.512649261E+6, 3.501469961E+7, 8.510803107E+8,
                2.641785527E+6, 2.919830281E+6, 4.032009297E+6, 3.962173779E+7,
                1.508396393E+8, 3.709812489E+9, 2.883394959E+5, 2.890223191E+5,
                3.108726636E+5, 3.791549903E+5, 2.564189442E+6, 1.947195066E+7,
                2.290772294E+7, 3.665081210E+7, 9.162316871E+7, 1.850738580E+9,
                8.325698680E+6, 1.718899671E+7, 5.264218884E+7, 1.187144337E+9,
                4.732463550E+9, 1.319233997E+7, 2.936935989E+7, 9.407743955E+7,
                3.529097582E+8, 8.635543955E+9, 9.009847523E+5, 1.016140601E+6,
                4.701127753E+6, 1.621671260E+7, 3.847154278E+8, 4.885135982E+7,
                1.753678828E+8, 4.223896617E+9, 1.687554891E+10, 1.649902835E+7,
                3.673908661E+7, 6.844209508E+8, 2.708426776E+9)

        cexp = (6.875008417E+13, 2.988811935E+14, 2.657671530E+16,
                3.451154294E+17, 2.851784526E+15, 1.416982762E+16,
                1.008823427E+17, 1.110777886E+18, 1.575908779E+19,
                9.446758189E+21, 1.038784066E+13, 4.184597322E+13,
                1.720976623E+14, 8.073457104E+15, 7.943152275E+16,
                3.969594353E+19, 5.483832395E+13, 2.232284709E+14,
                9.549166844E+14, 7.347515789E+16, 9.139286414E+17,
                5.188706239E+20, 6.107678425E+11, 2.444026260E+12,
                6.186456880E+13, 2.570071788E+14, 1.406430235E+16,
                6.311561230E+14, 2.692799765E+15, 1.346200343E+16,
                9.690088371E+16, 3.686481807E+19, 6.215752118E+14,
                2.777999539E+15, 1.577917722E+16, 4.128222685E+18,
                6.318468142E+19, 6.564212777E+14, 3.059128507E+15,
                1.917160836E+16, 1.876479428E+17, 9.346040604E+19,
                1.828933477E+13, 7.507089430E+13, 3.407616517E+15,
                3.276601806E+16, 1.612759204E+19, 8.271059853E+15,
                6.040281745E+16, 2.336493286E+19, 3.666455118E+20,
                3.763825828E+15, 1.815737154E+16, 2.935588873E+18,
                4.276303779E+19)

        dexp = (5.931084103E+20, 9.945259657E+21, 1.532628913E+25,
                7.007457185E+26, 1.158548121E+22, 2.113780950E+23,
                5.046714833E+24, 1.872860174E+26, 9.815045404E+27,
                1.425037859E+32, 1.197211545E+19, 1.915538472E+20,
                3.064861556E+21, 1.915538472E+24, 3.064861556E+25,
                1.915538472E+28, 1.899484591E+20, 3.039175345E+21,
                4.862680553E+22, 3.039175345E+25, 4.862680553E+26,
                3.039175345E+29, 2.135033945E+17, 3.416054312E+18,
                2.135033945E+21, 3.416054312E+22, 2.135033945E+25,
                4.350721238E+21, 7.215653603E+22, 1.317384334E+24,
                3.150245385E+25, 2.281751237E+29, 2.663697411E+21,
                4.509346764E+22, 8.798512621E+23, 3.717022637E+27,
                2.178281421E+29, 1.872581290E+21, 3.292566561E+22,
                7.165300076E+23, 2.360651903E+25, 2.575948525E+29,
                4.849954296E+19, 7.834578463E+20, 6.389643337E+23,
                1.768858832E+25, 1.603585474E+29, 1.739277702E+23,
                3.598287567E+24, 1.855779461E+28, 1.112367958E+30,
                1.267251486E+23, 2.056477558E+24, 1.862802083E+27,
                5.868001378E+28)

        focexp = (1.184846008E+7, 4.739384033E+7, 1.184846008E+9,
                  4.739384033E+9, 4.441321980E+6, 1.776528792E+7,
                  7.106115169E+7, 2.842446068E+8, 1.136978427E+9,
                  2.842446068E+10, 1.327264400E+6, 5.309057599E+6,
                  2.123623040E+7, 4.876450152E+8, 4.876450152E+8,
                  4.876450152E+8, 4.382301746E+6, 1.752920698E+7,
                  7.011682794E+7, 5.882009130E+8, 5.882009130E+8,
                  5.882009130E+8, 4.416233446E+5, 1.766493378E+6,
                  4.416233446E+7, 1.766493378E+8, 2.683073199E+9,
                  9.838132700E+6, 3.935253080E+7, 1.574101232E+8,
                  6.296404928E+8, 1.392468563E+10, 4.559989573E+6,
                  1.823322128E+7, 7.282205967E+7, 1.711177935E+9,
                  6.500657993E+9, 3.035100745E+6, 1.214040298E+7,
                  4.856161193E+7, 1.942464477E+8, 4.856161193E+9,
                  3.132003516E+6, 1.250631607E+7, 2.918645540E+8,
                  9.024135560E+8, 1.481487541E+10, 2.443191076E+7,
                  7.571964668E+7, 9.573420497E+8, 3.632020679E+9,
                  4.054397676E+7, 1.619583437E+8, 7.698206587E+8,
                  1.516310486E+9)

        for i, v in enumerate(zip(An, lex, ley, lez, rx, ry, xo,
                                  yo, J, Iw, E, G, aexp, bexp,
                                  cexp, dexp, focexp)):
            Ani, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, Ei, Gi, aexpi, \
            bexpi, cexpi, dexpi, focexpi = v

            with self.subTest(f'{i}'):
                f_oc = S6.f_oc_unsymmetric(A_n=Ani, l_ex=lexi, l_ey=leyi,
                                           l_ez=lezi, r_x=rxi, r_y=ryi, x_o=xoi,
                                           y_o=yoi, J=Ji, I_w=Iwi, E=Ei, G=Gi)

                delta_a = aexpi / Test_UT_S6.delta_p
                delta_b = bexpi / Test_UT_S6.delta_p
                delta_c = cexpi / Test_UT_S6.delta_p
                delta_d = dexpi / Test_UT_S6.delta_p
                delta_foc = focexpi / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=f_oc['Intermediate']['a'],
                                       second=aexpi, delta=delta_a)
                self.assertAlmostEqual(first=f_oc['Intermediate']['b'],
                                       second=bexpi, delta=delta_b)
                self.assertAlmostEqual(first=f_oc['Intermediate']['c'],
                                       second=cexpi, delta=delta_c)
                self.assertAlmostEqual(first=f_oc['Intermediate']['d'],
                                       second=dexpi, delta=delta_d)
                self.assertAlmostEqual(first=f_oc['f_oc'],
                                       second=focexpi, delta=delta_foc)

    def test_s6_3_3_N_c_torsion(self):
        """
        Test the s6_3_3_N_c_Torsion method against values calculated in Excel.
        """

        # test double symmetry
        # region

        An = (0.0579, 0.0579, 0.0579, 0.0579, 0.0579, 0.0579, 0.0251, 0.0251,
              0.0251, 0.0251, 0.0251, 0.016, 0.016, 0.016, 0.016, 0.016,
              0.00189, 0.00189, 0.00189, 0.00189)

        kf = (0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1)

        lex = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10,
               5, 1, 0.5)

        ley = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10,
               5, 1, 0.5)

        lez = (80, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 40, 20, 10, 5, 1, 10,
               5, 1, 0.5)

        rx = (0.515, 0.515, 0.515, 0.515, 0.515, 0.515, 0.139, 0.139, 0.139,
              0.139, 0.139, 0.249, 0.249, 0.249, 0.249, 0.249, 0.0411, 0.0411,
              0.0411, 0.0411)

        ry = (0.12, 0.12, 0.12, 0.12, 0.12, 0.12, 0.0893, 0.0893, 0.0893,
              0.0893, 0.0893, 0.0496, 0.0496, 0.0496, 0.0496, 0.0496, 0.0245,
              0.0245, 0.0245, 0.0245)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

        J = (2.2000000E-5, 2.2000000E-5, 2.2000000E-5, 2.2000000E-5,
             2.2000000E-5, 2.2000000E-5, 5.7500000E-6, 5.7500000E-6,
             5.7500000E-6, 5.7500000E-6, 5.7500000E-6, 1.5600000E-6,
             1.5600000E-6, 1.5600000E-6, 1.5600000E-6, 1.5600000E-6,
             3.4900000E-8, 3.4900000E-8, 3.4900000E-8, 3.4900000E-8)

        Iw = (2.8000000E-4, 2.8000000E-4, 2.8000000E-4, 2.8000000E-4,
              2.8000000E-4, 2.8000000E-4, 4.6000000E-6, 4.6000000E-6,
              4.6000000E-6, 4.6000000E-6, 4.6000000E-6, 3.4500000E-6,
              3.4500000E-6, 3.4500000E-6, 3.4500000E-6, 3.4500000E-6,
              2.3000000E-9, 2.3000000E-9, 2.3000000E-9, 2.3000000E-9)

        fy = (2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8)

        E = (2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11)

        G = (8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10)

        Axis = (['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'],
                ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'],
                ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'],
                ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'])

        Ncexp = (2.9551992E+6, 4.6837905E+6, 6.3051556E+6, 8.8899236E+6,
                 1.0652616E+7, 1.1494624E+7, 4.4599665E+5, 1.7839866E+6,
                 4.3933616E+6, 5.4186538E+6, 5.9237338E+6, 8.6670352E+5,
                 1.5427296E+6, 1.9332643E+6, 2.6684634E+6, 3.5550929E+6,
                 4.6977912E+4, 1.8791165E+5, 4.7500953E+5, 5.0005497E+5)

        for i, v in enumerate(zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw,
                                  fy, E, G, Axis, Ncexp)):
            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, \
            Gi, Axi, Ncexpi = v

            with self.subTest(f'{i} N_c_torsion, double symmetry'):
                Nc = S6.s6_3_3_N_c_torsion(A_n=Ani, k_f=kfi, l_ex=lexi,
                                           l_ey=leyi, l_ez=lezi, r_x=rxi,
                                           r_y=ryi, x_o=xoi, y_o=yoi, J=Ji,
                                           I_w=Iwi, f_y=fyi, E=Ei, G=Gi,
                                           sym=Symmetry(Axi))['N_cz']

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

        # test single symmetry
        # region

        An = (0.00279, 0.00279, 0.00279, 0.00279, 0.00279, 0.00279, 0.000143,
              0.000143, 0.000143, 0.000143, 0.000143, 0.00703, 0.00703, 0.00703,
              0.00703, 0.00703, 0.000754, 0.000754, 0.000754, 0.000754,
              0.000754, 0.011, 0.011, 0.011, 0.011, 0.013, 0.013, 0.013, 0.013)

        kf = (0.958, 0.958, 0.958, 0.958, 0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        lex = (20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 20, 10, 5, 1, 0.5,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        ley = (20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 20, 10, 5, 1, 0.5,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        lez = (20, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 20, 10, 5, 1, 0.5,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        rx = (0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922, 0.00922,
              0.00922, 0.00922, 0.00922, 0.147, 0.147, 0.147, 0.147, 0.147,
              0.0301, 0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21, 0.21, 0.21,
              0.1271003036, 0.1271003036, 0.1271003036, 0.1271003036)

        ry = (0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473, 0.00473,
              0.00473, 0.00473, 0.00473, 0.0304, 0.0304, 0.0304, 0.0304, 0.0304,
              0.0126, 0.0126, 0.0126, 0.0126, 0.0126, 0.036979, 0.036979,
              0.036979, 0.036979, 0.0453280830003, 0.0453280830003,
              0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567,
              0.0567, 0.0272, 0.0272, 0.0272, 0.0272, 0.0272, 0, 0, 0, 0,
              0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0.15428504787, 0.15428504787, 0.15428504787, 0.15428504787, 0, 0,
              0, 0)

        J = (8.8900000E-8, 8.8900000E-8, 8.8900000E-8, 8.8900000E-8,
             8.8900000E-8, 8.8900000E-8, 5.1500000E-10, 5.1500000E-10,
             5.1500000E-10, 5.1500000E-10, 5.1500000E-10, 4.7200000E-7,
             4.7200000E-7, 4.7200000E-7, 4.7200000E-7, 4.7200000E-7,
             8.1300000E-9, 8.1300000E-9, 8.1300000E-9, 8.1300000E-9,
             8.1300000E-9, 9.1838801E-7, 9.1838801E-7, 9.1838801E-7,
             9.1838801E-7, 1.5847556E-6, 1.5847556E-6, 1.5847556E-6,
             1.5847556E-6)

        Iw = (0.0000000E+0, 0.0000000E+0, 0.0000000E+0, 0.0000000E+0,
              0.0000000E+0, 0.0000000E+0, 0.0000000E+0, 0.0000000E+0,
              0.0000000E+0, 0.0000000E+0, 0.0000000E+0, 1.5100000E-7,
              1.5100000E-7, 1.5100000E-7, 1.5100000E-7, 1.5100000E-7,
              1.0600000E-10, 1.0600000E-10, 1.0600000E-10, 1.0600000E-10,
              1.0600000E-10, 4.0290907E-7, 4.0290907E-7, 4.0290907E-7,
              4.0290907E-7, 3.0634424E-8, 3.0634424E-8, 3.0634424E-8,
              3.0634424E-8)

        fy = (3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 2.8000000E+8,
              2.8000000E+8, 2.8000000E+8, 2.8000000E+8, 2.8000000E+8,
              3.2000000E+8, 3.2000000E+8, 3.2000000E+8, 3.2000000E+8,
              3.2000000E+8, 3.0000000E+8, 3.0000000E+8, 3.0000000E+8,
              3.0000000E+8, 3.0000000E+8, 3.0000000E+8, 3.0000000E+8,
              3.0000000E+8)

        E = (2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11, 2.0000000E+11, 2.0000000E+11, 2.0000000E+11,
             2.0000000E+11)

        G = (8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10, 8.0000000E+10, 8.0000000E+10, 8.0000000E+10,
             8.0000000E+10)

        Axis = (['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'],
                ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'],
                ['x'], ['x'], ['x'], ['y'], ['y'], ['y'], ['y'], ['x'], ['x'],
                ['x'], ['x'])

        Ncexp = (3.3879281E+4, 1.3551712E+5, 4.4435953E+5, 5.7895888E+5,
                 5.7895888E+5, 5.7895888E+5, 1.7887356E+2, 7.1549422E+2,
                 1.7508767E+4, 3.1859767E+4, 3.7002020E+4, 5.0624462E+5,
                 9.3741242E+5, 1.0808880E+6, 1.5701603E+6, 1.6443857E+6,
                 9.8973252E+3, 3.7719606E+4, 1.5983155E+5, 1.7992248E+5,
                 2.0329710E+5, 2.0081785E+5, 6.2334799E+5, 2.4606585E+6,
                 2.7098031E+6, 2.2036861E+6, 2.6064422E+6, 2.8161555E+6,
                 3.0515531E+6)

        for i, v in enumerate(zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw,
                                  fy, E, G, Axis, Ncexp)):
            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, \
            Gi, Axi, Ncexpi = v

            with self.subTest(f'{i} N_c_torsion, single symmetry'):
                Nc = S6.s6_3_3_N_c_torsion(A_n=Ani, k_f=kfi, l_ex=lexi,
                                           l_ey=leyi, l_ez=lezi, r_x=rxi,
                                           r_y=ryi, x_o=xoi, y_o=yoi, J=Ji,
                                           I_w=Iwi, f_y=fyi, E=Ei, G=Gi,
                                           sym=Symmetry(Axi))['N_cz']

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

        # test point symmetry
        # region

        An = (0.00189, 0.00189, 0.00189, 0.00189, 0.0579, 0.0579, 0.0579,
              0.0579, 0.0579, 0.0579, 0.00279, 0.00279, 0.00279, 0.00279,
              0.00279, 0.00279, 0.000143, 0.000143, 0.000143, 0.000143,
              0.000143, 0.0251, 0.0251, 0.0251, 0.0251, 0.0251, 0.00703,
              0.00703, 0.00703, 0.00703, 0.00703, 0.016, 0.016, 0.016, 0.016,
              0.016, 0.000754, 0.000754, 0.000754, 0.000754, 0.000754, 0.011,
              0.011, 0.011, 0.011, 0.013, 0.013, 0.013, 0.013)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.958,
              0.958, 0.958, 0.958, 0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 0.95, 0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1,
              1, 1, 1, 1, 1, 1)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 10,
               5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 40, 20, 10,
               5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 10,
               5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 40, 20, 10,
               5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        lez = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 10,
               5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 40, 20, 10,
               5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 10, 5, 1, 0.5)

        rx = (0.0411, 0.0411, 0.0411, 0.0411, 0.515, 0.515, 0.515, 0.515, 0.515,
              0.515, 0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922,
              0.00922, 0.00922, 0.00922, 0.00922, 0.139, 0.139, 0.139, 0.139,
              0.139, 0.147, 0.147, 0.147, 0.147, 0.147, 0.249, 0.249, 0.249,
              0.249, 0.249, 0.0301, 0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21,
              0.21, 0.21, 0.1271003036, 0.1271003036, 0.1271003036,
              0.1271003036)

        ry = (0.0245, 0.0245, 0.0245, 0.0245, 0.12, 0.12, 0.12, 0.12, 0.12,
              0.12, 0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473,
              0.00473, 0.00473, 0.00473, 0.00473, 0.0893, 0.0893, 0.0893,
              0.0893, 0.0893, 0.0304, 0.0304, 0.0304, 0.0304, 0.0304, 0.0496,
              0.0496, 0.0496, 0.0496, 0.0496, 0.0126, 0.0126, 0.0126, 0.0126,
              0.0126, 0.036979, 0.036979, 0.036979, 0.036979, 0.0453280830003,
              0.0453280830003, 0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567, 0.0567, 0, 0, 0, 0, 0,
              0.0272, 0.0272, 0.0272, 0.0272, 0.0272, 0, 0, 0, 0,
              0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0.15428504787, 0.15428504787, 0.15428504787, 0.15428504787, 0, 0,
              0, 0)

        J = (0.0000000349, 0.0000000349, 0.0000000349, 0.0000000349, 0.000022,
             0.000022, 0.000022, 0.000022, 0.000022, 0.000022, 0.0000000889,
             0.0000000889, 0.0000000889, 0.0000000889, 0.0000000889,
             0.0000000889, 0.000000000515, 0.000000000515, 0.000000000515,
             0.000000000515, 0.000000000515, 0.00000575, 0.00000575, 0.00000575,
             0.00000575, 0.00000575, 0.000000472, 0.000000472, 0.000000472,
             0.000000472, 0.000000472, 0.00000156, 0.00000156, 0.00000156,
             0.00000156, 0.00000156, 0.00000000813, 0.00000000813,
             0.00000000813, 0.00000000813, 0.00000000813, 0.00000091838800792,
             0.00000091838800792, 0.00000091838800792, 0.00000091838800792,
             0.0000015847556188, 0.0000015847556188, 0.0000015847556188,
             0.0000015847556188)

        Iw = (0.0000000023, 0.0000000023, 0.0000000023, 0.0000000023, 0.00028,
              0.00028, 0.00028, 0.00028, 0.00028, 0.00028, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0.0000046, 0.0000046, 0.0000046, 0.0000046, 0.0000046,
              0.000000151, 0.000000151, 0.000000151, 0.000000151, 0.000000151,
              0.00000345, 0.00000345, 0.00000345, 0.00000345, 0.00000345,
              0.000000000106, 0.000000000106, 0.000000000106, 0.000000000106,
              0.000000000106, 0.00000040290907437, 0.00000040290907437,
              0.00000040290907437, 0.00000040290907437, 3.06344239388E-08,
              3.06344239388E-08, 3.06344239388E-08, 3.06344239388E-08)

        fy = (320000000, 320000000, 320000000, 320000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 280000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 280000000, 280000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 300000000,
              300000000, 300000000, 300000000, 300000000, 300000000, 300000000,
              300000000)

        E = (200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000)

        G = (80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000)

        Axis = (['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'], ['point'],
                ['point'], ['point'], ['point'], ['point'])

        Ncexp = (419106.155746496, 423045.512255854, 475009.533425687,
                 500054.974957511, 4119875.92303997, 4683790.47801497,
                 6305155.64271461, 8889923.6290362, 10652615.7056175,
                 11494624.3483393, 578958.884095936, 578958.884095936,
                 578958.884095936, 578958.884095936, 578958.884095936,
                 578958.884095936, 37002.0197682433, 37002.0197682433,
                 37002.0197682433, 37002.0197682433, 37002.0197682433,
                 5027703.56526741, 5058371.86882753, 5163478.91459612,
                 5418653.75532658, 5923733.78883968, 964432.579707819,
                 994031.743422623, 1091690.5084164, 1570720.19329256,
                 1644531.83106796, 1417976.88301673, 1542729.59189577,
                 1933264.33901883, 2668463.37209756, 3555092.885703,
                 155110.114279886, 155523.464847291, 165908.779342738,
                 181437.173491866, 203362.838693571, 876230.281613051,
                 1130467.77749414, 2512488.84752147, 2723741.76491102,
                 2608784.57175965, 2617574.9553862, 2816451.11772963,
                 3051632.20837609)

        for i, v in enumerate(zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw,
                                  fy, E, G, Axis, Ncexp)):

            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, \
            Gi, Axi, Ncexpi = v

            with self.subTest(f'{i} N_c_torsion Point Symmetry'):

                Nc = S6.s6_3_3_N_c_torsion(A_n=Ani, k_f=kfi, l_ex=lexi,
                                           l_ey=leyi, l_ez=lezi, r_x=rxi,
                                           r_y=ryi, x_o=xoi, y_o=yoi, J=Ji,
                                           I_w=Iwi, f_y=fyi, E=Ei, G=Gi,
                                           sym=Symmetry(Axi))['N_cz']

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

        # test no symmetry
        # region

        An = (0.00189, 0.00189, 0.00189, 0.00189, 0.0579, 0.0579, 0.0579,
              0.0579, 0.0579, 0.0579, 0.00117, 0.00117, 0.00117, 0.00117,
              0.00117, 0.00117, 0.00279, 0.00279, 0.00279, 0.00279, 0.00279,
              0.00279, 0.000143, 0.000143, 0.000143, 0.000143, 0.000143, 0.0251,
              0.0251, 0.0251, 0.0251, 0.0251, 0.00703, 0.00703, 0.00703,
              0.00703, 0.00703, 0.016, 0.016, 0.016, 0.016, 0.016, 0.000754,
              0.000754, 0.000754, 0.000754, 0.000754, 0.011, 0.011, 0.011,
              0.011, 0.013, 0.013, 0.013, 0.013)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.824,
              0.824, 0.824, 0.824, 0.824, 0.824, 0.958, 0.958, 0.958, 0.958,
              0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        lex = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        ley = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        lez = (10, 5, 1, 0.5, 80, 40, 20, 10, 5, 1, 20, 10, 5, 1, 0.5, 0.1, 20,
               10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5, 0.1, 40, 20, 10, 5, 1, 20, 10,
               5, 1, 0.5, 40, 20, 10, 5, 1, 10, 5, 1, 0.5, 0.1, 10, 5, 1, 0.5,
               10, 5, 1, 0.5)

        rx = (0.0411, 0.0411, 0.0411, 0.0411, 0.515, 0.515, 0.515, 0.515, 0.515,
              0.515, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0425, 0.0587,
              0.0587, 0.0587, 0.0587, 0.0587, 0.0587, 0.00922, 0.00922, 0.00922,
              0.00922, 0.00922, 0.139, 0.139, 0.139, 0.139, 0.139, 0.147, 0.147,
              0.147, 0.147, 0.147, 0.249, 0.249, 0.249, 0.249, 0.249, 0.0301,
              0.0301, 0.0301, 0.0301, 0.0301, 0.21, 0.21, 0.21, 0.21,
              0.1271003036, 0.1271003036, 0.1271003036, 0.1271003036)

        ry = (0.0245, 0.0245, 0.0245, 0.0245, 0.12, 0.12, 0.12, 0.12, 0.12,
              0.12, 0.0164, 0.0164, 0.0164, 0.0164, 0.0164, 0.0164, 0.0298,
              0.0298, 0.0298, 0.0298, 0.0298, 0.0298, 0.00473, 0.00473, 0.00473,
              0.00473, 0.00473, 0.0893, 0.0893, 0.0893, 0.0893, 0.0893, 0.0304,
              0.0304, 0.0304, 0.0304, 0.0304, 0.0496, 0.0496, 0.0496, 0.0496,
              0.0496, 0.0126, 0.0126, 0.0126, 0.0126, 0.0126, 0.036979,
              0.036979, 0.036979, 0.036979, 0.0453280830003, 0.0453280830003,
              0.0453280830003, 0.0453280830003)

        xo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0567, 0.0567, 0.0567, 0.0567,
              0.0567, 0, 0, 0, 0, 0, 0.0272, 0.0272, 0.0272, 0.0272, 0.0272, 0,
              0, 0, 0, 0.0220614080619, 0.0220614080619, 0.0220614080619,
              0.0220614080619)

        yo = (0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0.15428504787, 0.15428504787, 0.15428504787,
              0.15428504787, 0, 0, 0, 0)

        J = (0.0000000349, 0.0000000349, 0.0000000349, 0.0000000349, 0.000022,
             0.000022, 0.000022, 0.000022, 0.000022, 0.000022, 0.0000000148,
             0.0000000148, 0.0000000148, 0.0000000148, 0.0000000148,
             0.0000000148, 0.0000000889, 0.0000000889, 0.0000000889,
             0.0000000889, 0.0000000889, 0.0000000889, 0.000000000515,
             0.000000000515, 0.000000000515, 0.000000000515, 0.000000000515,
             0.00000575, 0.00000575, 0.00000575, 0.00000575, 0.00000575,
             0.000000472, 0.000000472, 0.000000472, 0.000000472, 0.000000472,
             0.00000156, 0.00000156, 0.00000156, 0.00000156, 0.00000156,
             0.00000000813, 0.00000000813, 0.00000000813, 0.00000000813,
             0.00000000813, 0.00000091838800792, 0.00000091838800792,
             0.00000091838800792, 0.00000091838800792, 0.0000015847556188,
             0.0000015847556188, 0.0000015847556188, 0.0000015847556188)

        Iw = (0.0000000023, 0.0000000023, 0.0000000023, 0.0000000023, 0.00028,
              0.00028, 0.00028, 0.00028, 0.00028, 0.00028, 0, 0, 0, 0, 0, 0, 0,
              0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.0000046, 0.0000046, 0.0000046,
              0.0000046, 0.0000046, 0.000000151, 0.000000151, 0.000000151,
              0.000000151, 0.000000151, 0.00000345, 0.00000345, 0.00000345,
              0.00000345, 0.00000345, 0.000000000106, 0.000000000106,
              0.000000000106, 0.000000000106, 0.000000000106,
              0.00000040290907437, 0.00000040290907437, 0.00000040290907437,
              0.00000040290907437, 3.06344239388E-08, 3.06344239388E-08,
              3.06344239388E-08, 3.06344239388E-08)

        fy = (320000000, 320000000, 320000000, 320000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 320000000,
              320000000, 320000000, 320000000, 280000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 280000000, 280000000,
              280000000, 280000000, 280000000, 280000000, 280000000, 280000000,
              320000000, 320000000, 320000000, 320000000, 320000000, 300000000,
              300000000, 300000000, 300000000, 300000000, 300000000, 300000000,
              300000000)

        E = (200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000, 200000000000,
             200000000000, 200000000000, 200000000000)

        G = (80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000,
             80000000000, 80000000000, 80000000000, 80000000000, 80000000000)

        Axis = ([], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                [], [], [], [], [], [], [], [], [], [], [], [], [], [], [], [],
                [], [], [], [], [], [], [])

        Ncexp = (1.669330134E+4, 6.677320534E+4, 4.591320923E+5, 4.997553404E+5,
                 1.604481818E+5, 6.417927271E+5, 2.567170908E+6, 7.636973676E+6,
                 1.040437645E+7, 1.148657049E+7, 9.538696667E+2, 3.815478667E+3,
                 1.526191467E+4, 1.992503406E+5, 1.992503406E+5, 1.992503406E+5,
                 8.731533193E+3, 3.492613277E+4, 1.397045311E+5, 5.789588841E+5,
                 5.789588841E+5, 5.789588841E+5, 4.707676148E+1, 1.883070459E+2,
                 4.707676148E+3, 1.822306529E+4, 3.700201977E+4, 1.840792841E+5,
                 7.363171365E+5, 2.837345351E+6, 4.959250649E+6, 5.923733789E+6,
                 2.389668692E+4, 9.555144229E+4, 3.816249868E+5, 1.562386903E+6,
                 1.643246839E+6, 3.439024093E+4, 1.375609637E+5, 5.502438549E+5,
                 1.978786886E+6, 3.531341223E+6, 1.760403024E+3, 7.029416318E+3,
                 1.296114307E+5, 1.768000222E+5, 2.032422271E+5, 2.003404466E+5,
                 6.208973168E+5, 2.460201882E+6, 2.709683520E+6, 3.929055972E+5,
                 1.526786241E+6, 2.816086259E+6, 3.051544932E+6)

        for i, v in enumerate(zip(An, kf, lex, ley, lez, rx, ry, xo, yo, J, Iw,
                                  fy, E, G, Axis, Ncexp)):

            Ani, kfi, lexi, leyi, lezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, Ei, \
            Gi, Axi, Ncexpi = v

            with self.subTest(f'{i} N_c_torsion, No symmetry'):
                Nc = S6.s6_3_3_N_c_torsion(A_n=Ani, k_f=kfi, l_ex=lexi,
                                           l_ey=leyi, l_ez=lezi, r_x=rxi,
                                           r_y=ryi, x_o=xoi, y_o=yoi, J=Ji,
                                           I_w=Iwi, f_y=fyi, E=Ei, G=Gi,
                                           sym=Symmetry(Axi))['N_cz']

                delta = Ncexpi / Test_UT_S6.delta_p
                self.assertAlmostEqual(first=Nc, second=Ncexpi, delta=delta)

        # endregion

    # end member torsion capacity methods - AS4600
    # endregion

    # member capacity methods
    # region

    def test_s6_1_1_Nc(self):
        """
        Test the s6_1_1_Nc method against values calculated in MS Excel.
        """

        An = (1.890000000E-3, 1.890000000E-3, 1.890000000E-3, 1.890000000E-3,
              5.790000000E-2, 5.790000000E-2, 5.790000000E-2, 5.790000000E-2,
              5.790000000E-2, 5.790000000E-2, 1.170000000E-3, 1.170000000E-3,
              1.170000000E-3, 1.170000000E-3, 1.170000000E-3, 1.170000000E-3,
              2.790000000E-3, 2.790000000E-3, 2.790000000E-3, 2.790000000E-3,
              2.790000000E-3, 2.790000000E-3, 1.430000000E-4, 1.430000000E-4,
              1.430000000E-4, 1.430000000E-4, 1.430000000E-4, 2.510000000E-2,
              2.510000000E-2, 2.510000000E-2, 2.510000000E-2, 2.510000000E-2,
              7.030000000E-3, 7.030000000E-3, 7.030000000E-3, 7.030000000E-3,
              7.030000000E-3, 1.600000000E-2, 1.600000000E-2, 1.600000000E-2,
              1.600000000E-2, 1.600000000E-2, 7.540000000E-4, 7.540000000E-4,
              7.540000000E-4, 7.540000000E-4, 7.540000000E-4, 1.100000000E-2,
              1.100000000E-2, 1.100000000E-2, 1.100000000E-2, 1.300000000E-2,
              1.300000000E-2, 1.300000000E-2, 1.300000000E-2)

        kf = (1, 1, 1, 1, 0.837, 0.837, 0.837, 0.837, 0.837, 0.837, 0.824,
              0.824, 0.824, 0.824, 0.824, 0.824, 0.958, 0.958, 0.958, 0.958,
              0.958, 0.958, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0.95,
              0.95, 0.95, 0.95, 0.95, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)

        l = (10, 10, 10, 10, 80, 80, 80, 80, 80, 80, 20, 20, 20, 20, 20, 20, 20,
             20, 20, 20, 20, 20, 10, 10, 10, 10, 10, 40, 40, 40, 40, 40, 20, 20,
             20, 20, 20, 40, 40, 40, 40, 40, 10, 10, 10, 10, 10, 10, 10, 10, 10,
             10, 10, 10, 10)

        kex = (1, 0.5, 0.1, 0.05, 1, 0.5, 0.25, 0.125, 0.0625, 0.0125, 1, 0.5,
               0.25, 0.05, 0.025, 0.005, 1, 0.5, 0.25, 0.05, 0.025, 0.005, 1,
               0.5, 0.1, 0.05, 0.01, 1, 0.5, 0.25, 0.125, 0.025, 1, 0.5, 0.25,
               0.05, 0.025, 1, 0.5, 0.25, 0.125, 0.025, 1, 0.5, 0.1, 0.05, 0.01,
               1, 0.5, 0.1, 0.05, 1, 0.5, 0.1, 0.05)

        key = (1, 0.5, 0.1, 0.05, 1, 0.5, 0.25, 0.125, 0.0625, 0.0125, 1, 0.5,
               0.25, 0.05, 0.025, 0.005, 1, 0.5, 0.25, 0.05, 0.025, 0.005, 1,
               0.5, 0.1, 0.05, 0.01, 1, 0.5, 0.25, 0.125, 0.025, 1, 0.5, 0.25,
               0.05, 0.025, 1, 0.5, 0.25, 0.125, 0.025, 1, 0.5, 0.1, 0.05, 0.01,
               1, 0.5, 0.1, 0.05, 1, 0.5, 0.1, 0.05)

        kez = (1.000000000E+0, 5.000000000E-1, 1.000000000E-1, 5.000000000E-2,
               1.000000000E+0, 5.000000000E-1, 2.500000000E-1, 1.250000000E-1,
               6.250000000E-2, 1.250000000E-2, 1.000000000E+0, 5.000000000E-1,
               2.500000000E-1, 5.000000000E-2, 2.500000000E-2, 5.000000000E-3,
               1.000000000E+0, 5.000000000E-1, 2.500000000E-1, 5.000000000E-2,
               2.500000000E-2, 5.000000000E-3, 1.000000000E+0, 5.000000000E-1,
               1.000000000E-1, 5.000000000E-2, 1.000000000E-2, 1.000000000E+0,
               5.000000000E-1, 2.500000000E-1, 1.250000000E-1, 2.500000000E-2,
               1.000000000E+0, 5.000000000E-1, 2.500000000E-1, 5.000000000E-2,
               2.500000000E-2, 1.000000000E+0, 5.000000000E-1, 2.500000000E-1,
               1.250000000E-1, 2.500000000E-2, 1.000000000E+0, 5.000000000E-1,
               1.000000000E-1, 5.000000000E-2, 1.000000000E-2, 1.000000000E+0,
               5.000000000E-1, 1.000000000E-1, 5.000000000E-2, 1.000000000E+0,
               5.000000000E-1, 1.000000000E-1, 5.000000000E-2)

        rx = (4.110000000E-2, 4.110000000E-2, 4.110000000E-2, 4.110000000E-2,
              5.150000000E-1, 5.150000000E-1, 5.150000000E-1, 5.150000000E-1,
              5.150000000E-1, 5.150000000E-1, 4.250000000E-2, 4.250000000E-2,
              4.250000000E-2, 4.250000000E-2, 4.250000000E-2, 4.250000000E-2,
              5.870000000E-2, 5.870000000E-2, 5.870000000E-2, 5.870000000E-2,
              5.870000000E-2, 5.870000000E-2, 9.220000000E-3, 9.220000000E-3,
              9.220000000E-3, 9.220000000E-3, 9.220000000E-3, 1.390000000E-1,
              1.390000000E-1, 1.390000000E-1, 1.390000000E-1, 1.390000000E-1,
              1.470000000E-1, 1.470000000E-1, 1.470000000E-1, 1.470000000E-1,
              1.470000000E-1, 2.490000000E-1, 2.490000000E-1, 2.490000000E-1,
              2.490000000E-1, 2.490000000E-1, 3.010000000E-2, 3.010000000E-2,
              3.010000000E-2, 3.010000000E-2, 3.010000000E-2, 2.100000000E-1,
              2.100000000E-1, 2.100000000E-1, 2.100000000E-1, 1.271003036E-1,
              1.271003036E-1, 1.271003036E-1, 1.271003036E-1)

        ry = (2.450000000E-2, 2.450000000E-2, 2.450000000E-2, 2.450000000E-2,
              1.200000000E-1, 1.200000000E-1, 1.200000000E-1, 1.200000000E-1,
              1.200000000E-1, 1.200000000E-1, 1.640000000E-2, 1.640000000E-2,
              1.640000000E-2, 1.640000000E-2, 1.640000000E-2, 1.640000000E-2,
              2.980000000E-2, 2.980000000E-2, 2.980000000E-2, 2.980000000E-2,
              2.980000000E-2, 2.980000000E-2, 4.730000000E-3, 4.730000000E-3,
              4.730000000E-3, 4.730000000E-3, 4.730000000E-3, 8.930000000E-2,
              8.930000000E-2, 8.930000000E-2, 8.930000000E-2, 8.930000000E-2,
              3.040000000E-2, 3.040000000E-2, 3.040000000E-2, 3.040000000E-2,
              3.040000000E-2, 4.960000000E-2, 4.960000000E-2, 4.960000000E-2,
              4.960000000E-2, 4.960000000E-2, 1.260000000E-2, 1.260000000E-2,
              1.260000000E-2, 1.260000000E-2, 1.260000000E-2, 3.697900000E-2,
              3.697900000E-2, 3.697900000E-2, 3.697900000E-2, 4.532808300E-2,
              4.532808300E-2, 4.532808300E-2, 4.532808300E-2)

        xo = (0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              5.670000000E-2, 5.670000000E-2, 5.670000000E-2, 5.670000000E-2,
              5.670000000E-2, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 2.720000000E-2, 2.720000000E-2,
              2.720000000E-2, 2.720000000E-2, 2.720000000E-2, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 2.206140806E-2,
              2.206140806E-2, 2.206140806E-2, 2.206140806E-2)

        yo = (0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0, 1.542850479E-1,
              1.542850479E-1, 1.542850479E-1, 1.542850479E-1, 0.000000000E+0,
              0.000000000E+0, 0.000000000E+0, 0.000000000E+0)

        J = (3.490000000E-8, 3.490000000E-8, 3.490000000E-8, 3.490000000E-8,
             2.200000000E-5, 2.200000000E-5, 2.200000000E-5, 2.200000000E-5,
             2.200000000E-5, 2.200000000E-5, 1.480000000E-8, 1.480000000E-8,
             1.480000000E-8, 1.480000000E-8, 1.480000000E-8, 1.480000000E-8,
             8.890000000E-8, 8.890000000E-8, 8.890000000E-8, 8.890000000E-8,
             8.890000000E-8, 8.890000000E-8, 5.150000000E-10, 5.150000000E-10,
             5.150000000E-10, 5.150000000E-10, 5.150000000E-10, 5.750000000E-6,
             5.750000000E-6, 5.750000000E-6, 5.750000000E-6, 5.750000000E-6,
             4.720000000E-7, 4.720000000E-7, 4.720000000E-7, 4.720000000E-7,
             4.720000000E-7, 1.560000000E-6, 1.560000000E-6, 1.560000000E-6,
             1.560000000E-6, 1.560000000E-6, 8.130000000E-9, 8.130000000E-9,
             8.130000000E-9, 8.130000000E-9, 8.130000000E-9, 9.183880079E-7,
             9.183880079E-7, 9.183880079E-7, 9.183880079E-7, 1.584755619E-6,
             1.584755619E-6, 1.584755619E-6, 1.584755619E-6)

        Iw = (2.300E-9, 2.300E-9, 2.300E-9, 2.300E-9, 2.800E-4, 2.800E-4,
              2.800E-4, 2.800E-4, 2.800E-4, 2.800E-4, 0.000E+0, 0.000E+0,
              0.000E+0, 0.000E+0, 0.000E+0, 0.000E+0, 0.000E+0, 0.000E+0,
              0.000E+0, 0.000E+0, 0.000E+0, 0.000E+0, 0.000E+0, 0.000E+0,
              0.000E+0, 0.000E+0, 0.000E+0, 4.600E-6, 4.600E-6, 4.600E-6,
              4.600E-6, 4.600E-6, 1.510E-7, 1.510E-7, 1.510E-7, 1.510E-7,
              1.510E-7, 3.450E-6, 3.450E-6, 3.450E-6, 3.450E-6, 3.450E-6,
              1.060E-10, 1.060E-10, 1.060E-10, 1.060E-10, 1.060E-10, 4.029E-7,
              4.029E-7, 4.029E-7, 4.029E-7, 3.063E-8, 3.063E-8, 3.063E-8,
              3.063E-8)

        fy = (3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8, 2.800E+8,
              3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.200E+8, 3.000E+8,
              3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8, 3.000E+8,
              3.000E+8)

        E = (2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11, 2.000E+11,
             2.000E+11)

        G = (8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10, 8.000E+10,
             8.000E+10)

        fref = (250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000,
                250000000, 250000000, 250000000, 250000000, 250000000)

        αb = (0, 0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0,
              0, 0, 0, 0.5, 0.5, 0.5, 0.5, 0.5, 0, 0, 0, 0, 0, 0.5, 0.5, 0.5,
              0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)

        Axis = (['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'],
                ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'], [],
                [], [], [], [], [], ['x'], ['x'], ['x'], ['x'], ['x'], ['x'],
                ['x'], ['x'], ['x'], ['x'], ['x'], ['x', 'y'], ['x', 'y'],
                ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x'], ['x'], ['x'], ['x'],
                ['x'], ['x', 'y'], ['x', 'y'], ['x', 'y'], ['x', 'y'],
                ['x', 'y'], ['x'], ['x'], ['x'], ['x'], ['x'], ['y'], ['y'],
                ['y'], ['y'], ['x'], ['x'], ['x'], ['x'])

        calc_buckle = (True, True, True, True, True, True, True, True, True,
                       True, True, True, True, True, True, True, True, True,
                       True, True, True, True, True, True, True, True, True,
                       True, True, True, True, True, True, True, True, True,
                       True, True, True, True, True, True, True, True, True,
                       True, True, True, True, True, True, True, True, True,
                       True)

        calc_torsion = (True, True, True, True, True, True, True, True, True,
                        True, True, True, True, True, True, True, True, True,
                        True, True, True, True, True, True, True, True, True,
                        True, True, True, True, True, True, True, True, True,
                        True, True, True, True, True, True, True, True, True,
                        True, True, True, True, True, True, True, True, True,
                        True)

        φNs = (5.443200000E+5, 5.443200000E+5, 5.443200000E+5, 5.443200000E+5,
               1.221249960E+7, 1.221249960E+7, 1.221249960E+7, 1.221249960E+7,
               1.221249960E+7, 1.221249960E+7, 2.776550400E+5, 2.776550400E+5,
               2.776550400E+5, 2.776550400E+5, 2.776550400E+5, 2.776550400E+5,
               7.697721600E+5, 7.697721600E+5, 7.697721600E+5, 7.697721600E+5,
               7.697721600E+5, 7.697721600E+5, 4.118400000E+4, 4.118400000E+4,
               4.118400000E+4, 4.118400000E+4, 4.118400000E+4, 6.325200000E+6,
               6.325200000E+6, 6.325200000E+6, 6.325200000E+6, 6.325200000E+6,
               1.771560000E+6, 1.771560000E+6, 1.771560000E+6, 1.771560000E+6,
               1.771560000E+6, 3.830400000E+6, 3.830400000E+6, 3.830400000E+6,
               3.830400000E+6, 3.830400000E+6, 2.171520000E+5, 2.171520000E+5,
               2.171520000E+5, 2.171520000E+5, 2.171520000E+5, 2.970000000E+6,
               2.970000000E+6, 2.970000000E+6, 2.970000000E+6, 3.510000000E+6,
               3.510000000E+6, 3.510000000E+6, 3.510000000E+6)

        φNcx = (5.284616142E+4, 1.844614689E+5, 5.183009481E+5, 5.438414112E+5,
                3.320281794E+6, 7.874909207E+6, 1.071608061E+7, 1.188721670E+7,
                1.221249960E+7, 1.221249960E+7, 9.048604737E+3, 3.335589845E+4,
                1.051817775E+5, 2.628108684E+5, 2.776550400E+5, 2.776550400E+5,
                4.031745663E+4, 1.434418660E+5, 3.998646917E+5, 7.490212041E+5,
                7.697721600E+5, 7.697721600E+5, 2.166069395E+2, 8.450598658E+2,
                1.526094137E+4, 3.037026584E+4, 4.118400000E+4, 5.067489518E+5,
                1.809137453E+6, 4.474599988E+6, 5.772627672E+6, 6.325200000E+6,
                5.161027046E+5, 1.180893306E+6, 1.569555702E+6, 1.771560000E+6,
                1.771560000E+6, 9.460669662E+5, 2.530525993E+6, 3.443195209E+6,
                3.737720618E+6, 3.830400000E+6, 1.145553406E+4, 4.072939838E+4,
                1.905596218E+5, 2.113754361E+5, 2.171520000E+5, 2.361190008E+6,
                2.782608512E+6, 2.970000000E+6, 2.970000000E+6, 2.004949755E+6,
                2.974934641E+6, 3.510000000E+6, 3.510000000E+6)

        φNcy = (1.955008852E+4, 7.354648092E+4, 4.780721554E+5, 5.267338221E+5,
                2.269951258E+5, 8.593276372E+5, 2.961841496E+6, 7.422166541E+6,
                1.053573536E+7, 1.221249960E+7, 1.402477685E+3, 5.474761829E+3,
                2.067912255E+4, 2.024594252E+5, 2.527614723E+5, 2.776550400E+5,
                1.086232506E+4, 4.150049053E+4, 1.472501899E+5, 6.772577010E+5,
                7.501178236E+5, 7.697721600E+5, 5.765263862E+1, 2.278897465E+2,
                5.040049825E+3, 1.582803866E+4, 3.903288554E+4, 2.158976733E+5,
                8.138468332E+5, 2.711114876E+6, 5.141151112E+6, 6.325200000E+6,
                2.840240111E+4, 1.080799823E+5, 3.787128805E+5, 1.580577668E+6,
                1.736733133E+6, 4.346354761E+4, 1.685178865E+5, 6.281687830E+5,
                1.971669178E+6, 3.736634899E+6, 2.114193416E+3, 8.155833788E+3,
                1.189753561E+5, 1.818546532E+5, 2.171520000E+5, 2.453097862E+5,
                8.274318985E+5, 2.729354440E+6, 2.950320216E+6, 4.215946567E+5,
                1.329475238E+6, 3.322303429E+6, 3.510000000E+6)

        φNcz = (4.228012061E+4, 1.691204824E+5, 4.275085801E+5, 4.500494775E+5,
                2.659679313E+6, 4.215411430E+6, 5.674640078E+6, 8.000931266E+6,
                9.587354135E+6, 1.034516191E+7, 8.584827001E+2, 3.433930800E+3,
                1.373572320E+4, 1.793253065E+5, 1.793253065E+5, 1.793253065E+5,
                3.049135281E+4, 1.219654112E+5, 3.999235785E+5, 5.210629957E+5,
                5.210629957E+5, 5.210629957E+5, 1.609862000E+2, 6.439447999E+2,
                1.575789065E+4, 2.867379056E+4, 3.330181779E+4, 4.013969876E+5,
                1.605587951E+6, 3.954025453E+6, 4.876788380E+6, 5.331360410E+6,
                4.556201536E+5, 8.436711752E+5, 9.727991554E+5, 1.413144227E+6,
                1.479947157E+6, 7.800331666E+5, 1.388456633E+6, 1.739937905E+6,
                2.401617035E+6, 3.199583597E+6, 8.907592684E+3, 3.394764573E+4,
                1.438483979E+5, 1.619302357E+5, 1.829673872E+5, 1.807360629E+5,
                5.610131898E+5, 2.214592642E+6, 2.438822747E+6, 1.983317484E+6,
                2.345797946E+6, 2.534539918E+6, 2.746397779E+6)

        φNc = (1.955008852E+4, 7.354648092E+4, 4.275085801E+5, 4.500494775E+5,
               2.269951258E+5, 8.593276372E+5, 2.961841496E+6, 7.422166541E+6,
               9.587354135E+6, 1.034516191E+7, 8.584827001E+2, 3.433930800E+3,
               1.373572320E+4, 1.793253065E+5, 1.793253065E+5, 1.793253065E+5,
               1.086232506E+4, 4.150049053E+4, 1.472501899E+5, 5.210629957E+5,
               5.210629957E+5, 5.210629957E+5, 5.765263862E+1, 2.278897465E+2,
               5.040049825E+3, 1.582803866E+4, 3.330181779E+4, 2.158976733E+5,
               8.138468332E+5, 2.711114876E+6, 4.876788380E+6, 5.331360410E+6,
               2.840240111E+4, 1.080799823E+5, 3.787128805E+5, 1.413144227E+6,
               1.479947157E+6, 4.346354761E+4, 1.685178865E+5, 6.281687830E+5,
               1.971669178E+6, 3.199583597E+6, 2.114193416E+3, 8.155833788E+3,
               1.189753561E+5, 1.619302357E+5, 1.829673872E+5, 1.807360629E+5,
               5.610131898E+5, 2.214592642E+6, 2.438822747E+6, 4.215946567E+5,
               1.329475238E+6, 2.534539918E+6, 2.746397779E+6)

        for i, v in enumerate(zip(An, kf, l, kex, key, kez, rx, ry, xo, yo, J,
                                  Iw, fy, E, G, Axis, fref, αb, calc_buckle,
                                  calc_torsion, φNs, φNcx, φNcy, φNcz, φNc)):
            Ani, kfi, li, kexi, keyi, kezi, rxi, ryi, xoi, yoi, Ji, Iwi, fyi, \
            Ei, Gi, Axi, frefi, αbi, cbucki, ctori, φNsi, φNcxi, φNcyi, φNczi, \
            φNci = v

            with self.subTest(f'{i} N'):
                N = S6.s6_1_1_Nc(A_n=Ani, k_f=kfi, l=li, k_ex=kexi, k_ey=keyi,
                                 k_ez=kezi, r_x=rxi, r_y=ryi, x_o=xoi, y_o=yoi,
                                 J=Ji, I_w=Iwi, f_y=fyi, E=Ei, G=Gi,
                                 sym=Symmetry(Axi), f_ref=frefi, α_b=αbi,
                                 uncertainty_factor=0.85, φ=0.9,
                                 calc_buckling=cbucki, calc_torsion=ctori)

                Nsexp = φNsi
                Ncxexp = φNcxi
                Ncyexp = φNcyi
                Nczexp = φNczi
                Ncexp = φNci

                Nsdelta = Nsexp / Test_UT_S6.delta_p
                Ncxdelta = Ncxexp / Test_UT_S6.delta_p
                Ncydelta = Ncyexp / Test_UT_S6.delta_p
                Nczdelta = Nczexp / Test_UT_S6.delta_p
                Ncdelta = Ncexp / Test_UT_S6.delta_p

                self.assertAlmostEqual(first=N['φN_s'], second=Nsexp,
                                       delta=Nsdelta)
                self.assertAlmostEqual(first=N['φN_cx'], second=Ncxexp,
                                       delta=Ncxdelta)
                self.assertAlmostEqual(first=N['φN_cy'], second=Ncyexp,
                                       delta=Ncydelta)
                self.assertAlmostEqual(first=N['φN_cz'], second=Nczexp,
                                       delta=Nczdelta)
                self.assertAlmostEqual(first=N['φN_c'], second=Ncexp,
                                       delta=Ncdelta)

    # endregion

    if __name__ == '__main__':
        unittest.main()
