import unittest
import AS4100_7

class Test_AS4100_7_Test(unittest.TestCase):

    delta_p = 10000.  # accept an accuracy of 0.01% in these tests U.N.O.

    def test_7_2_Tensile_Yield(self):
        #the following set of numbers tests the tensile yield method against
        #values determined in MS Excel.

        Ag = (6.2000E-03, 1.0200E-03, 3.1700E-02, 3.1700E-02, 1.1700E-03,
              5.3900E-02, 2.3000E-03, 2.2000E-03, 2.7500E-03, 5.7900E-02,
              2.3000E-03, 2.0400E-03, 1.5600E-02, 2.7900E-03, 2.1000E-04,
              5.1100E-03, 1.8600E-02, 5.9000E-03, 6.6600E-03, 6.6600E-03,
              7.0300E-03, 4.0100E-03, 1.1400E-02, 4.4600E-04, 2.6300E-04,
              5.0600E-04, 1.9000E-02, 1.0100E-02, 7.2300E-04, 1.5000E-02,
              6.5800E-04, 1.7500E-02, 7.5400E-04, 2.5100E-02, 2.9300E-02,
              1.3500E-03, 3.4800E-03, 2.2600E-03, 1.5000E-03, 2.3000E-03,
              2.3000E-03, 3.5500E-03, 1.8200E-03, 2.6600E-03, 2.9200E-03,
              3.5700E-02, 2.3000E-02, 4.5200E-03, 3.8600E-02, 4.6000E-02,
              1.4300E-04, 2.5600E-04, 3.2600E-04, 7.6400E-03, 3.4000E-02,
              4.4600E-04, 3.7000E-02, 2.6300E-04, 5.0600E-04, 2.9500E-04,
              4.8900E-04, 4.3200E-02, 6.5800E-04, 8.4000E-04, 1.1500E-03,
              9.5700E-04, 9.2100E-04, 1.0500E-03, 1.3500E-03, 5.2800E-02,
              1.6000E-02, 1.6000E-02, 1.4600E-02, 1.4600E-02, 1.6600E-02,
              1.9100E-02, 1.5600E-02, 2.7800E-02, 3.2700E-02, 1.1000E-02,
              1.3000E-02)
        fy = (3.0000E+08, 3.2000E+08, 2.8000E+08, 3.6000E+08, 3.2000E+08,
              2.8000E+08, 3.2000E+08, 3.2000E+08, 3.0000E+08, 3.6000E+08,
              3.2000E+08, 3.2000E+08, 2.8000E+08, 3.2000E+08, 3.2000E+08,
              3.0000E+08, 2.8000E+08, 3.4000E+08, 3.0000E+08, 3.4000E+08,
              2.8000E+08, 3.6000E+08, 3.4000E+08, 3.2000E+08, 3.2000E+08,
              3.2000E+08, 3.4000E+08, 3.4000E+08, 3.2000E+08, 2.8000E+08,
              3.2000E+08, 2.8000E+08, 3.2000E+08, 3.6000E+08, 2.8000E+08,
              3.2000E+08, 3.4000E+08, 3.4000E+08, 3.6000E+08, 3.6000E+08,
              3.6000E+08, 3.4000E+08, 3.6000E+08, 3.4000E+08, 3.4000E+08,
              2.8000E+08, 3.0000E+08, 3.4000E+08, 2.8000E+08, 3.6000E+08,
              3.6000E+08, 3.6000E+08, 3.6000E+08, 3.4000E+08, 2.8000E+08,
              3.6000E+08, 2.8000E+08, 3.6000E+08, 3.6000E+08, 3.6000E+08,
              3.6000E+08, 3.6000E+08, 3.6000E+08, 3.6000E+08, 3.6000E+08,
              3.6000E+08, 3.6000E+08, 3.6000E+08, 3.6000E+08, 3.6000E+08,
              2.8000E+08, 3.4000E+08, 3.0000E+08, 3.8000E+08, 3.8000E+08,
              3.6000E+08, 3.0000E+08, 3.6000E+08, 2.8000E+08, 3.0000E+08,
              3.0000E+08)
        Nt_yield = (1.8600E+06, 3.2640E+05, 8.8760E+06, 1.1412E+07, 3.7440E+05,
                    1.5092E+07, 7.3600E+05, 7.0400E+05, 8.2500E+05, 2.0844E+07,
                    7.3600E+05, 6.5280E+05, 4.3680E+06, 8.9280E+05, 6.7200E+04,
                    1.5330E+06, 5.2080E+06, 2.0060E+06, 1.9980E+06, 2.2644E+06,
                    1.9684E+06, 1.4436E+06, 3.8760E+06, 1.4272E+05, 8.4160E+04,
                    1.6192E+05, 6.4600E+06, 3.4340E+06, 2.3136E+05, 4.2000E+06,
                    2.1056E+05, 4.9000E+06, 2.4128E+05, 9.0360E+06, 8.2040E+06,
                    4.3200E+05, 1.1832E+06, 7.6840E+05, 5.4000E+05, 8.2800E+05,
                    8.2800E+05, 1.2070E+06, 6.5520E+05, 9.0440E+05, 9.9280E+05,
                    9.9960E+06, 6.9000E+06, 1.5368E+06, 1.0808E+07, 1.6560E+07,
                    5.1480E+04, 9.2160E+04, 1.1736E+05, 2.5976E+06, 9.5200E+06,
                    1.6056E+05, 1.0360E+07, 9.4680E+04, 1.8216E+05, 1.0620E+05,
                    1.7604E+05, 1.5552E+07, 2.3688E+05, 3.0240E+05, 4.1400E+05,
                    3.4452E+05, 3.3156E+05, 3.7800E+05, 4.8600E+05, 1.9008E+07,
                    4.4800E+06, 5.4400E+06, 4.3800E+06, 5.5480E+06, 6.3080E+06,
                    6.8760E+06, 4.6800E+06, 1.0008E+07, 9.1560E+06, 3.3000E+06,
                    3.9000E+06)

        for Agi, fyi, Ntyi in zip(Ag ,fy, Nt_yield):

            N = AS4100_7.s7_2_N_t_yield(Agi, fyi)
            delta = Ntyi / Test_AS4100_7_Test.delta_p

            self.assertAlmostEqual(first = N, second = Ntyi, delta = delta)

    def test_7_2_Area_Reqd_Yield(self):
        self.fail("Not implemented")

    def test_7_2_Ultimate_Fracture(self):

        An = (
        5.6998E-03, 9.2752E-04, 3.1153E-02, 3.1461E-02, 1.1424E-03, 5.1368E-02,
        2.0724E-03, 2.1847E-03, 2.4751E-03, 5.7836E-02, 2.1915E-03, 1.9586E-03,
        1.4566E-02, 2.7765E-03, 1.9625E-04, 4.6526E-03, 1.7581E-02, 5.8386E-03,
        6.0825E-03, 6.4992E-03, 6.4646E-03, 3.9247E-03, 1.0777E-02, 4.0835E-04,
        2.4077E-04, 4.7574E-04, 1.8417E-02, 9.3399E-03, 6.8943E-04, 1.4730E-02,
        6.0023E-04, 1.7495E-02, 7.2372E-04, 2.3515E-02, 2.6713E-02, 1.2284E-03,
        3.4452E-03, 2.1198E-03, 1.3533E-03, 2.1452E-03, 2.1677E-03, 3.4306E-03,
        1.7030E-03, 2.4855E-03, 2.9137E-03, 3.5123E-02, 2.2690E-02, 4.2228E-03,
        3.5135E-02, 4.4502E-02, 1.3700E-04, 2.3916E-04, 3.2077E-04, 7.5493E-03,
        3.2882E-02, 4.0213E-04, 3.3658E-02, 2.4772E-04, 4.8185E-04, 2.8492E-04,
        4.5910E-04, 4.2694E-02, 6.2059E-04, 7.7315E-04, 1.0438E-03, 8.6525E-04,
        8.3812E-04, 9.7862E-04, 1.2988E-03, 4.8710E-02, 1.4964E-02, 1.5960E-02,
        1.4051E-02, 1.3935E-02, 1.5185E-02, 1.8303E-02, 1.5375E-02, 2.6425E-02,
        3.0162E-02, 1.0031E-02, 1.1981E-02)
        kt = (
        8.5000E-01, 7.5000E-01, 1.0000E+00, 1.0000E+00, 8.5000E-01, 1.0000E+00,
        8.5000E-01, 7.5000E-01, 7.5000E-01, 1.0000E+00, 1.0000E+00, 1.0000E+00,
        1.0000E+00, 8.5000E-01, 8.5000E-01, 8.5000E-01, 1.0000E+00, 1.0000E+00,
        1.0000E+00, 1.0000E+00, 1.0000E+00, 1.0000E+00, 1.0000E+00, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 1.0000E+00, 1.0000E+00, 8.5000E-01, 1.0000E+00,
        7.5000E-01, 1.0000E+00, 8.5000E-01, 1.0000E+00, 1.0000E+00, 8.5000E-01,
        8.5000E-01, 7.5000E-01, 7.5000E-01, 7.5000E-01, 8.5000E-01, 7.5000E-01,
        7.5000E-01, 1.0000E+00, 8.5000E-01, 1.0000E+00, 1.0000E+00, 1.0000E+00,
        1.0000E+00, 1.0000E+00, 8.5000E-01, 8.5000E-01, 8.5000E-01, 1.0000E+00,
        1.0000E+00, 8.5000E-01, 1.0000E+00, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 1.0000E+00, 7.5000E-01, 7.5000E-01, 8.5000E-01, 8.5000E-01,
        7.5000E-01, 8.5000E-01, 8.5000E-01, 1.0000E+00, 1.0000E+00, 1.0000E+00,
        1.0000E+00, 1.0000E+00, 1.0000E+00, 1.0000E+00, 1.0000E+00, 1.0000E+00,
        1.0000E+00, 1.0000E+00, 1.0000E+00)
        fu = (
        4.4000E+08, 4.4000E+08, 4.3000E+08, 4.8000E+08, 4.4000E+08, 4.3000E+08,
        4.4000E+08, 4.4000E+08, 4.4000E+08, 4.8000E+08, 4.4000E+08, 4.4000E+08,
        4.4000E+08, 4.4000E+08, 4.4000E+08, 4.4000E+08, 4.4000E+08, 4.8000E+08,
        4.4000E+08, 4.8000E+08, 4.4000E+08, 4.8000E+08, 4.8000E+08, 4.4000E+08,
        4.4000E+08, 4.4000E+08, 4.8000E+08, 4.8000E+08, 4.4000E+08, 4.4000E+08,
        4.4000E+08, 4.4000E+08, 4.4000E+08, 4.8000E+08, 4.3000E+08, 4.4000E+08,
        4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08,
        4.8000E+08, 4.8000E+08, 4.8000E+08, 4.3000E+08, 4.3000E+08, 4.8000E+08,
        4.3000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08,
        4.3000E+08, 4.8000E+08, 4.3000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08,
        4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08,
        4.8000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.4000E+08, 4.8000E+08,
        4.3000E+08, 4.8000E+08, 4.8000E+08, 4.8000E+08, 4.3000E+08, 4.8000E+08,
        4.3000E+08, 4.3000E+08, 4.3000E+08)
        UU = (
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01, 8.5000E-01,
        8.5000E-01, 8.5000E-01, 8.5000E-01)
        Nt_ultimate = (
        1.8120E+06, 2.6017E+05, 1.1386E+07, 1.2836E+07, 3.6316E+05, 1.8775E+07,
        6.5880E+05, 6.1281E+05, 6.9426E+05, 2.3597E+07, 8.1962E+05, 7.3252E+05,
        5.4476E+06, 8.8265E+05, 6.2388E+04, 1.4791E+06, 6.5754E+06, 2.3822E+06,
        2.2748E+06, 2.6517E+06, 2.4178E+06, 1.6013E+06, 4.3970E+06, 1.2982E+05,
        7.6540E+04, 1.5124E+05, 7.5141E+06, 3.8107E+06, 2.1917E+05, 5.5091E+06,
        1.6836E+05, 6.5430E+06, 2.3007E+05, 9.5940E+06, 9.7637E+06, 3.9050E+05,
        1.1948E+06, 6.4865E+05, 4.1410E+05, 6.5642E+05, 7.5175E+05, 1.0498E+06,
        5.2112E+05, 1.0141E+06, 1.0105E+06, 1.2838E+07, 8.2932E+06, 1.7229E+06,
        1.2842E+07, 1.8157E+07, 4.7510E+04, 8.2941E+04, 1.1124E+05, 3.0801E+06,
        1.2018E+07, 1.3946E+05, 1.2302E+07, 8.5910E+04, 1.6711E+05, 9.8809E+04,
        1.5921E+05, 1.7419E+07, 1.8990E+05, 2.3658E+05, 3.6198E+05, 3.0007E+05,
        2.5647E+05, 3.3938E+05, 4.5042E+05, 1.9874E+07, 5.5965E+06, 6.5116E+06,
        5.1355E+06, 5.6855E+06, 6.1954E+06, 7.4678E+06, 5.6196E+06, 1.0781E+07,
        1.1024E+07, 3.6662E+06, 4.3792E+06)

        for Ani, kti, fui, UUi, Ntui in zip(An, kt, fu, UU, Nt_ultimate):
            Nt = AS4100_7.s7_2_N_t_ultimate(Ani, fui, kti, UUi)
            delta = Ntui / Test_AS4100_7_Test.delta_p

            self.assertAlmostEqual(first = Nt, second = Ntui, delta = delta)

    def test_7_2_Area_Reqd_Ultimate(self):
        self.fail("Not implemented")

    def test_7_5_a_Unstiffened_Thickness(self):
        self.fail("Not implemented")

    def test_7_5_b_Area_Beyond_Hole(self):
        self.fail("Not implemented")

    def test_7_5_c_Area_Perpendicular_Hole(self):
        self.fail("Not implemented")

    def test_7_1_Tension_Capacity(self):
        self.fail("Not implemented")

    def test_7_1_Area_Reqd(self):
        self.fail("Not implemented")

if __name__ == '__main__':
    unittest.main()
