from unittest import TestCase
import AS4100_5

class Test_UT_AS4100_5(TestCase):
    """
    This class is a unit test class for the methods in the file AS4100_5.py

    These are all bending capacity or shear methods.
    """

    delta_p = 10000  # accept an accuracy of 0.01% in these tests

    def test_s5_2_M_s(self):
        """
        Test the s5_2_M_s method against values calculated in MS Excel.
        """

        Section = ('45x45x3EA', '150x150x12EA', '310UC137', '75x50x8UA',
                   '700WB173', '800WB168', '400WC181', '200x200x26EA',
                   '310UB40.4', '310UC158', '40x40x6EA', '1200WB342',
                   '180UB18.1', '500WC267', '200UBP146', '65x65x8EA',
                   '250UBP62.6', '25x25x5EA', '300PFC', '350WC280', '310UC118',
                   '125x125x12EA', '125x75x12UA', '250UB25.7', '250UBP84.9',
                   '100x100x12EA', '65x50x8UA', '150PFC', '200PFC', '250UC72.9',
                   '310UC96.8', '400WC144', '45x45x5EA', '400WC328', '610UB125',
                   '75x75x10EA', '200UB18.2', '200x200x20EA', '65x50x5UA',
                   '800WB122', '75x50x5UA', '100x100x8EA', '125TFB',
                   '1200WB455', '310UB46.2', '75x75x6EA')

        Zex = (3.19000E-06, 1.55000E-04, 2.30000E-03, 1.70000E-05, 6.39000E-03,
               6.84000E-03, 3.41000E-03, 6.02000E-04, 6.33000E-04, 2.68000E-03,
               5.29000E-06, 1.98000E-02, 1.57000E-04, 6.70000E-03, 1.70000E-03,
               1.92000E-05, 7.47000E-04, 1.47000E-06, 5.64000E-04, 4.94000E-03,
               1.95000E-03, 1.09000E-04, 6.76000E-05, 3.19000E-04, 1.07000E-03,
               6.99000E-05, 1.41000E-05, 1.29000E-04, 2.21000E-04, 9.77000E-04,
               1.55000E-03, 2.41000E-03, 5.32000E-06, 7.10000E-03, 3.68000E-03,
               3.05000E-05, 1.80000E-04, 4.69000E-04, 7.59000E-06, 4.34000E-03,
               8.66000E-06, 4.29000E-05, 8.03000E-05, 2.81000E-02, 7.29000E-04,
               1.84000E-05)

        Zey = (1.55000E-06, 7.23000E-05, 1.04000E-03, 5.93000E-06, 1.06000E-03,
               9.46000E-04, 1.51000E-03, 2.67000E-04, 1.39000E-04, 1.21000E-03,
               2.33000E-06, 2.56000E-03, 3.25000E-05, 2.97000E-03, 7.64000E-04,
               8.59000E-06, 3.18000E-04, 6.42000E-07, 7.72000E-05, 2.45000E-03,
               8.78000E-04, 4.96000E-05, 2.03000E-05, 6.17000E-05, 4.74000E-04,
               3.11000E-05, 5.86000E-06, 3.85000E-05, 4.45000E-05, 4.48000E-04,
               6.84000E-04, 1.07000E-03, 2.44000E-06, 3.20000E-03, 5.15000E-04,
               1.36000E-05, 3.44000E-05, 2.14000E-04, 3.17000E-06, 4.86000E-04,
               3.02000E-06, 2.00000E-05, 1.56000E-05, 5.00000E-03, 1.63000E-04,
               8.70000E-06)

        fy = (3.20000E+08, 3.00000E+08, 2.80000E+08, 3.20000E+08, 2.80000E+08,
              2.80000E+08, 3.00000E+08, 2.80000E+08, 3.20000E+08, 2.80000E+08,
              3.20000E+08, 2.80000E+08, 3.20000E+08, 2.80000E+08, 2.80000E+08,
              3.20000E+08, 3.20000E+08, 3.20000E+08, 3.40000E+08, 3.60000E+08,
              3.40000E+08, 3.40000E+08, 3.40000E+08, 3.60000E+08, 3.40000E+08,
              3.40000E+08, 3.60000E+08, 3.60000E+08, 3.40000E+08, 3.40000E+08,
              3.40000E+08, 3.80000E+08, 3.60000E+08, 3.60000E+08, 3.40000E+08,
              3.60000E+08, 3.60000E+08, 3.40000E+08, 3.60000E+08, 3.80000E+08,
              3.60000E+08, 3.60000E+08, 3.60000E+08, 3.60000E+08, 3.40000E+08,
              3.60000E+08)

        Msx = (1.02080E+03, 4.65000E+04, 6.44000E+05, 5.44000E+03, 1.78920E+06,
               1.91520E+06, 1.02300E+06, 1.68560E+05, 2.02560E+05, 7.50400E+05,
               1.69280E+03, 5.54400E+06, 5.02400E+04, 1.87600E+06, 4.76000E+05,
               6.14400E+03, 2.39040E+05, 4.70400E+02, 1.91760E+05, 1.77840E+06,
               6.63000E+05, 3.70600E+04, 2.29840E+04, 1.14840E+05, 3.63800E+05,
               2.37660E+04, 5.07600E+03, 4.64400E+04, 7.51400E+04, 3.32180E+05,
               5.27000E+05, 9.15800E+05, 1.91520E+03, 2.55600E+06, 1.25120E+06,
               1.09800E+04, 6.48000E+04, 1.59460E+05, 2.73240E+03, 1.64920E+06,
               3.11760E+03, 1.54440E+04, 2.89080E+04, 1.01160E+07, 2.47860E+05,
               6.62400E+03)

        Msy = (4.96000E+02, 2.16900E+04, 2.91200E+05, 1.89760E+03, 2.96800E+05,
               2.64880E+05, 4.53000E+05, 7.47600E+04, 4.44800E+04, 3.38800E+05,
               7.45600E+02, 7.16800E+05, 1.04000E+04, 8.31600E+05, 2.13920E+05,
               2.74880E+03, 1.01760E+05, 2.05440E+02, 2.62480E+04, 8.82000E+05,
               2.98520E+05, 1.68640E+04, 6.90200E+03, 2.22120E+04, 1.61160E+05,
               1.05740E+04, 2.10960E+03, 1.38600E+04, 1.51300E+04, 1.52320E+05,
               2.32560E+05, 4.06600E+05, 8.78400E+02, 1.15200E+06, 1.75100E+05,
               4.89600E+03, 1.23840E+04, 7.27600E+04, 1.14120E+03, 1.84680E+05,
               1.08720E+03, 7.20000E+03, 5.61600E+03, 1.80000E+06, 5.54200E+04,
               3.13200E+03)

        for Zexi, Zeyi, fyi, Msxi, Msyi in zip(Zex, Zey, fy, Msx, Msy):

            Mx = AS4100_5.s5_2_M_s(fyi, Zexi)
            My = AS4100_5.s5_2_M_s(fyi, Zeyi)

            self.assertAlmostEqual(first = Mx, second = Msxi,
                                   delta = Msxi / Test_UT_AS4100_5.delta_p)
            self.assertAlmostEqual(first=My, second=Msyi,
                                   delta=Msyi / Test_UT_AS4100_5.delta_p)

    def test_s5_6_1_M_o(self):
        """
        Test the s5_6_1_M_o method against values calculated in Excel.

        Currently β_x is a random number as an accurate means of calculating β_x
        has not yet been implemented.
        """

        self.fail("Not yet implemented")

    def test_s5_6_1_M_o_β_x(self):
        """
        Test the s5_6_1_M_o method with accurate values of β_x.
        """

        #TODO: implement check with accurate values of β_x

        self.fail("Have not yet developed an accurate β_x calculator)")

    def test_s5_6_1_α_m(self):
        """
        Test the s5_6_1_α_m method
        """

        self.fail("Not yet implemented")

    def test_s5_6_α_s(self):
        """
        Test the s5_6_α_s method
        """

        self.fail("Not yet implemented")

    def test_s5_6_3_k_t(self):
        """
        Test the s5_6_3_k_t method.
        """

        self.fail("Not yet implemented")

    def test_s5_6_3_l_e(self):
        """
        Test the s5_6_3_l_e method.
        """

        self.fail("Not yet implemented")

    def test_s5_6_1_Mb(self):
        """
        Test the s5_6_1_Mb method.
        """

        self.fail("Not yet implemented")
